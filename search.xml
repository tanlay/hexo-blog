<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>keepalived双网卡VIP同步漂移</title>
      <link href="/post/a817c57b.html"/>
      <url>/post/a817c57b.html</url>
      
        <content type="html"><![CDATA[<p>项目使用nginx做负载均衡，防止有单点故障使用两台nginx并且通过keepalived实现高可用，nginx01的nginx进程停了则自动切换至nginx02，由nginx02提供服务。并且内网和外网是独立分开的，故障时内网和外网实现同步漂移。此时需要使用vrrp_sync_group设置同步漂移组。来达到故障同步漂移。keepalived在组播模式下所有的信息都会向224.0.0.18的组播地址发送，产生众多的无用信息，并且会产生干扰和冲突，所以需要将其组播的模式改为单播。避免局域网内有大量的keepalived造成虚拟路由id的冲突。 单播模式需要关闭vrrp_strict这个选项。单播需要在VIP实例配置段加入单播的源地址和目标地址。</p><a id="more"></a><h5 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h5><ul><li>内网VIP（10.1.1.100）与公网VIP（10.1.19.100）是一个同步组</li><li>Nginx01和Nginx02可以故障切换</li><li>Nginx01<ul><li>eth0：10.1.1.11</li><li>eth1：10.1.19.11</li></ul></li><li>Nginx02<ul><li>eth0：10.1.1.13</li><li>eth1：10.1.19.13</li></ul></li><li>VIP1：10.1.1.100</li><li>VIP2：10.1.19.100</li></ul><h5 id="配置nginx01主机keepalived主配置文件"><a href="#配置nginx01主机keepalived主配置文件" class="headerlink" title="配置nginx01主机keepalived主配置文件"></a>配置nginx01主机keepalived主配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 192.168.200.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line"><span class="meta">   #</span>vrrp_strict</span><br><span class="line">   script_user root</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_sync_group VG1 &#123;</span><br><span class="line">    group &#123;</span><br><span class="line">        VI_1</span><br><span class="line">        VI_2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">    script /scripts/check_nginx.sh</span><br><span class="line">    interval 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    nopreempt</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    unicast_src_ip 10.1.1.11</span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        10.1.1.13</span><br><span class="line">    &#125;</span><br><span class="line">    track_interface &#123;</span><br><span class="line">        eth0</span><br><span class="line">        eth1</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_nginx</span><br><span class="line">    &#125;</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.1.1.100</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth1</span><br><span class="line">    virtual_router_id 52</span><br><span class="line">    nopreempt</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    unicast_src_ip 10.1.19.11</span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        10.1.19.13</span><br><span class="line">    &#125;</span><br><span class="line">    track_interface &#123;</span><br><span class="line">        eth0</span><br><span class="line">        eth1</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_nginx</span><br><span class="line">    &#125;</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 2222</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.1.19.100</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Nginx02主机keepalived主配置文件"><a href="#Nginx02主机keepalived主配置文件" class="headerlink" title="Nginx02主机keepalived主配置文件"></a>Nginx02主机keepalived主配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 192.168.200.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line"><span class="meta">   #</span>vrrp_strict</span><br><span class="line">   script_user root</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_sync_group VG1 &#123;</span><br><span class="line">    group &#123;</span><br><span class="line">        VI_1</span><br><span class="line">        VI_2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">    script /scripts/check_nginx.sh</span><br><span class="line">    interval 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    nopreempt</span><br><span class="line">    priority 90</span><br><span class="line">    advert_int 1</span><br><span class="line">    unicast_src_ip 10.1.1.11</span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        10.1.1.13</span><br><span class="line">    &#125;</span><br><span class="line">    track_interface &#123;</span><br><span class="line">        eth0</span><br><span class="line">        eth1</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_nginx</span><br><span class="line">    &#125;</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.1.1.100</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth1</span><br><span class="line">    virtual_router_id 52</span><br><span class="line">    nopreempt</span><br><span class="line">    priority 90</span><br><span class="line">    advert_int 1</span><br><span class="line">    unicast_src_ip 10.1.19.11</span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        10.1.19.13</span><br><span class="line">    &#125;</span><br><span class="line">    track_interface &#123;</span><br><span class="line">        eth0</span><br><span class="line">        eth1</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_nginx</span><br><span class="line">    &#125;</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 2222</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.1.19.100</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Nginx进程监控脚本"><a href="#Nginx进程监控脚本" class="headerlink" title="Nginx进程监控脚本"></a>Nginx进程监控脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">nginx_status=`ps -C nginx --no-header | wc -l`</span><br><span class="line">if [ $nginx_status -eq 0 ];then</span><br><span class="line">    systemctl stop keepalived;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h5 id="查看主机网络信息，可以发现现在nginx01提供服务"><a href="#查看主机网络信息，可以发现现在nginx01提供服务" class="headerlink" title="查看主机网络信息，可以发现现在nginx01提供服务"></a>查看主机网络信息，可以发现现在nginx01提供服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx01 ~]# hostname -I</span><br><span class="line">10.1.1.13 10.1.1.100 10.1.19.13 10.1.19.100</span><br><span class="line">[root@nginx02 ~]# hostname -I</span><br><span class="line">10.1.1.11 10.1.19.11</span><br></pre></td></tr></table></figure><h5 id="模拟nginx故障，查看keepalived的VIP切换"><a href="#模拟nginx故障，查看keepalived的VIP切换" class="headerlink" title="模拟nginx故障，查看keepalived的VIP切换"></a>模拟nginx故障，查看keepalived的VIP切换</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[root@nginx01 ~]# systemctl stop nginx;tail -f /var/log/messages</span><br><span class="line">Dec 27 14:33:07 web01 systemd: Stopping Nginx Web Service...</span><br><span class="line">Dec 27 14:33:07 web01 systemd: Stopped Nginx Web Service.</span><br><span class="line">Dec 27 14:33:08 web01 Keepalived[16440]: Stopping</span><br><span class="line">Dec 27 14:33:08 web01 systemd: Stopping LVS and VRRP High Availability Monitor...</span><br><span class="line">Dec 27 14:33:08 web01 Keepalived_vrrp[16443]: VRRP_Instance(VI_1) sent 0 priority</span><br><span class="line">Dec 27 14:33:08 web01 Keepalived_vrrp[16443]: VRRP_Instance(VI_1) removing protocol VIPs.</span><br><span class="line">Dec 27 14:33:08 web01 Keepalived_vrrp[16443]: VRRP_Instance(VI_2) sent 0 priority</span><br><span class="line">Dec 27 14:33:08 web01 Keepalived_vrrp[16443]: VRRP_Instance(VI_2) removing protocol VIPs.</span><br><span class="line">Dec 27 14:33:08 web01 Keepalived_healthcheckers[16442]: Stopped</span><br><span class="line">Dec 27 14:33:09 web01 Keepalived_vrrp[16443]: Stopped</span><br><span class="line">Dec 27 14:33:09 web01 systemd: Stopped LVS and VRRP High Availability Monitor.</span><br><span class="line">Dec 27 14:33:09 web01 Keepalived[16440]: Stopped Keepalived v1.3.5 (03/19,2017), git commit v1.3.5-6-g6fa32f2</span><br><span class="line"></span><br><span class="line">[root@nginx02 ~]# tail -f /var/log/messages</span><br><span class="line">Dec 27 14:33:08 web02 Keepalived_vrrp[20198]: VRRP_Instance(VI_1) Transition to MASTER STATE</span><br><span class="line">Dec 27 14:33:08 web02 Keepalived_vrrp[20198]: VRRP_Group(VG1) Syncing instances to MASTER state</span><br><span class="line">Dec 27 14:33:08 web02 Keepalived_vrrp[20198]: VRRP_Instance(VI_2) Transition to MASTER STATE</span><br><span class="line">Dec 27 14:33:09 web02 Keepalived_vrrp[20198]: VRRP_Instance(VI_2) Entering MASTER STATE</span><br><span class="line">Dec 27 14:33:09 web02 Keepalived_vrrp[20198]: VRRP_Instance(VI_2) setting protocol VIPs.</span><br><span class="line">Dec 27 14:33:09 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth1 for 10.1.19.100</span><br><span class="line">Dec 27 14:33:09 web02 Keepalived_vrrp[20198]: VRRP_Instance(VI_2) Sending/queueing gratuitous ARPs on eth1 for 10.1.19.100</span><br><span class="line">Dec 27 14:33:09 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth1 for 10.1.19.100</span><br><span class="line">Dec 27 14:33:09 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth1 for 10.1.19.100</span><br><span class="line">Dec 27 14:33:09 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth1 for 10.1.19.100</span><br><span class="line">Dec 27 14:33:09 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth1 for 10.1.19.100</span><br><span class="line">Dec 27 14:33:09 web02 Keepalived_vrrp[20198]: VRRP_Instance(VI_1) Entering MASTER STATE</span><br><span class="line">Dec 27 14:33:09 web02 Keepalived_vrrp[20198]: VRRP_Instance(VI_1) setting protocol VIPs.</span><br><span class="line">Dec 27 14:33:09 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth0 for 10.1.1.100</span><br><span class="line">Dec 27 14:33:09 web02 Keepalived_vrrp[20198]: VRRP_Instance(VI_1) Sending/queueing gratuitous ARPs on eth0 for 10.1.1.100</span><br><span class="line">Dec 27 14:33:09 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth0 for 10.1.1.100</span><br><span class="line">Dec 27 14:33:09 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth0 for 10.1.1.100</span><br><span class="line">Dec 27 14:33:09 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth0 for 10.1.1.100</span><br><span class="line">Dec 27 14:33:09 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth0 for 10.1.1.100</span><br><span class="line">Dec 27 14:33:14 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth1 for 10.1.19.100</span><br><span class="line">Dec 27 14:33:14 web02 Keepalived_vrrp[20198]: VRRP_Instance(VI_2) Sending/queueing gratuitous ARPs on eth1 for 10.1.19.100</span><br><span class="line">Dec 27 14:33:14 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth1 for 10.1.19.100</span><br><span class="line">Dec 27 14:33:14 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth1 for 10.1.19.100</span><br><span class="line">Dec 27 14:33:14 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth1 for 10.1.19.100</span><br><span class="line">Dec 27 14:33:14 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth1 for 10.1.19.100</span><br><span class="line">Dec 27 14:33:14 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth0 for 10.1.1.100</span><br><span class="line">Dec 27 14:33:14 web02 Keepalived_vrrp[20198]: VRRP_Instance(VI_1) Sending/queueing gratuitous ARPs on eth0 for 10.1.1.100</span><br><span class="line">Dec 27 14:33:14 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth0 for 10.1.1.100</span><br><span class="line">Dec 27 14:33:14 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth0 for 10.1.1.100</span><br><span class="line">Dec 27 14:33:14 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth0 for 10.1.1.100</span><br><span class="line">Dec 27 14:33:14 web02 Keepalived_vrrp[20198]: Sending gratuitous ARP on eth0 for 10.1.1.100</span><br></pre></td></tr></table></figure><p>通过日志可以发现，停止nginx01主机的nginx，内外网的VIP同步漂移到nginx02主机上。</p><h5 id="踩了个小坑"><a href="#踩了个小坑" class="headerlink" title="踩了个小坑"></a>踩了个小坑</h5><p><strong>注意：由于配置使用双网卡以及单播模式，发现nginx01会抢占nginx02的VIP。修改配置取消单播之后nginx01没有抢占nginx02的VIP，原因未明。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维基本功 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器异常案例集合</title>
      <link href="/post/10b29f05.html"/>
      <url>/post/10b29f05.html</url>
      
        <content type="html"><![CDATA[<p>作为一名运维工程师，一定要明确解决问题的思路，当遇到各种问题，才能快速定位并解决问题。需要重视错误提示，善于查看日志文件，这样才能快速定位并解决问题。</p><a id="more"></a><h5 id="记一次df-h-命令执行被卡住的问题"><a href="#记一次df-h-命令执行被卡住的问题" class="headerlink" title="记一次df -h 命令执行被卡住的问题"></a>记一次df -h 命令执行被卡住的问题</h5><p>磁盘空间告警，登录服务器使用df -h命令查询磁盘空间,发现命令一直执行但是不返回结果，赶紧执行一下starce df跟踪一下系统调用.发现卡在了nfs挂载上，原因是nfs服务器死机了。</p><ol><li>使用strace df，发现卡在nfs上</li><li>取消挂载nfs盘，问题还未解决</li><li>重启nfs服务端，再次验证成功</li></ol><h5 id="Read-only-filesystem"><a href="#Read-only-filesystem" class="headerlink" title="Read-only filesystem"></a>Read-only filesystem</h5><p>企业服务器运维中，经常会发现操作系统的分区变成只读文件系统，错误提示信息为“Read-only filesystem”，出现只读文件系统，会导致只能读取，而无法写入新文件、新数据等操作。<br>造成该问题的原因包括：磁盘老旧长期大量的读写、文件系统文件被破坏、磁盘碎片文件、异常断电、读写中断等等。</p><p>以CentOS 7 Linux为案例，来修复文件系统，步骤如下：</p><ol><li><p>远程备份本地重要数据。<br>出现只读文件系统，需先备份其他重要数据，基于rsync|scp远程备份，/data为源目录，/backup/2018/为目标备份目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rsync -av /data/ root@192.168.21.98:/backup/2017/</span><br><span class="line">mount -o remount,rw /</span><br></pre></td></tr></table></figure></li><li><p>如果重新挂载/系统无法解决问题，则需重启服务器<br>以CD/DVD光盘引导进入Linux Rescue修复模式，如图所示，光标选择“Troubleshooting”,按Enter键，然后选择“Rescue a CentOS system”，按Enter键。</p></li></ol><p>光盘引导进入修复模式，</p><ul><li><p>选择Continue继续进入系统</p></li><li><p>登录修复模式，执行如下命令，df –h显示原来的文件系统</p></li><li><p>更改root目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chroot /mnt/sysimage</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure></li><li><p>切换原分区目录<br>对有异常的分区进行检测并修复，根据文件系统类型，执行相应的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">umount /dev/sda3</span><br><span class="line">fsck.ext4 /dev/sda3 –y</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>修复完成之后，重启系统即可<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></li></ol><h5 id="Centos安装vmware不能正常使用。有可能是因为某些模块没有编译。"><a href="#Centos安装vmware不能正常使用。有可能是因为某些模块没有编译。" class="headerlink" title="Centos安装vmware不能正常使用。有可能是因为某些模块没有编译。"></a>Centos安装vmware不能正常使用。有可能是因为某些模块没有编译。</h5><ol><li>Could not open /dev/vmmon</li></ol><p>安装界面可以打开，启动虚拟机时报错Could not open /dev/vmmon，是因为没有编译vmmon模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">tar xvf /usr/lib/vmware/modules/source/vmmon.tar</span><br><span class="line">cd vmmon-only</span><br><span class="line">make</span><br><span class="line">cp vmmon.ko /lib/modules/2.6.32-504.el6.x86_64/misc/vmmon.ko</span><br><span class="line">modprobe vmmon</span><br></pre></td></tr></table></figure><ol start="2"><li>打不开网络配置器vmware-ntcfg</li></ol><p>点击网络设置没反应，命令使用vmware-ntecfg也没反应。因为没有编译vmnet模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">tar xvf /usr/lib/vmware/modules/source/vmnet.tar</span><br><span class="line">cd vmnet-only</span><br><span class="line">make</span><br><span class="line">cp vmnet.ko /lib/modules/2.6.32-504.el6.x86_64/misc/vmnet.ko</span><br><span class="line">modprobe vmnet</span><br></pre></td></tr></table></figure><h5 id="MySQL重启报错"><a href="#MySQL重启报错" class="headerlink" title="MySQL重启报错"></a>MySQL重启报错</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Redirecting to /bin/systemctl restart mariadb</span><br><span class="line">Job for mariadb.service failed because the control process exited with error code. See "systemctl status mariadb.service" and "journalctl -xe" for details.</span><br></pre></td></tr></table></figure><p>解决方法：</p><ul><li>journalctl –xe查看MYSQL错误信息</li><li>关闭服务器selinux安全策略，setenforce 0</li><li>检查MYSQL|Mariadb通过什么样的方式部署的</li><li>检查其配置文件/etc/my.cnf，datadir数据目录是否配置</li><li>确认数据库的数据目录mysql用户是否拥有读写权限</li><li>检查数据库目录是否初始化，是否包括mysql、test基础库</li><li>检查socket文件所在的路径，是否存在socket文件，权限是否正确</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维基本功 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门</title>
      <link href="/post/6782be63.html"/>
      <url>/post/6782be63.html</url>
      
        <content type="html"><![CDATA[<p>Docker是Docker.Lnc公司开源的一个基于LXC技术之上搭建的Container容器引擎。Docker将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行,就好像在真实的物理机上运行一样。有了Docker，就不用担心环境问题。用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、修改、分享。使用Docker命令可以快速搭建开发运维环境。</p><a id="more"></a><h3 id="了解Docker"><a href="#了解Docker" class="headerlink" title="了解Docker"></a>了解Docker</h3><p>Docker Hub Registry是一个提供个人与组织保存和开发Docker容器镜像的地方。存放了一些公镜像资源。使用Docker的目的是将应用程序运行所需要的所有组件集合在一个单一而独立的单元中。对于Docker来说，这个单元被称为镜像。镜像是一个静态单元，它是容器运行的应用程序以及应用程序执行所需要的库、配置文件、可执行程序或者其他组件。而容器指的是一个已运行的Docker镜像的实例。镜像是一个模板，而容器是以镜像这个模板启动并附加其他功能的运行实例。</p><h4 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h4><h5 id="查找Docker组件信息的命令"><a href="#查找Docker组件信息的命令" class="headerlink" title="查找Docker组件信息的命令"></a>查找Docker组件信息的命令</h5><ul><li>docker version：查看docker版本</li><li>docker info：查看docker系统信息</li><li>docker help：查看与docker命令一起使用的命令或选项</li><li>docker history：查看镜像历史</li><li>docker inspect：查看镜像或者容器信息</li><li>docker port：列出容器的端口映射</li></ul><h5 id="操作正在运行的容器的命令"><a href="#操作正在运行的容器的命令" class="headerlink" title="操作正在运行的容器的命令"></a>操作正在运行的容器的命令</h5><ul><li>docker ps：列出正在运行的容器</li><li>docker attach：将另一个命令附加到正在运行的容器上</li><li>docker exec：在正在运行的容器中执行命令</li><li>docker inspect：审查容器的元数据</li><li>docker cp：从容器中复制文件到宿主机</li><li>docker diff：检查容器从启动后其文件系统所做的改变</li></ul><h5 id="操作镜像的命令"><a href="#操作镜像的命令" class="headerlink" title="操作镜像的命令"></a>操作镜像的命令</h5><ul><li>docker images：查看系统上的镜像</li><li>docker run：运行镜像</li><li>docker pull：从registry上拉取镜像</li><li>docker push：将镜像传到registry中</li><li>docker save：将镜像保存为tarball</li><li>docker load：将tarball加载到本地镜像</li><li>docker export：从容器中将文件系统导出成本地文件系统的tarball文件</li></ul><h5 id="操作Docker-Registry的命令"><a href="#操作Docker-Registry的命令" class="headerlink" title="操作Docker Registry的命令"></a>操作Docker Registry的命令</h5><ul><li>docker search：在registry中搜索镜像</li><li>docker login：登陆到Docker Hub Registry（可以通过自己的账号推送拉取镜像）</li><li>docker logout：从Docker Hub Registry中登出</li></ul><h5 id="修改现存的镜像的命令"><a href="#修改现存的镜像的命令" class="headerlink" title="修改现存的镜像的命令"></a>修改现存的镜像的命令</h5><ul><li>docker tag：未镜像添加一个名字</li><li>docker rename：修改镜像名字</li></ul><h5 id="修改容器的状态的命令"><a href="#修改容器的状态的命令" class="headerlink" title="修改容器的状态的命令"></a>修改容器的状态的命令</h5><ul><li>docker stop：停止正在运行的容器</li><li>docker start：启动已经停止的容器</li><li>docker restart：重启启动容器</li><li>docker pause：暂停正在运行的容器</li><li>docker unpause：重新启动已经暂停的容器</li><li>docker kill：向容器发送kill信号或其他信号</li></ul><h5 id="查看Docker的活动的命令"><a href="#查看Docker的活动的命令" class="headerlink" title="查看Docker的活动的命令"></a>查看Docker的活动的命令</h5><ul><li>docker events：查看Docker服务器的事件</li><li>docker top：查看容器的进程</li><li>docker logs：查看容器产生的日志消息</li><li>docker stats：查看容器的CPU和内存使用统计</li><li>docker wait：查看容器直到它停止</li></ul><h5 id="创建镜像和容器的命令"><a href="#创建镜像和容器的命令" class="headerlink" title="创建镜像和容器的命令"></a>创建镜像和容器的命令</h5><ul><li>docker build：从头构建镜像</li><li>docker commit：从容器创建镜像</li><li>docker create：从镜像创建容器但是不运行它</li><li>docker import：将文件系统导入镜像中</li></ul><h3 id="部署搭建Docker运行环境"><a href="#部署搭建Docker运行环境" class="headerlink" title="部署搭建Docker运行环境"></a>部署搭建Docker运行环境</h3><h4 id="在Centos7系统中安装docker"><a href="#在Centos7系统中安装docker" class="headerlink" title="在Centos7系统中安装docker"></a>在Centos7系统中安装docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ sudo sudo yum remove docker \</span><br><span class="line">docker-common \</span><br><span class="line">docker-selinux \</span><br><span class="line">docker-engine</span><br><span class="line">[mint@ali-mint ~]$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">[mint@ali-mint ~]$ sudo yum-config-manager \</span><br><span class="line">--add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">[mint@ali-mint ~]$ sudo yum install -y install docker-ce</span><br><span class="line">[mint@ali-mint ~]$ sudo usermod -aG docker $USER</span><br><span class="line">[mint@ali-mint ~]$ systemctl restart docker</span><br><span class="line">[mint@ali-mint ~]$ systemctl enabled docker</span><br><span class="line">[mint@ali-mint ~]$ systemctl status docker</span><br><span class="line">[mint@ali-mint ~]$ docker version</span><br></pre></td></tr></table></figure><h4 id="在ubuntu系统安装docker"><a href="#在ubuntu系统安装docker" class="headerlink" title="在ubuntu系统安装docker"></a>在ubuntu系统安装docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ sudo apt -y update</span><br><span class="line">[mint@ali-mint ~]$ sudo apt -y install docker.io</span><br><span class="line">[mint@ali-mint ~]$ sudo service docker.io restart</span><br><span class="line">[mint@ali-mint ~]$ sduo service docker.io status</span><br><span class="line">[mint@ali-mint ~]$ sudo dpkg-qurey -L docker.io | less</span><br></pre></td></tr></table></figure><h3 id="搭建Docker-Registry"><a href="#搭建Docker-Registry" class="headerlink" title="搭建Docker Registry"></a>搭建Docker Registry</h3><p>如果没有网络的环境下怎么使用docker拉取镜像呢，这就需要提前构建docker私有registry。并且还可以减少pull、push的时间。基于Centos7系统可以使用yum安装docker-registry包来部署docker registry。注意需要开放防火墙访问权限或者直接关闭防火墙。</p><h4 id="安装docker-registry"><a href="#安装docker-registry" class="headerlink" title="安装docker-registry"></a>安装docker-registry</h4><h5 id="使用yum安装"><a href="#使用yum安装" class="headerlink" title="使用yum安装"></a>使用yum安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-registry ~]# yum -y install docker-registry</span><br><span class="line">[root@docker-registry ~]# systemctl restart docker-distribution</span><br><span class="line">[root@docker-registry ~]# systemctl enable docker-distribution</span><br><span class="line">[root@docker-registry ~]# netstat -tnlp|grep registry</span><br><span class="line">tcp6       0      0 :::5000                 :::*                    LISTEN      2703/registry</span><br></pre></td></tr></table></figure><h5 id="使用docker容器部署"><a href="#使用docker容器部署" class="headerlink" title="使用docker容器部署"></a>使用docker容器部署</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-registry ~]# docker run -d 5000:5000 registry</span><br></pre></td></tr></table></figure><h4 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-registry yum.repos.d]# docker run --name myhello hello-world</span><br></pre></td></tr></table></figure><h4 id="允许访问registry"><a href="#允许访问registry" class="headerlink" title="允许访问registry"></a>允许访问registry</h4><p>Docker客户端要求从registry那里获得证书，或者将registry标记为不安全。可以通过编辑/etc/sysconfig/docker文件将registry标记为不安全，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-registry ~]# cat !$</span><br><span class="line">cat /etc/sysconfig/docker</span><br><span class="line">ADD_REGISTRY='--add-registry localhost:5000'</span><br><span class="line">INSECURE_REGISTRY='--insecure-registry loclahost:5000'</span><br><span class="line">[root@docker-registry ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="为镜像打个标签"><a href="#为镜像打个标签" class="headerlink" title="为镜像打个标签"></a>为镜像打个标签</h4><p>使用docker tag命令为镜像指定一个名字，之后可以使用这个名字把镜像推送到本地的docker registry中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-registry ~]# docker tag hello-world localhost:5000/hello-world-me</span><br></pre></td></tr></table></figure><h4 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h4><p>将hello-world-me镜像推送到docker-registry中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-registry ~]# docker push localhost:5000/hello-world-me</span><br></pre></td></tr></table></figure><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><p>为了确保从本地registry中拉取镜像，需要删除本地镜像，然后尝试从本地registry中取回该镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-registry ~]# docker rmi myhello</span><br><span class="line">[root@docker-registry ~]# docker rmi hello-world localhost:5000/hello-world</span><br><span class="line">[root@docker-registry ~]# docker pull localhost:5000/hello-world-me</span><br><span class="line">[root@docker-registry ~]# docker images</span><br></pre></td></tr></table></figure><h4 id="配置私有Docker-Registry仓库"><a href="#配置私有Docker-Registry仓库" class="headerlink" title="配置私有Docker Registry仓库"></a>配置私有Docker Registry仓库</h4><ul><li>–access-logfile：对docker-registry服务的访问记录会记录到所设置的任何文件</li><li>–max-requests 100：设置registry守护进程能够接收的请求上限为100</li><li>–graceful-timeout 3600：工作进程发起重启信号后，在给3600s来完成正在处理的请求。如果这段时间不能处理完，则会被杀死</li><li>-t 3600：工作进程超过3600s(1小时)没有活动，他会被杀死并重启。</li><li>-k gevent：将工作进程类型设置为gevent（基于Greenlets的一种异步工作进程）</li><li>-b 0.0.0.0:5000：将工作进程绑定到系统所在IP地址（0.0.0.0）的5000端口上，此时外部docker客户端可以使用tcp5000端口连接到docker registry</li><li>-w 4：设置工作进程为4</li><li>docker_registry.wsgi:application：进程随Docker registry wsgi应用程序一起运行</li></ul><h3 id="运行容器镜像"><a href="#运行容器镜像" class="headerlink" title="运行容器镜像"></a>运行容器镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run centos cat /etc/os-release</span><br><span class="line">NAME="CentOS Linux"</span><br><span class="line">VERSION="7 (Core)"</span><br><span class="line">ID="centos"</span><br><span class="line">ID_LIKE="rhel fedora"</span><br><span class="line">VERSION_ID="7"</span><br><span class="line">PRETTY_NAME="CentOS Linux 7 (Core)"</span><br><span class="line">ANSI_COLOR="0;31"</span><br><span class="line">CPE_NAME="cpe:/o:centos:centos:7"</span><br><span class="line">HOME_URL="https://www.centos.org/"</span><br><span class="line">BUG_REPORT_URL="https://bugs.centos.org/"</span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT="CentOS-7"</span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION="7"</span><br><span class="line">REDHAT_SUPPORT_PRODUCT="centos"</span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION="7"</span><br></pre></td></tr></table></figure><p>执行以上docker run centos cat /etc/os-release命令则docker引擎会进行以下操作 </p><ul><li>寻找镜像: 到centos:latest的镜像，本地仓库没有则会到Docker.io的registry查找，并下载centos:lateset</li><li>执行命令: cat命令会显示出/etc/os-release文件的内容</li></ul><p>以上命令执行只是打印/etc/os-release文件的内容，打印完就执行完了。可以使用docker images查看本地系统的镜像，docker ps查看正在运行的容器，docker ps -a查看所有容器，如果需要重新启动该容器，则需要使用docker start命令启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">fedora              latest              ef49352c9c21        11 days ago         246MB</span><br><span class="line">ubuntu              latest              3556258649b2        2 weeks ago         64.2MB</span><br><span class="line">centos              latest              9f38484d220f        5 months ago        202MB</span><br><span class="line">[mint@ali-mint ~]$ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                 CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">12572b653b36        centos              "cat /etc/os-release"   16 minutes ago      Exited (0) 16 minutes ago                       upbeat_noyce</span><br><span class="line">[mint@ali-mint ~]$ docker start -i 12572b653b36</span><br><span class="line">NAME="CentOS Linux"</span><br><span class="line">VERSION="7 (Core)"</span><br><span class="line">ID="centos"</span><br><span class="line">ID_LIKE="rhel fedora"</span><br><span class="line">VERSION_ID="7"</span><br><span class="line">PRETTY_NAME="CentOS Linux 7 (Core)"</span><br><span class="line">ANSI_COLOR="0;31"</span><br><span class="line">CPE_NAME="cpe:/o:centos:centos:7"</span><br><span class="line">HOME_URL="https://www.centos.org/"</span><br><span class="line">BUG_REPORT_URL="https://bugs.centos.org/"</span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT="CentOS-7"</span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION="7"</span><br><span class="line">REDHAT_SUPPORT_PRODUCT="centos"</span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION="7"</span><br></pre></td></tr></table></figure><p>此时使用docker start -i 12572b653b36，-i 选项把容器的输出定向到本地shell中</p><h4 id="以交互式运行容器镜像"><a href="#以交互式运行容器镜像" class="headerlink" title="以交互式运行容器镜像"></a>以交互式运行容器镜像</h4><p>常见的例子，打开一个shell在容器内部直接进行操作。可以方便查看容器内部情况并修改内容。以下我通过执行/bin/bash命令打开一个容器的shell进行交互</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run -it centos /bin/bash</span><br><span class="line">[root@10962ad1fb5c /]#</span><br><span class="line">[root@10962ad1fb5c /]# ps -e</span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line">    1 pts/0    00:00:00 bash</span><br><span class="line">   14 pts/0    00:00:00 ps</span><br></pre></td></tr></table></figure><p>此时已经来到容器内部了，可以通过主机名来看，如果主机名没有变化，可以通过执行ps -e命令来查看正在运行的命令来判断。</p><p>也可以在容器中执行命令，使用yum命令添加更多程序到容器中。可以使用exit退出容器shell，还可以通过docker commit命令制作新的镜像，需要使用docker ps -a查询到该容器的容器ID,本地系统就有一个名为testrun的镜像了并可以为接下来的docker run做准备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@10962ad1fb5c /]# yum -y install httpd vsftpd httpd-manual net-tools iproute</span><br><span class="line">[root@10962ad1fb5c /] exit</span><br><span class="line">[mint@ali-mint ~]$ docker commit 10962ad1fb5c testrun</span><br><span class="line">sha256:b38aa80475139935155a341257cb03f4b7cf6279f2a93b509d6a8daab60b8578z</span><br><span class="line">[mint@ali-mint ~]$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE</span><br><span class="line">testrun             latest              b38aa8047513        About a minute ago   356MB</span><br></pre></td></tr></table></figure><h4 id="在容器内运行管理命令"><a href="#在容器内运行管理命令" class="headerlink" title="在容器内运行管理命令"></a>在容器内运行管理命令</h4><p>想在运行容器之后结束后，容器自动销毁，可以添加–rm选项。这样就不会有太多无用容器占用磁盘空间。执行ip和route命令依赖于之前安装的net-tools和iproute命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run -it --rm testrun /usr/sbin/ip addr show eth0</span><br><span class="line">266: eth0@if267: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[mint@ali-mint ~]$ docker run -it --rm testrun /usr/sbin/route -n</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         172.18.0.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class="line">172.18.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br><span class="line">[mint@ali-mint ~]$ ip addr show docker0</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:29:b8:4b:2f brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.1/16 brd 172.18.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>前两个docker命令查询到容器内的网络情况，接下来的IP命令显示了宿主机的docker0网络接口，它的一个IP地址172.18.0.1/16。默认情况下，宿主机会在容器启动时通过DHCP给容器分配地址。testrun运行的第一个ip地址为172.18.0.2/16。如果再次运行容器将会生成新的地址。因为通过run命令每次会生成新的容器。</p><p>通过route可以看到容器的默认网关是172.18.0.1，刚好是宿主机docker0网络接口的IP地址。通过宿主机的docker0接口进行路由能够让容器访问本地宿主机之外的网络资源</p><h4 id="运行容器化服务"><a href="#运行容器化服务" class="headerlink" title="运行容器化服务"></a>运行容器化服务</h4><p>使用容器运行服务由以下优势：</p><ul><li>配置：能够提前配置好所需的全部可执行程序，库，配置文件等无需担心宿主机是否提供这些组件，还方便将容器迁移至另一台服务器</li><li>隔离：每个容器都有自己的文件系统和网络接口，所以能够运行多个相同的服务容器</li></ul><p>使用docker简单构件apache web服务器，apache会默认监听80和443端口。首先创建宿主机目录，添加index.html文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ mkdir /var/www/html/</span><br><span class="line">[mint@ali-mint ~]$ cat  /var/www/html/index.html                                 </span><br><span class="line">The Apache Web Server is Running!</span><br></pre></td></tr></table></figure><p>使用之前构建的testrun镜像，执行以下命令前确保宿主机的80和443没有被占用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run -d -p 80:80 -p 443:443 --name=MyWebServer -v /var/www/:/var/www/ testrun /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">da04638d9afc285111bd0eb51c4e73b0651c3e73ab14af997fb9f31e46cd6fe0</span><br></pre></td></tr></table></figure><table><thead><tr><th>选线</th><th>描述</th></tr></thead><tbody><tr><td>-d</td><td>让容器化命令在后台运行容器</td></tr><tr><td>-p 80:80 -p 443:443</td><td>映射端口，将容器端口映射到宿主机的端口上，冒号左边是宿主机端口，右边是容器端口。这里是将容器的80和443端口分别映射到宿主机的80和443端口上</td></tr><tr><td>–name=MyWebServer</td><td>指定容器名，之后可以通过容器名来操作容器，而不用通过难记的容器ID操作</td></tr><tr><td>-v /var/www:/var/www</td><td>挂载卷，将宿主机（冒号左边）的目录挂载到容器（冒号右边）的目录</td></tr><tr><td>testrun</td><td>镜像名称</td></tr><tr><td>/usr/sbin/httpd -DFOREGROUND</td><td>使用-DFOREGROUND选项来运行httpd守护进程</td></tr></tbody></table><p>此时使用docker ps可以看到该容器，看到容器被分配了容器ID，使用的镜像testrun，运行的命令是httpd，容器是在11分钟之前创建的，宿主机上所有IPv4的网络接口将会对80和443端口的请求转发到容器内对应的端口上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker ps </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                      NAMES</span><br><span class="line">da04638d9afc        testrun             "/usr/sbin/httpd -DF…"   11 minutes ago      Up 11 minutes       0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp   MyWebServer</span><br></pre></td></tr></table></figure><p>也可以使用docker exec进入容器，按exit退出容器。</p><p>因为容器的80端口已经映射到宿主机的80上，所以通过访问宿主机的80端口即可访问到文件/var/www/html/index.html的内容。因为安装过httpd-manual包。所以还可以通过浏览器访问宿主机地址的80端口下的/manual页面可以访问到httpd的manual页</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker exec -it MyWebServer /bin/bash </span><br><span class="line">[root@da04638d9afc /]# exit</span><br><span class="line">exit</span><br><span class="line">[mint@ali-mint ~]$ curl localhost</span><br><span class="line">The Apache Web Server is Running!</span><br></pre></td></tr></table></figure><h4 id="在容器中运行服务时进行资源限制"><a href="#在容器中运行服务时进行资源限制" class="headerlink" title="在容器中运行服务时进行资源限制"></a>在容器中运行服务时进行资源限制</h4><p>默认情况下，容器运行时，容器访问内存、CPU方面是没有限制的，可以使用–memory、–momory-swap、–cpu-shares和–cpuset-cpus选项来限制可以使用的内存和CPU。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run -d -p 80:80 -p 443:443 --name=MyWebServer -v /var/www/:/var/www/ --memory=10m --memory-swap=-1 --cpu-shares=256 testrun /usr/sbin/httpd -DFOREGROUND ec5e1a8281f0f8406187431f1eb3a5b46e864ab85adf2aadc8c5eddc1698a8fb</span><br></pre></td></tr></table></figure><ul><li>–memory=10m：容器可以使用10m的内存</li><li>–memory-swap=-1：容器可以无限制使用交换空间，如果不设置默认为memory的2倍（20m）</li><li>–cpu-shares=256： 在1024范围内设置CPU配额。设置256只占1024的25%</li><li>–cpuset-cpus=0,1：使用CPU核0或1</li><li>–cpuset-cpus=3：使用第四个CPU核</li><li>–cpuset-cpus=1-3：使用CPU核1，2或3</li></ul><h4 id="运行特权容器"><a href="#运行特权容器" class="headerlink" title="运行特权容器"></a>运行特权容器</h4><p>大多数情况下，运行docker容器时，会限制访问宿主机或其他容器的访问以及其他容器访问我正在运行的容器。然而有些特殊情况下，想要让容器拥有更大的宿主机系统访问权限。这种容器就成为特权容器</p><table><thead><tr><th>选线</th><th>描述</th></tr></thead><tbody><tr><td>–ipc</td><td>IPC：开放访宿主机的进程间通信设施。默认情况下，每个容器都有私有的IPC功能设施</td></tr><tr><td>–net-host</td><td>网络接口：向容器开放宿主机的网路接口。容器默认都有自己的网络接口</td></tr><tr><td>–pid=host</td><td>进程表：允许容器访问进程表。容器默认有自己的进程表</td></tr><tr><td>-e HOST=/host</td><td>宿主机文件系统：如果设置了，HOST环境变量会告诉容器将宿主机的root文件系统挂载到容器的某个目录上，推荐挂载在/host下</td></tr><tr><td>–privileged</td><td>这一选项会关闭容器运行命令的安全隔离。因此，以root运行的进程拥有宿主机上以root运行任何进程是同样的权限</td></tr></tbody></table><h3 id="查找、拉取、保存和装载容器镜像"><a href="#查找、拉取、保存和装载容器镜像" class="headerlink" title="查找、拉取、保存和装载容器镜像"></a>查找、拉取、保存和装载容器镜像</h3><h4 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h4><p>使用docker search命令搜索镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker search centos</span><br><span class="line">[mint@ali-mint ~]$ docker search ubuntu</span><br><span class="line">[mint@ali-mint ~]$ docker search nginx</span><br><span class="line">[mint@ali-mint ~]$ docker search mysql</span><br><span class="line">[mint@ali-mint ~]$ docker search jenkins</span><br></pre></td></tr></table></figure><p>也可以细化搜索</p><ul><li>-s：查找star数至少是多少的</li><li>–no-trunc：告诉docker search不要截取描述字段</li><li>automated=true：只显示定期自动重新构建的镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker search -s 100 centos</span><br><span class="line">[mint@ali-mint ~]$ docker search --no-trunc=true mysql</span><br><span class="line">[mint@ali-mint ~]$ docker search --automated=true centos</span><br></pre></td></tr></table></figure><h4 id="在Docker-Hub上检索镜像"><a href="#在Docker-Hub上检索镜像" class="headerlink" title="在Docker Hub上检索镜像"></a>在Docker Hub上检索镜像</h4><p>通过web浏览器访问<a href="https://registry.hub.docker.com/" target="_blank" rel="noopener">Docker Hub Registry</a>，可以找到镜像的很多信息。如果需要查找多个镜像的文档，可以访问<a href="https://github.com/docker-library/doc" target="_blank" rel="noopener">Docker Library</a>，找到相应镜像并查看其文档</p><ul><li>支持的镜像版本</li><li>用来运行镜像的基本docke run命令</li><li>配合docker run使用环境变量，这些变量可以更改镜像设置</li><li>这个容器镜像在github页面的位置</li><li>用于构建该镜像的Dockerfile文件</li></ul><h4 id="从Docker-Registry上拉取镜像"><a href="#从Docker-Registry上拉取镜像" class="headerlink" title="从Docker Registry上拉取镜像"></a>从Docker Registry上拉取镜像</h4><p>通过docker pull命令可以从docker registry上拉取镜像，可以从Docker Hub Registry上拉取，也可以从自建的docker registry上拉取。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker pull centos</span><br><span class="line">[mint@ali-mint ~]$ docker pull mysql</span><br><span class="line">[mint@ali-mint ~]$ docker pull nginx</span><br><span class="line">[mint@ali-mint ~]$ docker pull 172.16.100.10:5000/centos</span><br><span class="line">[mint@ali-mint ~]$ docker pull 172.16.100.10:5000/mysql</span><br><span class="line">[mint@ali-mint ~]$ docker pull 172.16.100.10:5000/nginx</span><br></pre></td></tr></table></figure><h4 id="保存和装载镜像"><a href="#保存和装载镜像" class="headerlink" title="保存和装载镜像"></a>保存和装载镜像</h4><p>拉取镜像并不是将镜像放入Docker的唯一方式，还可以把镜像保存为tarball，然后copy到其他系统中，并装载它。</p><p>以下使用docker save命令将centos进行保存为一个tarball。tarball文件都包含了要构成保存镜像所需要的层，再将tar拷贝到另一个运行Docker服务的系统后，可使用docker load命令装载它并查看结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker save -o centos7.tar centos</span><br><span class="line">[mint@ali-mint ~]$ scp centos7.tar 172.18.9.50:/tmp</span><br><span class="line">[test@test ~]$ docker load -i /tmp/centos7.tar</span><br><span class="line">[test@test ~]$ docker images|grep centos</span><br></pre></td></tr></table></figure><h3 id="为镜像添加标签"><a href="#为镜像添加标签" class="headerlink" title="为镜像添加标签"></a>为镜像添加标签</h3><p>使用Docker build创建镜像后，或者使用docker commit将容器提交给镜像之后，可以用docker tag为镜像添加额外的标签。</p><ul><li><strong>版本号</strong>：版本号可以帮助识别在构建过程中使用了软件的哪个版本。如ubuntu:16.04、centos:6.8</li><li><strong>版本名</strong>：可以为镜像的某个版本分配一个名字。如ubuntu:15.04又叫vivid。fedora:20叫heisenbug</li><li><strong>latest</strong>：当运行镜像却没有指定具体的标签时，docker命令会寻找标签为latest的相应镜像。</li></ul><p>通过镜像名开头部分的附加文本，可以标识出registry——可以找到该镜像（docker pull）的地方或者保存镜像（docker push）的地方。以下是镜像名前面的附加文本可以使用的内容。</p><ul><li><strong>registry名和端口</strong>：镜像的标签的重要的用途就是添加registry名。镜像最开始的那部分以斜线分隔添加regsitry名及可选的端口号，docker pull和docker push时可以准确知道去哪里获取你寻找的镜像和保存到何处。</li><li><strong>用户名</strong>：在docker.io.registry中创建用户账号后，可以将该账号的用户名放在镜像名的前面，标识镜像是docker.io上对应用户的regsitry的一部分。例如：如果推送名为 docker.io/cricket/hangman的镜像，hangman镜像会被定向到docker.io registry的cricket的私人存储区域。</li></ul><h4 id="为镜像分配名称"><a href="#为镜像分配名称" class="headerlink" title="为镜像分配名称"></a>为镜像分配名称</h4><p>在最初创建镜像时会为该Docker镜像指定一个镜像名。以下是创建镜像的其中几种方法：</p><ul><li><strong>创建镜像</strong>：当从Dockerfile构建镜像时，可以为其分配一个名字。如下以当前目录下的Dockerfile构建镜像，并取名为centos_web</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> [mint@ali-mint centos_web]$ docker build -t centos_web .</span></span><br></pre></td></tr></table></figure><ul><li><strong>提交镜像</strong>：在让镜像运行并按照想要保留的方式做一些更改后，可以使用docker commit命令将这些改变提交给一个容器。我运行了一个centos_web镜像并将容器称为new_centos_web，之后在将new_centos_web提交给名为mycentos_web的新镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint centos_web]$ docker run -d -p 8080:80 --name=centos_web centos_web</span><br><span class="line">[mint@ali-mint centos_web]$ docker stop newc_entos_web</span><br><span class="line">[mint@ali-mint centos_web]$ docker commit -m "Web server with data" -a "Mr.Chen" new_centos_web mycentos_web</span><br></pre></td></tr></table></figure><ul><li><strong>导出与导入镜像</strong>：可以使用docker export命令将镜像以tar文件的形式保存至自己的文件系统。将之前的tar文件导入系统时，可以为镜像指定一个名字。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint centos_web]$ docker export new_centos_web &gt; mycentosweb.tar</span><br><span class="line">[mint@ali-mint centos_web]$ cat mycentos.tar | docker import - mycentosweb</span><br></pre></td></tr></table></figure><h4 id="为镜像分配标签"><a href="#为镜像分配标签" class="headerlink" title="为镜像分配标签"></a>为镜像分配标签</h4><p>通过为镜像添加标签，可以更具体的描述镜像包含的内容。标签最常用的是添加版本信息。当有新标签时称为latest。如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker tag centos_web centos_web:1.0</span><br><span class="line">[mint@ali-mint ~]$ docker tag centos_web centos_web:monkey</span><br><span class="line">[mint@ali-mint ~]$ docker images|grep centos_web</span><br><span class="line">[mint@ali-mint ~]$ docker images | grep centos_web        </span><br><span class="line">centos_web            1.0                 3da863aec628        About an hour ago   346MB</span><br><span class="line">centos_web            latest              3da863aec628        About an hour ago   346MB</span><br><span class="line">centos_web            monkey              3da863aec628        About an hour ago   346MB</span><br></pre></td></tr></table></figure><p>以上三个镜像ID完全相同，可以判断出这3个镜像其实是同一个镜像。另外可以使用-f选项强制命名。</p><h4 id="为镜像分配repository"><a href="#为镜像分配repository" class="headerlink" title="为镜像分配repository"></a>为镜像分配repository</h4><p>镜像名称中的image_name:tag能够标识出这是什么样的镜像，附加到名称之前的信息还能标识出存储镜像的repository。命令容器时，repository的信息是可选的，添加语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[repository]:[port]/[uesrname]/image_name:tag</span><br></pre></td></tr></table></figure><h5 id="为镜像附加用户名"><a href="#为镜像附加用户名" class="headerlink" title="为镜像附加用户名"></a>为镜像附加用户名</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker tag centos_web:latest dookt/centos:latest</span><br></pre></td></tr></table></figure><h5 id="为镜像附加repository名"><a href="#为镜像附加repository名" class="headerlink" title="为镜像附加repository名"></a>为镜像附加repository名</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker tag centos_web:1.0  mtregistry.exmaple.com:5000/centos:1.0</span><br></pre></td></tr></table></figure><h3 id="检视容器"><a href="#检视容器" class="headerlink" title="检视容器"></a>检视容器</h3><p>每个镜像所附带的信息包含了默认配置、创建者信息以及何时以何种方式创建的细节。在容器运行后，容器会包含额外的信息，如容器的网络配置、容器是否正在运行以及挂载卷的信息。</p><p>在容器或镜像上运行docker inspect命令可以查看与之关联的底层数据。在用镜像或容器调试问题时，很有帮助。例如查看容器IP地址可以了解客户端程序（Web浏览器）去哪里寻找容器中运行的服务。docker inspect采用json格式显示，方便阅读。</p><h4 id="用docker-inspect检视基础镜像"><a href="#用docker-inspect检视基础镜像" class="headerlink" title="用docker inspect检视基础镜像"></a>用docker inspect检视基础镜像</h4><p>通过检视镜像可以大致了解到镜像的创建时间、构建镜像使用的Docker版本，对外开放的端口等信息。以下例子检视了最新的centos镜像。倘若centos:latest尚未拉取到我的本地系统，该命令会先拉取对应镜像并检视它。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker inspect centos</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line"> "Architecture": "amd64",</span><br><span class="line">        "Author": "",</span><br><span class="line">"Comment": "",</span><br><span class="line">"Config": &#123;</span><br><span class="line">            "AttachStdin": false,</span><br><span class="line">            "AttachStdout": false,</span><br><span class="line">            "AttachStderr": false,</span><br><span class="line">"Cmd": [</span><br><span class="line">                "/bin/sh",</span><br><span class="line">                "-c",</span><br><span class="line">                "#(nop) ",</span><br><span class="line">                "CMD [\"/bin/bash\"]"</span><br><span class="line">            ],</span><br><span class="line">"Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span><br><span class="line">            ],</span><br><span class="line">...</span><br><span class="line">"Created": "2019-03-14T21:19:53.361167852Z",</span><br><span class="line">        "DockerVersion": "18.06.1-ce",</span><br><span class="line">        "Id": "sha256:9f38484d220fa527b1fb19747638497179500a1bed8bf0498eb788229229e6e1",</span><br><span class="line">        "Os": "linux",</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>从这些输出可以看出很多信息。该容器体系结构是amd64的，兼容64PC机。该镜像创建时没有定义Comment和Author。Config部分设置了容器运行的环境。</p><p>如果运行时没有指定其他命令，默认会运行/bin/bash命令。由于与标准输入、标准输出和标准错误的关联被设置为false。因此在运行该容器时要指定一些选项（docker run -it centos）。Env设置了PATH变量，定义了运行命令是用于查找命令的目录。最后一部分显示了和容器创建相关的基本信息。如创建时间，创建容器的docker版本，完整的容器ID以及是何种操作系统。</p><h4 id="查看镜像历史"><a href="#查看镜像历史" class="headerlink" title="查看镜像历史"></a>查看镜像历史</h4><p>可以在基础镜像是上构建生成新镜像。每次在镜像上运行新命令。就会长生一个新的容器层。如果这些层与镜像保存在一起就可以使用docker history命令查看这些信息。</p><p>要查看镜像历史，只要该镜像上执行docker history命令即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker history centos</span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">9f38484d220f        5 months ago        /bin/sh -c #(nop)  CMD ["/bin/bash"]            0B                  </span><br><span class="line">&lt;missing&gt;           5 months ago        /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B                  </span><br><span class="line">&lt;missing&gt;           5 months ago        /bin/sh -c #(nop) ADD file:074f2c974463ab38c…   202MB</span><br></pre></td></tr></table></figure><p>可以看到，镜像是5个月前构建的，并修改了3次，还可以看到生成镜像的shell命令。之后容器如果使用了IMAGE列的任何镜像层，就不必在拉去那个层，而只要使用系统中已经存在的这个层就可以了。</p><h4 id="检视正在运行的容器"><a href="#检视正在运行的容器" class="headerlink" title="检视正在运行的容器"></a>检视正在运行的容器</h4><p>一旦容器运行起来，不但可以获得原始镜像的信息还可以获得docker run命令所设置的许多数据，以及它在运行时添加到容器的配置设置。只要docker ps -a能列出来的容器，都可以用docker inspect来查看</p><h5 id="启动要检视的容器"><a href="#启动要检视的容器" class="headerlink" title="启动要检视的容器"></a>启动要检视的容器</h5><p>以下例子使用centos镜像通过python命令和SimpleHTTPServer组件运行一个简单的Web服务器。Web服务器以守护进程（-d）的方式在后台运行，并且容器的8080端口开放给宿主机，容器名字为centos_web，通过设置–restart=”on-failure:5”当容器发生故障时，docker会至多尝试5次来重启容器。默认不会自动重启，初始镜像是centos，用python2运行SimpleHTTPServer模块来让8080端口提供服务。可以通过在宿主机上执行命令curl localhost:8080 容器是否在运行，可以发现在容器中和在宿主机上执行该命令输出结果都一致。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@ali-mint ~]# echo "Start Python Web Server on Centos: Successful" &gt; /var/www/html/index.html</span><br><span class="line">[root@ali-mint ~]# docker run -d -p 8080:8080 --name="centos_web" --restart="on-failure:5" -w /var/www/html/ -v /var/www/html/:/var/www/html/ centos python -m SimpleHTTPServer 8080</span><br><span class="line">7544f6d77f308b1ddc4948ba7cb9da19f18df8143b05946ca1972c09b2c5b4dd</span><br><span class="line">[root@ali-mint ~]# docker exec -it 7544f6d77f30 /bin/bash</span><br><span class="line">[root@7544f6d77f30 html]# curl localhost:8080</span><br><span class="line">Start Python Web Server on Centos: Successful</span><br><span class="line">[root@ali-mint ~]# curl localhost:8080</span><br><span class="line">Start Python Web Server on Centos: Successful</span><br></pre></td></tr></table></figure><h5 id="检视整个容器配置"><a href="#检视整个容器配置" class="headerlink" title="检视整个容器配置"></a>检视整个容器配置</h5><p>使用docker inspect命令可以直接输出该容器的全部信息，当然也可以通过使用管道、重定向将内容送到more、less或文件上以便阅读。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@ali-mint mint]# docker inspect centos_web</span><br><span class="line">...</span><br><span class="line">        "Args": [</span><br><span class="line">            "-m",</span><br><span class="line">            "SimpleHTTPServer",</span><br><span class="line">            "8080"</span><br><span class="line">        ],</span><br><span class="line">        "Config": &#123;</span><br><span class="line">            "AttachStdin": false,</span><br><span class="line">            "AttachStdout": false,</span><br><span class="line">            "AttachStderr": false,</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "python",</span><br><span class="line">                "-m",</span><br><span class="line">                "SimpleHTTPServer",</span><br><span class="line">                "8080"</span><br><span class="line">            ],</span><br></pre></td></tr></table></figure><p>属性Arg中保存了容器启动是传给python命令的3个参数。Config部分显示标准错误、标准输入和标准输出并关联到启动容器的终端会话上。如果要运行/bin/bash，以便通过终端控制台直接与容器交互，这些设置应该设置为true，而不是false。Config部分的Cmd属性存放了命令（Python）及传给该命令的所有参数（-m、SimpleHTTPServer和8080）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">"Hostname": "7544f6d77f30",</span><br><span class="line">"CpuShares": 0,</span><br><span class="line">"CpusetCpus": "",</span><br><span class="line">...</span><br><span class="line"> "ExposedPorts": &#123;</span><br><span class="line">              "8080/tcp": &#123;&#125;</span><br><span class="line">          &#125;,</span><br><span class="line">     "Tty": false,</span><br><span class="line">          "OpenStdin": false,</span><br><span class="line">          "StdinOnce": false,</span><br><span class="line">          "Env": [</span><br><span class="line">              "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span><br><span class="line">          ],</span><br></pre></td></tr></table></figure><p>如果系统中存在多个容器，也许想要为每个容器分配CPU配额，以确保重要的容器获得更高比例的CPU时间，此处，CpusShares并未获取到CPU的优先级。如果设定了CpusetCpus，容器只会在选中的CPU上运行。这两个值都可以通过docker run命令的-c和–cpuset-cpus=””选项设置.</p><p>Env部分包含了PATH的设置，PATH定义了在容器中执行命令时用来查找命令的目录。ExposedPorts显示容器TCP8080端口开放到宿主机的相同端口上。由于命令行中没有设置主机名，容器的前12个字符被用作主机名。可以使用docker run的-h选项为容器分配主机名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"Image": "centos",</span><br><span class="line">...</span><br><span class="line">"User": "",</span><br><span class="line">...</span><br><span class="line">"WorkingDir": "/var/www/html",</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>Images显示使用的镜像名称（centos），User没有设置，如设置则容器内的命令会使用指定的用户运行。例如，docker run命令设置-u aapache选项，Web服务器会以apache用户运行，而不是root用户。WorkingDir设置工作目录（命令执行的目录）设置为/var/www/html。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">"HostConfig": &#123;</span><br><span class="line">...</span><br><span class="line">           "PortBindings": &#123;</span><br><span class="line">               "8080/tcp": [</span><br><span class="line">                   &#123;</span><br><span class="line">                       "HostIp": "",</span><br><span class="line">                       "HostPort": "8080"</span><br><span class="line">                   &#125;</span><br><span class="line">               ]</span><br><span class="line">           &#125;,</span><br><span class="line">           "Privileged": false,</span><br><span class="line">           "PublishAllPorts": false,</span><br><span class="line">           "ReadonlyRootfs": false,</span><br><span class="line">           "RestartPolicy": &#123;</span><br><span class="line">               "Name": "on-failure",</span><br><span class="line">               "MaximumRetryCount": 5</span><br><span class="line">           &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>PortBindings设置了TCP8080端口对宿主机上所有IP地址的8080端口开放。Privileged: false表示容器除了额外指定的方式（如明确的从宿主机挂载卷）之外，没有权限访问其他容器或者宿主机。当PublishAllPorts设置为false时，容器中只有那些明确指定的端口（此处的8080）才能被宿主机相同的端口访问到。ReaadonlyRootfs设置为false。则root文件系统可以被写入。RestartPolicy默认属性如果发生故障不重启，本例会重启5次</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"Id": "7544f6d77f308b1ddc4948ba7cb9da19f18df8143b05946ca1972c09b2c5b4dd",</span><br><span class="line">"Image": "sha256:9f38484d220fa527b1fb19747638497179500a1bed8bf0498eb788229229e6e1",</span><br><span class="line">"Name": "/centos_web",</span><br><span class="line">"MountLabel": "",</span><br><span class="line">"HostnamePath": "/var/lib/docker/containers/7544f6d77f308b1ddc4948ba7cb9da19f18df8143b05946ca1972c09b2c5b4dd/hostname",   </span><br><span class="line">"HostsPath": "/var/lib/docker/containers/7544f6d77f308b1ddc4948ba7cb9da19f18df8143b05946ca1972c09b2c5b4dd/hosts",</span><br><span class="line">"LogPath": "/var/lib/docker/containers/7544f6d77f308b1ddc4948ba7cb9da19f18df8143b05946ca1972c09b2c5b4dd/7544f6d77f308b1ddc4948ba7cb9da19f18df8143b05946ca1972c09b2c5b4dd-json.log",</span><br></pre></td></tr></table></figure><p>HostnamePath设置了容器/etc/hostname文件的位置。HostPath设置了容器/etc/hosts文件的位置，该文件将容器的主机名和IP地址关联到一起，同时还设置了localhost的IP地址以及IPV6地址。LogPath设定了与该容器关联的日志文件位置，文件名是容器ID-json.log。可以使用docker logs centos_web查看容器日志。MountLabel设置了selinux的上下文。Name属性的内容是斜杠加上容器名(/centos_web)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">"NetworkSettings": &#123;</span><br><span class="line">            "Bridge": "",</span><br><span class="line">            "Gateway": "172.18.0.1",</span><br><span class="line">            "GlobalIPv6Address": "",</span><br><span class="line">            "GlobalIPv6PrefixLen": 0,</span><br><span class="line">            "IPAddress": "172.18.0.2",</span><br><span class="line">            "IPPrefixLen": 16,</span><br><span class="line">            "IPv6Gateway": "",</span><br><span class="line">            "LinkLocalIPv6Address": "",</span><br><span class="line">            "LinkLocalIPv6PrefixLen": 0,</span><br><span class="line">            "MacAddress": "02:42:ac:12:00:02",</span><br><span class="line">            "Ports": &#123;</span><br><span class="line">                "8080/tcp": [</span><br><span class="line">                    &#123;</span><br><span class="line">                        "HostIp": "0.0.0.0",</span><br><span class="line">                        "HostPort": "8080"</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure><p>Bridge设定了网络名称（默认docker0），该网络为宿主机上的Docker容器提供了网络接口。宿主机IP地址是172.18.0.2，Docker默认不启用IPV6。MacAddress指定了容器内虚拟网卡的地址。Ports设定显示了TCP8080端口到宿主机上所有IP地址（0.0.0.0）以及TCP8080端口的分配。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">"State": &#123;</span><br><span class="line">    "Status": "running",</span><br><span class="line">    "Running": true,</span><br><span class="line">    "Paused": false,</span><br><span class="line">    "Restarting": false,</span><br><span class="line">    "OOMKilled": false,</span><br><span class="line">    "Dead": false,</span><br><span class="line">    "Pid": 13298,</span><br><span class="line">    "ExitCode": 0,</span><br><span class="line">    "Error": "",</span><br><span class="line">    "StartedAt": "2019-08-15T10:00:10.428661642Z",</span><br><span class="line">    "FinishedAt": "0001-01-01T00:00:00Z"</span><br><span class="line">&#125;,</span><br><span class="line"> "Mounts": [</span><br><span class="line">    &#123;</span><br><span class="line">        "Type": "bind",</span><br><span class="line">        "Source": "/var/www/html",</span><br><span class="line">        "Destination": "/var/www/html",</span><br><span class="line">        "Mode": "",</span><br><span class="line">        "RW": true,</span><br><span class="line">        "Propagation": "rprivate"</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>state属性提供了容器当前状态的信息。由于容器正在运行，所以Running为true。Mounts属性可以查看到被挂载的目录（源目录）是宿主机的/var/www/html。挂载到的目录（目的目录）是容器的/var/www/html，RW为true表示可读可写。</p><h5 id="检视单个容器的属性"><a href="#检视单个容器的属性" class="headerlink" title="检视单个容器的属性"></a>检视单个容器的属性</h5><p>可以通过docker inspect命令的–format选项指定希望查询到的具体属性。不但可以获取容器的特定信息，还可以将这些信息传递给其他命令。可以把查询结果传给ping命令。也可以用curl命令来接收查询的内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker inspect --format="&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;" centos_web</span><br><span class="line">172.18.0.2</span><br><span class="line"></span><br><span class="line">[mint@ali-mint ~]$ ping -c 4 `docker inspect --format="&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;" centos_web`</span><br><span class="line">PING 172.18.0.2 (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.078 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.076 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=3 ttl=64 time=0.073 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=4 ttl=64 time=0.077 ms</span><br><span class="line"></span><br><span class="line">--- 172.18.0.2 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 3000ms</span><br><span class="line">rtt min/avg/max/mdev = 0.073/0.076/0.078/0.002 ms</span><br><span class="line"></span><br><span class="line">[mint@ali-mint ~]$ curl -L  `docker inspect --format="&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;" centos_web`:8080</span><br><span class="line">Start Python Web Server on Centos: Successful</span><br></pre></td></tr></table></figure><h5 id="检视运行终端会话的容器"><a href="#检视运行终端会话的容器" class="headerlink" title="检视运行终端会话的容器"></a>检视运行终端会话的容器</h5><p>当启动容器是运行在shell终端会话时，可以通过另外的shell来检视该容器，只要该容器将标准输入STDIN、标准输出STDOUT、标准错误STDERR关联到这个shell。在Docker宿主机上打开两个shell会话，在第一个shell下输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run -it --name=bashtest centos /bin/bash</span><br><span class="line">[root@62a9c8da90a3 /]# ls</span><br><span class="line">anaconda-post.log  bin  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure><p>启动bashtest后，打开一个新的shell并检视第一个shell与容器标准输入、标准输出和标准错误关联配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker inspect --format='&#123;&#123;.Config.AttachStdin&#125;&#125; &#123;&#123;.Config.AttachStdout&#125;&#125; &#123;&#123;.Config.AttachStderr&#125;&#125;' bashtest </span><br><span class="line">true true true</span><br></pre></td></tr></table></figure><p>如果想查看最初启动容器的shell，或者与其交互，可以使用docker attach 命令。在第二个shell中，输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker attach bashtest</span><br></pre></td></tr></table></figure><p>此时可以发现在这两个shell下，不论其中一个输入什么，另一个都会一样的显示。</p><h5 id="检视容器的内存和CPU限制"><a href="#检视容器的内存和CPU限制" class="headerlink" title="检视容器的内存和CPU限制"></a>检视容器的内存和CPU限制</h5><p>如果Docker服务器上使用很多容器，并且多个容器之间存在交互，就存在容器之前争夺资源的问题。通过docker run可以限制某个容器可以使用的内存和交换区数量。还可以为容器设置CPU优先级并限制CPU的使用。</p><p>默认运行容器并不会对限制这些资源。添加以下选项重新运行centos_web</p><ul><li>–cpuset-cpus=0：设置系统的第一个CPU执行来自容器的命令</li><li>–cpu-shares=256：设置容器能得到的CPU时钟周期的比例为25%</li><li>–memory=512M：限制容器能够使用的内存数量为512M</li><li>–memory-swap=2G：限制容器使用的交换分区大小为2G</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run -d -p 8080:8080 --name=centos_web  --cpuset-cpus=0 --cpu-shares=256 --memory=512M --memory-swap=2G --restart="on-failure:5" -w /var/www/html -v /var/www/html:/var/www/html centos python -m SimpleHTTPServer 8080</span><br></pre></td></tr></table></figure><p>可以逐个检视以上配置是否生效。以下输出可以看出容器被设置使用Docker服务器的第一个CPU（0）。容器的CpuShares设置为512，默认1024。内存限制为512M。交换分区2G。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker inspect --format='&#123;&#123;.HostConfig.CpusetCpus&#125;&#125;' centos_web</span><br><span class="line">0</span><br><span class="line">[mint@ali-mint ~]$ docker inspect --format='&#123;&#123;.HostConfig.CpuShares&#125;&#125;' centos_web       </span><br><span class="line">256</span><br><span class="line">[mint@ali-mint ~]$ docker inspect --format='&#123;&#123;.HostConfig.Memory&#125;&#125;' centos_web         </span><br><span class="line">536870912</span><br><span class="line">(base) [mint@ali-mint ~]$ docker inspect --format='&#123;&#123;.HostConfig.MemorySwap&#125;&#125;' centos_web</span><br><span class="line">2147483648</span><br></pre></td></tr></table></figure><h4 id="寻找探查容器的其他方法"><a href="#寻找探查容器的其他方法" class="headerlink" title="寻找探查容器的其他方法"></a>寻找探查容器的其他方法</h4><h5 id="使用docker-top查看进程"><a href="#使用docker-top查看进程" class="headerlink" title="使用docker top查看进程"></a>使用docker top查看进程</h5><p>一个容器通常只运行一个进程，然而使用docker exec可以在容器中运行其他进程。使用docker top可以查看容器中正在运行的所有进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker top centos_web</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                16548               16532               0                   23:04               ?                   00:00:00            python -m SimpleHTTPServer 8080</span><br><span class="line">root                16659               16532               0                   23:05               ?                   00:00:00            /bin/bash</span><br><span class="line">root                16698               16659               34                  23:05               ?                   00:00:02            /usr/bin/python /usr/bin/yum -y install vim</span><br></pre></td></tr></table></figure><h5 id="使用docker-attach与容器内服务进行交互"><a href="#使用docker-attach与容器内服务进行交互" class="headerlink" title="使用docker attach与容器内服务进行交互"></a>使用docker attach与容器内服务进行交互</h5><p>使用docker attach可以关联到任何正在运行的容器。之前创建的centos_web，连接进去，观察Web服务器对接收的请求的响应。访问宿主机8080端口或者centos_web的8080端口，在访问一个不存在的页面。可看到如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker attach centos_web</span><br><span class="line">117.136.72.69 - - [15/Aug/2019 15:10:24] "GET / HTTP/1.1" 200 -</span><br><span class="line">117.136.72.69 - - [15/Aug/2019 15:10:25] "GET / HTTP/1.1" 200 -</span><br><span class="line">117.136.72.69 - - [15/Aug/2019 15:10:30] code 404, message File not found</span><br><span class="line">117.136.72.69 - - [15/Aug/2019 15:10:30] "GET /test HTTP/1.1" 404 -</span><br></pre></td></tr></table></figure><h5 id="使用docker-exec在正在运行的容器中启动新进程"><a href="#使用docker-exec在正在运行的容器中启动新进程" class="headerlink" title="使用docker exec在正在运行的容器中启动新进程"></a>使用docker exec在正在运行的容器中启动新进程</h5><p>使用docker exec在容器中执行yum 安装net-tools包，并查看容器默认网关172.18.0.1（宿主机docker0网口IP地址）、监听的端口等信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker exec -it centos_web yum -y install net-tools </span><br><span class="line">  Installing : net-tools-2.0-0.24.20131004git.el7.x86                1/1 </span><br><span class="line">  Verifying  : net-tools-2.0-0.24.20131004git.el7.x86_64             1/1 </span><br><span class="line">Installed:</span><br><span class="line">  net-tools.x86_64 0:2.0-0.24.20131004git.el7                                                                     </span><br><span class="line">Complete!</span><br><span class="line">[mint@ali-mint ~]$ docker exec -it centos_web route -n</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         172.18.0.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class="line">172.18.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br><span class="line">[mint@ali-mint ~]$ docker exec -it centos_web netstat -tnlp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      1/python</span><br></pre></td></tr></table></figure><h5 id="使用docker-logs查看容器进程的输出"><a href="#使用docker-logs查看容器进程的输出" class="headerlink" title="使用docker logs查看容器进程的输出"></a>使用docker logs查看容器进程的输出</h5><p>不但可以使用exec、attach查看实时处理的输出，之后还可以通过docker logs查看进程处理和输出。无论运行中的容器还是已经停止的，只要是未删除的，都可以使用docker logs把容器处理的所有输出打印到屏幕上，然后退出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker logs centos_web</span><br><span class="line">117.136.72.69 - - [15/Aug/2019 15:10:24] "GET / HTTP/1.1" 200 -</span><br><span class="line">117.136.72.69 - - [15/Aug/2019 15:10:25] "GET / HTTP/1.1" 200 -</span><br><span class="line">117.136.72.69 - - [15/Aug/2019 15:10:30] code 404, message File not found</span><br><span class="line">117.136.72.69 - - [15/Aug/2019 15:10:30] "GET /test HTTP/1.1" 404 -</span><br></pre></td></tr></table></figure><p>输出和docker attach一致，但是docker lgos centos输出完毕后会立即退出，而docker attachb持续等待响应</p><h5 id="使用docker-diff查看容器的变化"><a href="#使用docker-diff查看容器的变化" class="headerlink" title="使用docker diff查看容器的变化"></a>使用docker diff查看容器的变化</h5><p>docker diff会记录容器运行后容器内文件和目录发生的所有变化。可以查看容器相对与最初运行的镜像有哪些改变。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker diff centos_web</span><br><span class="line">A /var/www</span><br><span class="line">A /var/www/html</span><br><span class="line">C /root</span><br><span class="line">C /tmp</span><br><span class="line">D /root/anaconda-ks.cfg</span><br><span class="line">A /tmp/anaconda-ks.cfg</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>输出显示新增了/var/www和/var/www/html目录（宿主机挂载上来的），我将/root/下的anaconda-ks.cfg移至/tmp/，导致/root/和/tmp/发生改变。还显示/root/anaconda-ks.cfg被删除，/tmp/anaconda-ks.cfg被增加。所以在提交镜像为永久镜像时，使用docker diff检查一下容器变化是极好的。</p><h5 id="使用docker-cp从容器复制文件"><a href="#使用docker-cp从容器复制文件" class="headerlink" title="使用docker  cp从容器复制文件"></a>使用docker  cp从容器复制文件</h5><p>有时需要拷贝容器中的文件，但又不想终止容器运行内正在进行的工作。此时就可以通过docker cp复制容器中的内容到宿主机啦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker cp centos_web:/var/www/html/index.html /tmp/</span><br><span class="line">[mint@ali-mint ~]$ cat /tmp/index.html </span><br><span class="line">Start Python Web Server on Centos: Successful</span><br></pre></td></tr></table></figure><h3 id="容器的启动、停止和重启"><a href="#容器的启动、停止和重启" class="headerlink" title="容器的启动、停止和重启"></a>容器的启动、停止和重启</h3><h4 id="停止和启动容器"><a href="#停止和启动容器" class="headerlink" title="停止和启动容器"></a>停止和启动容器</h4><p>容器运行时，有几种不同的方式将容器暴露给宿主机系统。容器的端口可以暴露在宿主机上，容器内运行的命令可以将标准输入、标准输出和标准错误暴露给宿主机的shell会话。一旦容器停止，它就会释放资源并以某种能够重新启动的状态留存在宿主机系统中。</p><h5 id="启动和停止分离式容器"><a href="#启动和停止分离式容器" class="headerlink" title="启动和停止分离式容器"></a>启动和停止分离式容器</h5><p>之前制作的testrun镜像，由基础镜像并安装httpd组成。通过以下命令。我使用分离选项来启动httpd，并使容器的/var/www/目录挂载到宿主机的/var/www目录，将80端口和443端口暴露给宿主机。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]# docker run -d -p 80:80 -p 443:443 --name=WebServer -v /var/www/:/var/www/ testrun /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">9f8c5cd38768d8ff4d233eab9a2e938d2fccfc2294d8cf75b1a118b4c07b4c17</span><br><span class="line">[root@ali-mint tmp]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                      NAMES</span><br><span class="line">9f8c5cd38768        testrun             "/usr/sbin/httpd -DF…"   3 seconds ago       Up 1 second         0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp   WebServer    </span><br><span class="line">[mint@ali-mint ~]# netstat -tnlp|grep -E ":80|:443"</span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      17692/docker-proxy   </span><br><span class="line">tcp6       0      0 :::443                  :::*                    LISTEN      17681/docker-proxy  </span><br><span class="line">[mint@ali-mint ~]# curl http://localhost</span><br><span class="line">Start Python Web Server on Centos: Successful</span><br></pre></td></tr></table></figure><p>docke ps查看到WebServer容器正在运行。运行netstat -tnlp显示docker-proxy进程正在监听80和443端口。用curl访问显示正常的文件内容。当然停止容器只需要使用docker stop 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]# docker stop WebServer </span><br><span class="line">WebServer</span><br><span class="line">[mint@ali-mint ~]$ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS                    NAMES</span><br><span class="line">9f8c5cd38768        testrun             "/usr/sbin/httpd -DF…"   6 minutes ago       Exited (0) 32 seconds ago                            WebServer</span><br><span class="line">[mint@ali-mint ~]$ curl http://localhost</span><br><span class="line">curl: (7) Failed to connect to localhost port 80: Connection refused</span><br></pre></td></tr></table></figure><p>运行docker stop后，docker ps就查不到了，但仍会出现在docker ps -a中。/usr/sbin/httpd -DFOREGROUND不再运行，而容器内容也保存在本地环境。想要启动这个容器也很简单，使用docker start即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker start WebServer</span><br><span class="line">WebServer</span><br><span class="line">[root@ali-mint tmp]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                      NAMES</span><br><span class="line">9f8c5cd38768        testrun             "/usr/sbin/httpd -DF…"   3 seconds ago       Up 1 second         0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp   WebServer    </span><br><span class="line">[mint@ali-mint ~]# netstat -tnlp|grep -E ":80|:443"</span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      17692/docker-proxy   </span><br><span class="line">tcp6       0      0 :::443                  :::*                    LISTEN      17681/docker-proxy  </span><br><span class="line">[mint@ali-mint ~]# curl http://localhost</span><br><span class="line">Start Python Web Server on Centos: Successful</span><br></pre></td></tr></table></figure><h5 id="启动和停止交互式容器"><a href="#启动和停止交互式容器" class="headerlink" title="启动和停止交互式容器"></a>启动和停止交互式容器</h5><p>如果容器运行的进程是交互式的，并且标准输入、标准输出和标准错误关联到宿主机的shell会话。在另一个shell上执行docker stop命令时。会话就关闭了，对打开会话的人来看就很不好</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run -it --name=bashubuntu ubuntu /bin/bash</span><br><span class="line">root@ec114d94181e:/# pwd</span><br><span class="line">/</span><br><span class="line">[root@ali-mint ~]$ docker stop bashubuntu</span><br><span class="line">bashubuntu</span><br></pre></td></tr></table></figure><p>此时发现mint用户的shell自动退出了。因为root执行了docker stop。为了使容器以交互式方式工作。添加了以下选项</p><ul><li>-a：连接选项。将终端会话连接到容器运行的bash shell的标准输出和标准错误上，这个选项可以看到bash shell的输出</li><li>-i：交互选项。将终端会话连接到容器运行bash shell的标准输入上，该选项可以输入命令到shell中。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker start -ai !$</span><br><span class="line">docker start -ai bashubuntu</span><br><span class="line">root@ec114d94181e:/#</span><br></pre></td></tr></table></figure><h4 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h4><p>可以使用docker restart直接重启容器。docker restart可以携带-t参数实现强制kill容器主进程。停止WebServer容器并重启。如果停止失败则30s之后kill该容器主进程来杀死容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker restart -t 30 WebServer</span><br><span class="line">WebServer</span><br><span class="line">[mint@ali-mint ~]$ docker ps </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                      NAMES</span><br><span class="line">9f8c5cd38768        testrun             "/usr/sbin/httpd -DF…"   23 hours ago        Up About a minute   0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp   WebServer</span><br></pre></td></tr></table></figure><h4 id="向容器发送信号"><a href="#向容器发送信号" class="headerlink" title="向容器发送信号"></a>向容器发送信号</h4><p>docker kill命令可以实现向容器内运行的主进程发送kill信号。这会立即杀死容器（包括容器内的子进程）。但是使用该命令可能会造成容器无法启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker kill WebServer</span><br><span class="line">WebServer</span><br><span class="line">(base) [mint@ali-mint ~]$ docker start WebServer</span><br><span class="line">WebServer</span><br><span class="line">(base) [mint@ali-mint ~]$ docker ps </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">[mint@ali-mint ~]$ docker logs WebServer</span><br><span class="line">httpd (pid 1) already running</span><br></pre></td></tr></table></figure><p>杀死容器没有正常关闭，造成httpd进程虽然停止，但是没有清理进程PID文件。可以通过一下方法处理。</p><ul><li>移除该容器。并使用docker run重新启动新的容器</li><li>保存并修复。可以将容器打包成镜像导出为tar文件，解压tar包，修复问题（删除/run/httpd/httpd.pid文件）在打为tar包，重新导入系统</li><li>从脚本启动。而不是直接从容器运行服务。在启动服务前，该脚本能够为运行服务进行清理（能删除删除/run/httpd/httpd.pid文件）</li></ul><p>所以，一般情况不要简单的杀死容器。因为容器退出后，没有进行清理的话，容器会无法使用。当然，docker kill有其他用法。可以向容器发送其他信号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker kill -s SIGHUP centos_web</span><br><span class="line">[mint@ali-mint ~]$ docker kill -s SIGINT centos_web</span><br></pre></td></tr></table></figure><p>某些服务可以通过SIGHUP信号，重新加载配置文件，可以不关闭服务更新配置。而SIGINT信号向进程发出一个键盘中断（类如同按下Ctrl+C）。</p><h4 id="暂停容器与取消暂停"><a href="#暂停容器与取消暂停" class="headerlink" title="暂停容器与取消暂停"></a>暂停容器与取消暂停</h4><p>使用docker pause命令可以暂停容器内运行的所有进程。也可通过docker unpause取消暂停。本质是使用cgroups的冻结（freeze）特性来暂停和恢复容器进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker pause centos_web</span><br><span class="line">centos_web</span><br><span class="line">[mint@ali-mint ~]$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                  PORTS                    NAMES</span><br><span class="line">a161a77c9763        centos              "python -m SimpleHTT…"   7 minutes ago       Up 5 minutes (Paused)   0.0.0.0:8080-&gt;8080/tcp   centos_web</span><br><span class="line">[mint@ali-mint ~]$ curl localhost:8080</span><br><span class="line">[mint@ali-mint ~]$ docker unpause centos_web</span><br><span class="line">centos_web</span><br><span class="line">[mint@ali-mint ~]$ curl localhost:8080      </span><br><span class="line">Start Python Web Server on Centos: Successful</span><br></pre></td></tr></table></figure><p>使用docker ps命令可以看到容器已经被暂停（pause）了，所以centos_web不再对外响应请求。在取消暂停后，再次响应请求。</p><h4 id="等待容器的退出代码"><a href="#等待容器的退出代码" class="headerlink" title="等待容器的退出代码"></a>等待容器的退出代码</h4><p>使用docker wait可以确定一个运行的容器，之后等待它退出。当容器退出后，docker wait会自动退出，并打印最初容器的退出代码。要使用它，需要先启动docker wait，确定需要查看退出代码的运行容器。接着，再打开一个shell并停止centos_web。会到docker wait上就显示了退出容器的退出代码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker wait centos_web</span><br><span class="line"> </span><br><span class="line">[root@ali-mint ~]$ docker stop centos_web</span><br><span class="line">centos_web</span><br><span class="line"></span><br><span class="line">[mint@ali-mint ~]$ docker wait centos_web</span><br><span class="line">137</span><br></pre></td></tr></table></figure><h4 id="重命名容器"><a href="#重命名容器" class="headerlink" title="重命名容器"></a>重命名容器</h4><p>如果不喜欢容器名字。不论正在运行的还是已停止的。都可以使用docker rename命令。并给出需要重命名的容器旧名称已经新名称。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker ps </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">a161a77c9763        centos              "python -m SimpleHTT…"   25 minutes ago      Up 4 minutes        0.0.0.0:8080-&gt;8080/tcp   centos_web</span><br><span class="line">[mint@ali-mint ~]$ docker rename centos_web centos-web</span><br><span class="line">[mint@ali-mint ~]$ docker ps </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">a161a77c9763        centos              "python -m SimpleHTT…"   25 minutes ago      Up 5 minutes        0.0.0.0:8080-&gt;8080/tcp   centos-web</span><br></pre></td></tr></table></figure><p>对比两个docker ps可以发现容器名字centos_web已经变成了centos-web</p><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><p>通常使用docker run创建一个运行的容器，通过docker run –rm创建一个运行退出不保存的容器。还可以通过docker create命令创建一个容器而不立即运行。</p><p> 使用docker create需要先确定使用的镜像以及要运行的命令。当运行docker create时，将直接保存结果容器，而不是在容器中运行命令。docker create使用与docker run基本一致，但是有例外。如：docker create不能使用–rm，因为docker create执行结果就是容器，主要是保存和待运行容器，如果删除了就事与愿违了。也不需要使用–datach=true (-d)选项。之后启动容器就是以分离模式运行的。如果需要以交互式运行，需要添加-a 和 -i选项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker create --name=mybog -it cricket/hangman boggle</span><br><span class="line">f756b6d57097ec88c0d20a5727cb61f23e29d331f1df6ef6b0fd40a27df747fc</span><br><span class="line">[mint@ali-mint ~]$ docker ps -a </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">f756b6d57097        cricket/hangman     "boggle"                 5 seconds ago       Created                                      mybog</span><br><span class="line">[mint@ali-mint ~]$ docker start -ai mybog</span><br><span class="line">+---+---+---+---+   Type '?' for help</span><br><span class="line">| D | C | A | X |</span><br><span class="line">+---+---+---+---+   2:58</span><br><span class="line">| B | B | Y | G |</span><br><span class="line">+---+---+---+---+</span><br><span class="line">| N | U | T | L |</span><br><span class="line">+---+---+---+---+</span><br><span class="line">| A | W | P | D |</span><br><span class="line">+---+---+---+---+</span><br></pre></td></tr></table></figure><p>创建一个容器来运行Boggle游戏，并取名为mybog，并使用-it选项指定容器通过伪终端以交互式运行，之后，使用-ai选项连接入标准输入以交互式启动这个容器。</p><h3 id="配置容器的存储"><a href="#配置容器的存储" class="headerlink" title="配置容器的存储"></a>配置容器的存储</h3><p>Docker容器镜像是要包含可以重复使用的应用程序。通常会挂载容器外的存储来保存容器数据。使用Docker时，需要注意：</p><ul><li><strong>管理容器的存储和卷：</strong>为宿主机增加存储空间并不会自动让容器获得更多的存储。然而有很多方D式可以在容器内使用宿主机的存储，挂载到某个容器的存储也可让其他容器使用。</li><li><strong>管理宿主机上docker的存储：</strong>Docker自身会使用宿主机的一个存储区域来管理该宿主机的Docker镜像和容器，以及这些镜像和容器的元数据。</li></ul><h4 id="管理宿主机的存储"><a href="#管理宿主机的存储" class="headerlink" title="管理宿主机的存储"></a>管理宿主机的存储</h4><p>Docker镜像应尽量保持小巧（仅包含所选Linux发行版需要的软件包以及容器内运行的应用程序）。太大不利于下载，即使在本地docker registry中亦是如此。</p><p>可以通过挂载外部卷实现数据改变时无需提交镜像变更。再应用程序中采用这种方法，容器镜像不会发生改变。所有状态都会持久化到容外部的存储中。</p><h5 id="使用宿主机的卷"><a href="#使用宿主机的卷" class="headerlink" title="使用宿主机的卷"></a>使用宿主机的卷</h5><p>要在运行时将一个卷挂载到容器中，需要为docker run命令使用-v选项。传递-v选项的参数包括：要共享的宿主机目录。紧接着是冒号（:），以及 在容器内的挂载点。示例如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run -d -p 8080:8080 --name=centos_web -v /tmp/html:/var/www/html centos /usr/sbin/httpd -DFOREGROUND</span><br></pre></td></tr></table></figure><p>可以发现，将卷挂载到容器中可能会把宿主机暴露在危险中。应该控制宿主机被挂载的目录权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name=centos_web -v /etc:/var/www/html centos /usr/sbin/httpd -DFOREGROUND</span><br></pre></td></tr></table></figure><h5 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h5><p>使用Docker容器的优势之一是一个容器可以查看和使用其他容器中的卷。这种通常被称为数据卷的东西容许将元容器的卷共享给一个或多个容器。可以实现多个容器之间共享持久化存储并为挂载提供一个抽象层。</p><p>当挂载一个卷到容器中时，默认挂载的容器具有读写权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run -v /tmp/vol:/data --name=datavol -it centos bash</span><br><span class="line">[root@c0702aa7b762 /]#</span><br></pre></td></tr></table></figure><p>在运行一个shell,运行新容器并使用–volumes-from=选项指定第一个容器名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run --volumes-from=datavol -d centos touch  /data/mydata</span><br><span class="line">f631015ad203f339ab3e57aa00a0caeec67510485663d23bcfd4fdaa95c5a935</span><br></pre></td></tr></table></figure><p>在datavol容器的shell中可以看到已经创建了mydata的新文件，检查宿主机的/tmp/vol/目录，也有新文件mydata</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@c0702aa7b762 /]# ll /data/</span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 root root 0 Aug 16 16:39 mydata</span><br><span class="line">[mint@ali-mint ~]$ ll /tmp/vol/</span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 root root 0 Aug 17 00:39 mydata</span><br></pre></td></tr></table></figure><h5 id="对挂载写保护"><a href="#对挂载写保护" class="headerlink" title="对挂载写保护"></a>对挂载写保护</h5><p>如果需要访问该卷内容，又不让其他容器在该卷写入内容，可以为挂载点添加:ro选项，设置容器为只读挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ mkdir /tmp/vol1</span><br><span class="line">[mint@ali-mint ~]$ docker run -v /tmp/vol:/data -v /tmp/vol1/:/data1:ro --name=datavol -it centos bash  </span><br><span class="line">[root@c715ed9a7151 /]# exit</span><br><span class="line">exit</span><br><span class="line">[mint@ali-mint ~]$ docker run --volumes-from=datavol -d centos touch /data1/mydata1 </span><br><span class="line">1b094e337a09e7c2d9b3fedd4841bd93eb470f9c18e295d86af48d995b4847c7</span><br><span class="line">[mint@ali-mint ~]$ ll /tmp/vol1/</span><br><span class="line">total 0</span><br><span class="line">[mint@ali-mint ~]$</span><br></pre></td></tr></table></figure><h5 id="挂载设备"><a href="#挂载设备" class="headerlink" title="挂载设备"></a>挂载设备</h5><p>挂载设备是很重要的。Docker服务上运行多个Docker容器，如果能关联一个容器来检查日志文件以确认是否有错误发生，那会非常高效。可以通过挂载系统日志设备（/dev/log）使容器日志在宿主机可见</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run -v /dev/log:/dev/log -it centos logger "SYSLOG-TEST This is a test"</span><br><span class="line">[mint@ali-mint ~]$ sudo journalctl -b | grep SYS</span><br><span class="line">Aug 17 01:21:14 ali-mint root[24660]: SYSLOG-TEST This is a test</span><br></pre></td></tr></table></figure><p>以上示例通过logger发送消息给systemd journal（通过/dev/log设备）发送日志消息后退出。在宿主机上执行sudo journalctl -b | grep SYS会显示logger命令发送的信息</p><h5 id="挂载套接字"><a href="#挂载套接字" class="headerlink" title="挂载套接字"></a>挂载套接字</h5><p>访问Docker守护进程套接字的具体例子是在容器内运行持续集成（CI）的docker构建代理。挂载目录中出现Dockerfile文件会触发构建一个Docker镜像。Dockerfile出现所触发的CI工具将在相同的宿主机上运行另一个Docker容器。来构建Docker镜像。但该Docker容器并未运行在CI Docker容器中。因此，挂载/var/run/docker.sock使容器内的客户端能够在宿主机上运行docker build和docker run命令。尽管是从容器中发起调用的。这就避免了在Docker内运行Docker。</p><p>以下实例演示了Docker的几个特性和想法。</p><ul><li>挂载套接字</li><li>使用特权容器</li><li>一个有趣的例子</li></ul><p>使用任意编辑器创建简单的Dockerfile。下面是Dockerfile内容</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> Mr.Chen &lt;dooktmint@gmail.com&gt;</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y update;yum -y install systemd-libs docker;yum clean all</span></span><br></pre></td></tr></table></figure><p>在Dockerfile文件所在目录下执行一下语句构建Docker镜像myrepo/docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker build -t myrepo/docker .</span><br><span class="line">[mint@ali-mint ~]$ docker images</span><br><span class="line">[mint@ali-mint ~]$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">myrepo/docker       latest              ba917ea714dd        32 seconds ago      451MB</span><br><span class="line">testrun             latest              b38aa8047513        3 days ago          356MB</span><br><span class="line">fedora              latest              ef49352c9c21        2 weeks ago         246MB</span><br><span class="line">ubuntu              latest              3556258649b2        3 weeks ago         64.2MB</span><br><span class="line">centos              latest              9f38484d220f        5 months ago        202MB</span><br><span class="line">cricket/hangman     latest              eeceedfc4a87        4 years ago         427MB</span><br></pre></td></tr></table></figure><p>此时运行myrepo/docker镜像，找到宿主机Docker进程的sock套接字文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run -v /var/run/docker.sock:/var/run/docker.sock -it myrepo/docker bash</span><br><span class="line">[root@b61be9c2f322 /]# docker images </span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE</span><br><span class="line">myrepo/docker       latest              ba917ea714dd        About a minute ago   451 MB</span><br><span class="line">testrun             latest              b38aa8047513        3 days ago           356 MB</span><br><span class="line">fedora              latest              ef49352c9c21        2 weeks ago          246 MB</span><br><span class="line">ubuntu              latest              3556258649b2        3 weeks ago          64.2 MB</span><br><span class="line">centos              latest              9f38484d220f        5 months ago         202 MB</span><br></pre></td></tr></table></figure><p>如果此时在容器中执行docker images失败，permission denied。则是因为Selinux权限的缘故。想从容器内访问宿主机的套接字。必须打开权限选项。要将特权模式设置为true，–privileged=true。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run --privileged=true -v /var/run/docker.sock:/var/run/docker.sock -it myrepo/docker bash</span><br></pre></td></tr></table></figure><h5 id="Docker宿主机的存储策略"><a href="#Docker宿主机的存储策略" class="headerlink" title="Docker宿主机的存储策略"></a>Docker宿主机的存储策略</h5><p>Docker镜像并不只是只有一个镜像，它是由多个镜像层构成。可以使用docker history来查看构成该镜像的镜像层。新的镜层可以通过安装软件来添加，通过为镜像添加新目录或者文件来添加，或者通过运行改变底层的命令来添加。使用docker pull 拉取镜像和docke build使用ADD、RUN、或EXPOSE这些Dockerfile命令时可以看到层。Docker镜像是分层的，最上层是可写层。</p><h5 id="附加外部存储到Docker宿主机"><a href="#附加外部存储到Docker宿主机" class="headerlink" title="附加外部存储到Docker宿主机"></a>附加外部存储到Docker宿主机</h5><p>在宿主机上，Docker使用/var/lib/docker卷来保存所有的Docker镜像和容器。宿主机的docker registry也包含在这里。SA需要精确预测，防止空间耗尽。</p><p>所以要确保镜像尽可能小，如果镜像太大以至于/var/lib/docker空间被占满。建议提供外部卷，并将该卷挂载到docker宿主机的/var/lib/docker目录。</p><p>在debian系宿主机上，可以修改/etc/default/docker文件（添加DOCKER_OPTS=”-g /path/to/dir”）。但是RHEL系宿主机不能用次方法吗，因为使用了systemd。</p><h5 id="使用逻辑卷管理器扩展存储"><a href="#使用逻辑卷管理器扩展存储" class="headerlink" title="使用逻辑卷管理器扩展存储"></a>使用逻辑卷管理器扩展存储</h5><p>以一个centos虚拟机的centos宿主机开始，按照以下指令在宿主机上创建一个LVM卷，将其关联到centos虚拟机，并将其挂载到/var/lib/docker目录。如果/var/lib/docker目录下有东西，请注意备份。</p><ul><li>创建LVM分区，在centos宿主机上有一个/dev/sdb的新磁盘。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@ali-mint ~]# fdisk /dev/sdb</span><br><span class="line">n</span><br><span class="line">p</span><br><span class="line">t</span><br><span class="line">8e</span><br><span class="line">w</span><br><span class="line">[root@ali-mint ~]# fdisk -l /dev/sdb1 </span><br><span class="line">Disk /dev/sdb1: 21.5 GB, 21473787904 bytes, 41940992 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">[root@ali-mint ~]# pvcreate /dev/sdb1 </span><br><span class="line">  Physical volume "/dev/sdb1" successfully created.</span><br><span class="line">[root@ali-mint ~]# vgcreate docker_vg /dev/sdb1 </span><br><span class="line">  Volume group "docker_vg" successfully created</span><br><span class="line">[root@ali-mint ~]# lvcreate -l 100%FREE -n mydocker docker_vg</span><br><span class="line">WARNING:yxfs signature detected on /dev/docker_vg/mydocker at offset 0. Wipe it? [y/n]: </span><br><span class="line">  Wiping xfs signature on /dev/docker_vg/mydocker.</span><br><span class="line">  Logical volume "mydocker" created.</span><br></pre></td></tr></table></figure><ul><li>创建文件系统，设置文件系统为xfs</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@ali-mint ~]# mkfs.xfs /dev/docker_vg/mydocker </span><br><span class="line">meta-data=/dev/docker_vg/mydocker isize=256    agcount=4, agsize=1310464 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=0        finobt=0</span><br><span class="line">data     =                       bsize=4096   blocks=5241856, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=0</span><br><span class="line">log      =internal log           bsize=4096   blocks=2560, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure><ul><li>停止docker服务并备份/var/lib/docker</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@ali-mint ~]# systemctl stop docker</span><br><span class="line">[root@ali-mint ~]# cp -rv /var/lib/docker/ /tmp/docker</span><br></pre></td></tr></table></figure><ul><li>挂载LVM,使用UUID挂载开机挂载,写入/etc/fstab文件，然后使用mount挂载，重启docker</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@ali-mint ~]# blkid /dev/docker_vg/mydocker </span><br><span class="line">/dev/docker_vg/mydocker: UUID="563b92b7-6e94-415f-af14-5d33759e75a6" TYPE="xfs" </span><br><span class="line">[root@ali-mint ~]# cat /etc/fstab</span><br><span class="line">...</span><br><span class="line">UUID=563b92b7-6e94-415f-af14-5d33759e75a6 /var/lib/docker      xfs     defaults        0 0</span><br><span class="line">[root@ali-mint ~]# mount -a</span><br><span class="line">[root@ali-mint ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="配置容器网络"><a href="#配置容器网络" class="headerlink" title="配置容器网络"></a>配置容器网络</h3><p>Docker问使用Linux容器（LXC）提供了一种便捷的方法。LXC为每个容器提供了进隔离和资源限制。而Docker在这类隔离之上提供了额外的层，使得容器有可移植性（镜像格式）和易于使用（通过程序接口或命令行）。这个隔离也延伸至容器网络接口与宿主机系统的隔离方式上。</p><p>容器隔离会使每个容器认为自己是机器的根进程。Docker通过设置虚拟网络接口docker0并将docker0桥接到宿主机的网络上来为容器提供IP地址并访问公网。</p><p>如果容器要基于IP的服务提供给其他容器或者应用程序，则容器必须将该服务使用的端口暴露出来。如下默认的httpd服务器容器应该暴露80和443端口，如下面的Dockerfile例子所示。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> Mr.Chen &lt;dooktmint@gmail.com&gt;</span><br><span class="line"><span class="comment"># update system and install httpd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y update;yum -y install httpd;yum clean all</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span> <span class="number">443</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> /usr/sbin/httpd -DFOREGROUND</span></span><br></pre></td></tr></table></figure><p>以上Dookerfile使用EXPOSE关键字定义容器暴露的端口，但是使用EXPOSE关键字并不会立即将指定的端口暴露给宿主机系统上的其他容器或应用程序。这些实体需要访问这个端口的话还需要额外的步骤来连接或映射容器的外部端口。</p><ul><li><strong>暴露端口：</strong>连接可以让容器访问同一机器上的其他容器暴露的端口</li><li><strong>映射端口：</strong>映射提供了一种机制，可以将暴露的端口映射到宿主机的外部端口</li></ul><p>在Dockerfile文件所在目录下构建一个名为myrepo/centos-httpd的Docker镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker build -t myrepo/centos-httpd .</span><br></pre></td></tr></table></figure><h4 id="将端口暴露给其他容器"><a href="#将端口暴露给其他容器" class="headerlink" title="将端口暴露给其他容器"></a>将端口暴露给其他容器</h4><p>使用myrepo/centos-httpd镜像（在80和443端口暴露了其运行的Web服务器），将另一个容器链接到它并让第二个容器使用暴露的80端口。首先使用-d选项以分离模式运行了myrepo/centos-httpd容器并取名为link-test。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run -d --name=link-test myrepo/centos-httpd</span><br></pre></td></tr></table></figure><p>再运行第二个容器，取名为linked并链接到link-test。并设置链接名字为lt。然后就可以在第二个容器上使用lt访问link-test的80端口了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run -it --link=link-test:lt --name=linked centos bash</span><br><span class="line">[root@4d3283322200 /]#  env</span><br><span class="line">HOSTNAME=4d3283322200</span><br><span class="line">TERM=xterm</span><br><span class="line">LT_PORT_80_TCP=tcp://172.18.0.2:80</span><br><span class="line">LT_PORT_80_TCP_PORT=80</span><br><span class="line">LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.axa=01;36:*.oga=01;36:*.spx=01;36:*.xspf=01;36:</span><br><span class="line">LT_PORT_443_TCP_PORT=443</span><br><span class="line">LT_PORT_443_TCP_ADDR=172.18.0.2</span><br><span class="line">LT_PORT_80_TCP_PROTO=tcp</span><br><span class="line">LT_PORT=tcp://172.18.0.2:80</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">PWD=/</span><br><span class="line">LT_NAME=/linked/lt</span><br><span class="line">SHLVL=1</span><br><span class="line">HOME=/root</span><br><span class="line">LT_PORT_80_TCP_ADDR=172.18.0.2</span><br><span class="line">LT_PORT_443_TCP=tcp://172.18.0.2:443</span><br><span class="line">LT_PORT_443_TCP_PROTO=tcp</span><br><span class="line">_=/usr/bin/env</span><br></pre></td></tr></table></figure><p>注意有几个以LT开头的环境变量，他们来自于lt，这是docker run时分配给链接的名字。现在就可以curl测试，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@4d3283322200 /]# curl http://lt</span><br><span class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;&lt;html&gt;&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;</span><br><span class="line">                &lt;title&gt;Apache HTTP Server Test Page powered by CentOS&lt;/title&gt;</span><br><span class="line">                &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap --&gt;</span><br><span class="line">    &lt;link href="/noindex/css/bootstrap.min.css" rel="stylesheet"&gt;</span><br><span class="line">    &lt;link rel="stylesheet" href="noindex/css/open-sans.css" type="text/css" /&gt;</span><br><span class="line"></span><br><span class="line">&lt;style type="text/css"&gt;&lt;!--              </span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="将端口映射到宿主机外部"><a href="#将端口映射到宿主机外部" class="headerlink" title="将端口映射到宿主机外部"></a>将端口映射到宿主机外部</h4><p>可以通过docker run -p选项来暴露容器的端口。以便于通过宿主机的端口来访问容器。但是宿主机的客户只能访问到明确映射到该宿主机的端口。</p><h5 id="从被链路的容器映射端口"><a href="#从被链路的容器映射端口" class="headerlink" title="从被链路的容器映射端口"></a>从被链路的容器映射端口</h5><p>使用两个已链接在一起的容器来说明，这两个容器位于Docker-srv的宿主机上（172.19.5.2）。宿主机Docker-srv上有docker0的默认docker网桥。一个端口在容器内暴露（容器C1的8080端口），一个端口被映射到宿主机的端口（C2的80端口）。如下：</p><ul><li>运行容器C1。这个仅仅是一个应用程序。可以是jenkins容器。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mint@Docker-srv ~]$ docker run -d --name=C1 -w /var/www/html/ -v /var/www/html/:/var/www/html/ centos /bin/python -m SimpleHTTPServer 8080</span><br><span class="line">8ac2bacbc7a6e272c8542471fb7b5f230ac40852f974093642885ab6257f6c92</span><br></pre></td></tr></table></figure><ul><li>运行容器C2。并将C2的80端口映射到宿主机的80端口，并将容器C2链接到容器C1。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mint@Docker-srv ~]$ docker run -d --name=C2 --link=C1:C1 -p 80:80 myrepo/centos-httpd</span><br><span class="line">9129989f97ec19539703d99a1d6f940751ec44f1e2545e27f97e07dc4808eae7</span><br></pre></td></tr></table></figure><ul><li>检测从C2访问到C1的8080端口。docker0网桥让C2链接到C1，也将C2的80端口映射到宿主机Docker-srv的80端口。docker exec C2进入到C2容器内，可以访问C1的8080端口，来访问C1容器。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mint@Docker-srv ~]$ docker exec -it C2 bash</span><br><span class="line">[root@9129989f97ec /]# curl http://C1:8080</span><br><span class="line">Start Python Web Server on Centos: Successful</span><br></pre></td></tr></table></figure><ul><li>检测从Client访问Docker-srv的端口：在宿主机Client上启动一个bash shell进程P1，该进程消费C2容器的Web页面。该页面暴露在80端口并被映射到Host1的80端口，现在只需要用在H2上curl访问Host1即可。应该可以看到返回的html页面。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Client ~]# curl 172.19.5.2</span><br></pre></td></tr></table></figure><p>可以看到在Client上无法通过C2访问C1。将C2的80端口映射到宿主机上的相同端口，C2暴露的端口是可供使用的。Client的浏览器无法访问到C1的信息吗，因为没有将其映射到宿主机的8080或其他端口。由于P1不是容器并且没有与C1和C2在同一台宿主机上，因此，在Client上无法通过C2访问C1。</p><h5 id="链接不同宿主机的容器"><a href="#链接不同宿主机的容器" class="headerlink" title="链接不同宿主机的容器"></a>链接不同宿主机的容器</h5><p>可能来自多个容器的应用程需要一同工作。碰巧他们没有运行在同一台宿主机上。在不是用其他工具，只使用Docker的情况下，可以将容器端口映射到宿主机端口，如果在同一台宿主机上可以将容器链接在一起。</p><p>容器C1和C2运行在宿主机Docker-srv01上，在宿主机Docker-srv02上启动一个暴露了3306端口的MongoDB的C3容器，既没有映射到宿主机端口，也没有链接其他容器。</p><p>再启动一个链接到C3运行bash的centos镜像的C4容器，在C4容器上运行env命令，可以看到C3的链接。通过映射的80端口可以用curl展示C2暴露的html页面。无法访问C1，因为不能从不同宿主机链接到C1。</p><p>以上描述可以关注：</p><ul><li>可以连接到同一宿主机的容器</li><li>可以将暴露的容器端口映射到宿主机的端口上来连接不同宿主机上的容器</li></ul><p>假如我有多个应用程序的多个容器，他们都暴露了80端口。这些容器的大多数都部署在同一个宿主机上。我们不能将他们都映射到同一宿主机的80端口。不得不把每个容器的80端口映射到宿主机的某个端口上。然而其他宿主机上的那些要消费第一个宿主机上容器80端口的信息的容器，不行负担了解动态映射的麻烦——这些容器要提供服务就必须进行动态映射。消费者只想读取80端口。这是一个常见问题。特别是在平台即服务（Paas）的服务供应商的系统中，追求宿主机上应用程序容器密度和是效率和成本的关键。</p><p>Docker主要关注管理单个宿主机上的镜像和容器。目前Docker还没有跨主机的管理。之后可以通过k8s来进行多个宿主机上多容器应用程序的部署。K8s提供的机制能够管理容器间的宿主机和端口的动态映射问题。</p><h4 id="docker0网桥的替代方案"><a href="#docker0网桥的替代方案" class="headerlink" title="docker0网桥的替代方案"></a>docker0网桥的替代方案</h4><p>尽管docker0提供了容器的网络访问，但是这并不是必要的，以下两个案例：</p><ul><li>容器使用docker0网桥的替代方法</li><li>宿主机的Docker守护进程使用docker0的替代方法</li></ul><h5 id="改变容器的网络模式"><a href="#改变容器的网络模式" class="headerlink" title="改变容器的网络模式"></a>改变容器的网络模式</h5><p> 使用–net参数可以改变单个容器的网络模式。可以使用docker0网桥或者其他网桥或者是不提供网络访问。</p><ul><li><strong>默认网桥</strong>：指定–net=bridge会在名为docker0的Docker网桥上创建一个新的网络栈。默认就是docker0</li><li><strong>无网络</strong>：指定–net=none会通知Docker不提供网络访问来运行容器。这对某种交互式应用程序（如计算器或游戏）比较有用</li><li><strong>其他容器的网络</strong>：指定–net=mycontainer会让Docker启动容器并使该容器重用位于统一宿主机系统上名为mycontainer容器的网络栈</li><li><strong>绕过网桥</strong>：指定–net=host意味着直接从内部使用宿主机的网络栈，绕过网桥</li></ul><h5 id="细查网络选项"><a href="#细查网络选项" class="headerlink" title="细查网络选项"></a>细查网络选项</h5><p>为了检查某些–net选项，通过Dockerfile创建一个镜像，Dockerfile使用centos基础镜像并安装net-tools包。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> Mr.Chen &lt;dooktmint@gmail.com&gt;</span><br><span class="line"><span class="comment"># install httpd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools;yum clean all</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><p>使用docker build构建net-tools镜像，并使用–net-host运行，在容器内查看该容器的网络配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ ifconfig </span><br><span class="line">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.18.0.1  netmask 255.255.0.0  broadcast 172.18.255.255</span><br><span class="line">        ether 02:42:29:b8:4b:2f  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 875612  bytes 42135427 (40.1 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 970233  bytes 2170767786 (2.0 GiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.2.205  netmask 255.255.192.0  broadcast 172.17.63.255</span><br><span class="line">        ether 00:16:3e:06:c7:39  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 8333525  bytes 7511812630 (6.9 GiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 5361061  bytes 2802614138 (2.6 GiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 375320  bytes 175613453 (167.4 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 375320  bytes 175613453 (167.4 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">[mint@ali-mint ~]$ docker run -it --net=host net-tools</span><br><span class="line">[root@ali-mint /]# ifconfig</span><br><span class="line">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.18.0.1  netmask 255.255.0.0  broadcast 172.18.255.255</span><br><span class="line">        ether 02:42:29:b8:4b:2f  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 875612  bytes 42135427 (40.1 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 970233  bytes 2170767786 (2.0 GiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.2.205  netmask 255.255.192.0  broadcast 172.17.63.255</span><br><span class="line">        ether 00:16:3e:06:c7:39  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 8333178  bytes 7511771653 (6.9 GiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 5360788  bytes 2802449052 (2.6 GiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 375320  bytes 175613453 (167.4 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 375320  bytes 175613453 (167.4 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>可以发现宿主机的网络接口被展示出来了，使用–net=host可以提高性能，但是如果将其用于宿主机上所有容器时，需要小心暴露的端口发安生冲突。</p><p>这也可以很好说明容器其实就是宿主机内核之上的一个抽象层。主要是在linux内置容器上提供一个层。</p><h3 id="清理容器"><a href="#清理容器" class="headerlink" title="清理容器"></a>清理容器</h3><p>每次拉取新镜像或者运行容器，都会消耗系统的空间。如不关注，可能会吞噬掉磁盘空间导致Docker暂时无法使用。</p><h4 id="为镜像和容器准备空间"><a href="#为镜像和容器准备空间" class="headerlink" title="为镜像和容器准备空间"></a>为镜像和容器准备空间</h4><p>Docker将数据保存在/var/lib/docker目录结构中。如果Docker命令开始因为磁盘耗尽而失败，就需要确保有足够的磁盘空间来处理需求。使用df -h来查看容量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@ali-mint ~]# df -h /var/lib/docker</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1        40G   19G   19G  51% /</span><br></pre></td></tr></table></figure><p>现在宿主机系统还有一部分空间可以使用，如果可用容量过低，可以使用LVM进行容量扩充。</p><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><p>镜像被拉取后，会一直存在宿主机系统上直至被删除。对于不再使用的镜像，系统并不会自动清理。所以需要时不时的清理不再需要的镜像。可以使用docker rmi来删除镜像</p><h5 id="删除单个镜像"><a href="#删除单个镜像" class="headerlink" title="删除单个镜像"></a>删除单个镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]# docker rmi ubuntu:16.04</span><br><span class="line">[mint@ali-mint ~]# docker rmi nginx</span><br><span class="line">[mint@ali-mint ~]# docker rmi centos</span><br><span class="line">[mint@ali-mint ~]# docker rmi testrun</span><br><span class="line">[mint@ali-mint ~]# docker rmi centos:6.8</span><br></pre></td></tr></table></figure><h5 id="删除多个镜像"><a href="#删除多个镜像" class="headerlink" title="删除多个镜像"></a>删除多个镜像</h5><p>可以使用docker images -q选项只列出镜像ID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker images -q</span><br><span class="line">758f925afc8d</span><br><span class="line">67150e21cef6</span><br><span class="line">ba917ea714dd</span><br><span class="line">b38aa8047513</span><br><span class="line">ef49352c9c21</span><br><span class="line">[mint@ali-mint ~]$ docker rmi `docker images -q`</span><br></pre></td></tr></table></figure><h5 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h5><p>每次运行容器，除非指定（docker run –rm）,否则运行结束之后，容器都保留在宿主机上。所以也需要清理不再使用的容器。可以使用docker rm命令来删除不再需要的容器。但是，默认不能删除正在运行的容器，如要强制删除正在运行的容器，需要添加-f选项（docker rm -f）。</p><h5 id="删除单个容器"><a href="#删除单个容器" class="headerlink" title="删除单个容器"></a>删除单个容器</h5><p>删除但个容器只需找到容器ID，调用docker rm命令即可</p><p>删除正在运行的容器或暂停中的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker ps </span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                   PORTS                    NAMES</span><br><span class="line">3359cb03c2ea        myrepo/centos-httpd   "/bin/sh -c '/usr/sb…"   26 seconds ago      Up 25 seconds            80/tcp, 443/tcp          cocky_hopper</span><br><span class="line">89e615b2b4f9        centos                "python -m SimpleHTT…"   54 seconds ago      Up 54 seconds (Paused)   0.0.0.0:8080-&gt;8080/tcp   centos-web</span><br></pre></td></tr></table></figure><p>注意直接删除以上容器都会失败，不论是正在运行还是暂停中的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker rm 3359cb03c2ea 89e615b2b4f9 </span><br><span class="line">Error response from daemon: You cannot remove a running container 3359cb03c2ead9b0f8205bbb976b89419fc43815dff7e1b058a51d4902d41e80. Stop the container before attempting removal or force remove</span><br><span class="line">Error response from daemon: You cannot remove a paused container 89e615b2b4f96da133c47ff925d11cfbf84939cd5a05559c07d2e024eabd052e. Unpause and then stop the container before attempting removal or force remove</span><br></pre></td></tr></table></figure><p>如果需要强制删除，则需要添加-f选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker rm -f 3359cb03c2ea 89e615b2b4f9 </span><br><span class="line">3359cb03c2ea</span><br><span class="line">89e615b2b4f9</span><br><span class="line">[mint@ali-mint ~]$ docker ps </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br></pre></td></tr></table></figure><h5 id="删除已停止的容器"><a href="#删除已停止的容器" class="headerlink" title="删除已停止的容器"></a>删除已停止的容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                       PORTS               NAMES</span><br><span class="line">ed25a1946223        myrepo/centos-httpd   "/bin/sh -c '/usr/sb…"   26 seconds ago      Exited (0) 15 seconds ago                        relaxed_kilby</span><br><span class="line">4265b7318c53        centos                "python -m SimpleHTT…"   30 seconds ago      Exited (137) 5 seconds ago                       centos-web</span><br><span class="line">[mint@ali-mint ~]$ docker stop ed25a1946223 4265b7318c53  </span><br><span class="line">ed25a1946223</span><br><span class="line">4265b7318c53</span><br></pre></td></tr></table></figure><h5 id="删除多个容器"><a href="#删除多个容器" class="headerlink" title="删除多个容器"></a>删除多个容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker ps -a </span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">4d0eae7f054e        myrepo/centos-httpd   "/bin/sh -c '/usr/sb…"   3 seconds ago       Up 2 seconds        80/tcp, 443/tcp          adoring_burnell</span><br><span class="line">22d519e7cfa2        centos                "python -m SimpleHTT…"   6 seconds ago       Up 5 seconds        0.0.0.0:8080-&gt;8080/tcp   centos-web</span><br><span class="line">[mint@ali-mint ~]$ docker rm `docker ps -q`   </span><br><span class="line">Error response from daemon: You cannot remove a running container 4d0eae7f054e3190c89d36301050718befe1694466367e0704fcd53566eb3a9a. Stop the container before attempting removal or force remove</span><br><span class="line">Error response from daemon: You cannot remove a running container 22d519e7cfa2a4275ad890345ea5963f0ea9ea4e48cefd8b29e8fb1d98ce0203. Stop the container before attempting removal or force remove</span><br><span class="line">[mint@ali-mint ~]$ docker rm `docker ps -q` -f</span><br><span class="line">4d0eae7f054e</span><br><span class="line">22d519e7cfa2</span><br></pre></td></tr></table></figure><h4 id="清理和保存容器"><a href="#清理和保存容器" class="headerlink" title="清理和保存容器"></a>清理和保存容器</h4><p> 如果向容器中添加或保存了一些数据，并且要以持久化的方式保存这个容器，并将其存储为镜像。保存镜像之前应该尽量精简，所以要清理和缩减容器。</p><h5 id="清理和保存RHEL系容器"><a href="#清理和保存RHEL系容器" class="headerlink" title="清理和保存RHEL系容器"></a>清理和保存RHEL系容器</h5><p>在centos基础镜像上执行docker run，并使用yum install安装了几个软件包。在停止容器后，再次连接并使用如下命令清理个缩减其大小：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker start -ai a6df48cb68d1 </span><br><span class="line">[root@a6df48cb68d1 /]# yum clean all</span><br><span class="line">Loaded plugins: fastestmirror, ovl</span><br><span class="line">Cleaning repos: base extras updates</span><br><span class="line">Cleaning up list of fastest mirrors</span><br><span class="line">[root@a6df48cb68d1 /]# exit</span><br><span class="line">exit</span><br><span class="line">[mint@ali-mint ~]$ docker export a6df48cb68d1 &gt; mycentos.tar</span><br><span class="line">[mint@ali-mint ~]$ docker rm a6df48cb68d1       </span><br><span class="line">a6df48cb68d1</span><br><span class="line">[mint@ali-mint ~]$ cat mycentos.tar | docker import - mycentos</span><br><span class="line">sha256:cde62a1fa1a967e4099148cbf32a236ba18fc7033c86761cee2495509ba29693</span><br><span class="line">[mint@ali-mint ~]$ docker images</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mycentos              latest              cde62a1fa1a9        4 seconds ago       291MB</span><br></pre></td></tr></table></figure><h5 id="清理和保存Debian系容器"><a href="#清理和保存Debian系容器" class="headerlink" title="清理和保存Debian系容器"></a>清理和保存Debian系容器</h5><p>在ubuntu基础镜像上执行docker run，并使用apt install安装了几个软件包。在停止容器后，再次连接并使用如下命令清理个缩减其大小：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker start -ai 290d7baeb392</span><br><span class="line">root@290d7baeb392:/# apt clean</span><br><span class="line">root@290d7baeb392:/# exit</span><br><span class="line">exit</span><br><span class="line">[mint@ali-mint ~]$ docker export 290d7baeb392</span><br><span class="line">cowardly refusing to save to a terminal. Use the -o flag or redirect</span><br><span class="line">[mint@ali-mint ~]$ docker export 290d7baeb392 &gt; myubuntu.tar          </span><br><span class="line">[mint@ali-mint ~]$ docker rm 290d7baeb392</span><br><span class="line">290d7baeb392</span><br><span class="line">[mint@ali-mint ~]$ cat myubuntu.tar | docker import - myubuntu</span><br><span class="line">sha256:32dccc07c2f13b1ea32557dac5e9cd0fbcf51027c2b64dab298896dde9a5b671</span><br><span class="line">[mint@ali-mint ~]$ docker images</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">myubuntu              latest              32dccc07c2f1        4 seconds ago       152MB</span><br></pre></td></tr></table></figure><h3 id="构建容器镜像"><a href="#构建容器镜像" class="headerlink" title="构建容器镜像"></a>构建容器镜像</h3><p>尽管可以通过向正在运行的容器中添加软件并提交（docker commit）成镜像的方式构建Docker镜像，但是Docker首选的构建方式是通过docker build的方式。需要创建一个Dockerfile文件来保存构建Docker镜像的指令。使用Dockerfile构建Docker镜像要优于手工修改和提交。</p><ul><li><strong>可重建</strong>：如果向正在运行的容器中添加软件并提交为镜像，那么创建镜像所做的操作并没有被记录下来。通过Dockerfile文件创建则会完整记录下构建过程中的所有操作。</li><li><strong>可修正</strong>：如果构建过程中有错误，只需修改Dockerfile重新构建即可。因为docker build会为每一步构建创建一个层，因此字后的构建会从最近成功的那一步开始，可以极大的节约时间。</li><li><strong>可移植</strong>：即使Docker镜像再小，但是相对于Dockerfile文件来说尺寸也是巨大无比。其他人只需要有Dockerfile里使用的基础镜像和Dockerfile文件，就可以构建一个完全一致的Docker镜像。</li><li><strong>可验证</strong>：只要有一个一致镜像和Dockerfile文件，就可以验证有哪些东西向被拉取到已构建的镜像中。</li><li><strong>可更新</strong>：如果对Dockerfile使用yum或apt命令来安装软件，除非对软件版本有要求，否则获取的软件包都是最新版本的。</li></ul><h4 id="进行简单的Docker构建"><a href="#进行简单的Docker构建" class="headerlink" title="进行简单的Docker构建"></a>进行简单的Docker构建</h4><p>确保Docker服务已经在运行，要构建自己的Docker镜像，只需要一个Dockerfile、一个基础镜像以及想要添加至镜像中的文件。Docker build命令需要指定Dockerfile文件所在位置，通过会使用一个点表示当前目录。</p><ul><li><strong>创建一个存放Dockerfile的目录</strong>，如果Dockerfile不单独存放，Sending build context to Docker daemon会很很大，构建很慢</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> [mint@ali-mint ~]$ mkdir -p Imagesdir/myhttpd</span></span><br><span class="line">[mint@ali-mint ~]$ tree Imagesdir/myhttpd</span><br><span class="line">Imagesdir/httpd/</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── index.html</span><br><span class="line">└── run.sh</span><br><span class="line"></span><br><span class="line">0 directories, 3 files</span><br></pre></td></tr></table></figure><ul><li><strong>创建Dockerfile</strong>。使用任何编辑器，创建一个Dockerfile文件，内容如下：</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> Rui &lt;dooktmint@gmail.com&gt;</span><br><span class="line"><span class="comment"># update system and install appche httpd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum update;yum -y install httpd;yum clean all</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="comment"># Copy index.html</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> index.html /var/www/html/index.html</span></span><br><span class="line"><span class="comment"># Copy startup scripts</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> run.sh /run.sh</span></span><br><span class="line"><span class="comment"># Increase exec privileges  </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /run.sh</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/run.sh"</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> [mint@ali-mint Imagesdir]$ cat run.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">rm -rf /run/httpd/*</span><br><span class="line">exec /usr/sbin/httpd -D FOREGROUND</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint Imagesdir]$ cat index.html </span><br><span class="line">Apache Web Server on Centos: UP</span><br></pre></td></tr></table></figure><ul><li>构建镜像。在Dockerfile所在目录来构建镜像。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint Imagesdir]$ docker build -t myhttpd .</span><br><span class="line">...</span><br><span class="line">Successfully built 1e550afd1d20</span><br><span class="line">Successfully tagged my-httpd:latest</span><br></pre></td></tr></table></figure><ul><li>运行镜像。使用docker run命令运行镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run -d --name=testhttpd myhttpd</span><br></pre></td></tr></table></figure><ul><li>检查镜像。使用docker images和docker ps查看my-httpd镜像和testhttpd容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker images|grep my-httpd</span><br><span class="line">my-httpd              latest              1e550afd1d20        16 minutes ago      257MB</span><br><span class="line">[mint@ali-mint ~]$ docker ps|grep my-httpd      </span><br><span class="line">4be070f62efa        my-httpd            "/run.sh"           3 minutes ago       Up 3 minutes        80/tcp              testhttpd</span><br></pre></td></tr></table></figure><p>当然此时不知道容器IP地址，可以使用docker inspect或者直接使用docker exec来查看容器的IP地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker inspect --format='&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;' testhttpd  </span><br><span class="line">172.18.0.2</span><br><span class="line">[mint@ali-mint Imagesdir]$ docker exec -it testhttpd ip addr show eth0</span><br><span class="line">466: eth0@if467: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>一切顺利，可以使用IP地址来访问该容器啦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint Imagesdir]$ curl 172.18.0.2</span><br><span class="line">Apache Web Server on Centos: UP</span><br><span class="line">[mint@ali-mint Imagesdir]$ curl `docker inspect --format="&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;" testhttpd` </span><br><span class="line">Apache Web Server on Centos: UP</span><br></pre></td></tr></table></figure><p>构建指令解析：</p><ul><li><strong>Docker守护进程执行构建</strong>：docker build命令实际上并未构建容器，只是将构建所需要的信息传递给Docker守护进程。</li><li><strong>限制构建目录</strong>：存放Dockerfile的文件目录影只包含构建所需的文件。这是因为当前目录或子目录中的任何文件都会被发送给Docker守护进程并提供给ADD命令添加都容器。因此，需要把Dockerfile放到单独的目录中，可有大大出减少构建所需要的时间。</li><li><strong>中间容器</strong>：每个指定会在现存镜像上添加一个层，并提交生成一个中间容器镜像。使用这种方法，每次在相同的Dockerfile上运行docker build时，可以从最近成功的指令开始构建。</li><li><strong>构建选项</strong>：构建是需要用-t选项为镜像分配个名字。</li><li><strong>基础镜像</strong>：如果这个镜像本地有，则直接使用本地镜像，若没有则会到Docker Hub Registry上拉取，如果需要使用特定的版本的基础镜像，一定要添加标签，如：centos:6.8，若不添加，则默认使用centos:latest</li><li><strong>MAINTAINER</strong>：表明镜像的作者。该信息会保存至容器内。通常需要添加全名和邮箱</li><li><strong>RUN</strong>：放置在RUN中的命令会在构建过程中运行。安装httpd,net-tools,iproute。通过Dockerfile，我能够在RUN指令上运行任何命令，在构建时改变镜像。</li><li><strong>ENTRYPOINT</strong>：这一行指定docker run启动容器时要执行的命令。当容器运行时可以使用–entrypoint=””指令覆盖ENTRYPOINT。然而在运行镜像时覆盖的默认命令更简单的方法时是使用CMD，而不是ENTRYPOINT。</li></ul><h4 id="通过Dockerfile设置要执行的命令"><a href="#通过Dockerfile设置要执行的命令" class="headerlink" title="通过Dockerfile设置要执行的命令"></a>通过Dockerfile设置要执行的命令</h4><p>CMD和ENTRYPOINT指令确定启动容器时要运行的命令。RUN指令仅在构建镜像时使用，而CMD和ENTRYPOINT会在执行docker run时被使用。</p><h5 id="使用CMD指令"><a href="#使用CMD指令" class="headerlink" title="使用CMD指令"></a>使用CMD指令</h5><p>通过CMD，可以确定镜像要运行的默认命令，以及想传递给他的选项。如果Dockerfile中没有ENTRYTPOINT，当启动容器时默认运行的就是CMD的值所指定的命令，如果Dockerfile中有ENTRYPOINT，ENTRYPOINT的值是要运行的命令，而CMD的值会被当做ENTRYPOINT的选项。</p><p>在Dockerfile中可以只有一个CMD</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint catfile]$ cat Dockerfile </span><br><span class="line"><span class="keyword">FROM</span> centos:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> Rui &lt;dooktmint@gmail.com&gt;</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"cat"</span>,<span class="string">"/etc/hosts"</span>,<span class="string">"/etc/os-release"</span>]</span></span><br></pre></td></tr></table></figure><p>构建一个名为catfile的镜像，docker run catfile会将/etc/hosts和/etc/os-release文件输出到shell上。这个例子中的CMD参数是一个命令和紧随两个文件名。这些参数是json格式（方括号以及逗号分隔的列表）。这行CMD可以写成这样CMD cat /etc/hosts /etc/os-release，但这样会让命令被一个shell执行（sh -c），而不是直接执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint catfile]$ docker build -t catfile .</span><br><span class="line">[mint@ali-mint catfile]$ docker run catfile             #运行cat展示两文件</span><br><span class="line">[mint@ali-mint catfile]$ docker run -it catfile bash    #运行bash，忽略cat</span><br></pre></td></tr></table></figure><p>是要在docker run命令的末尾添加参数，容器内的CMD指令就会被忽略，因此第二例中打开了一个shell，而不是运行cat。如果想要指定一个不被docker run结尾选项的参数覆盖的命令，那就需要使用ENTRYPOINT指令。</p><h5 id="使用ENTRYPOINT指令"><a href="#使用ENTRYPOINT指令" class="headerlink" title="使用ENTRYPOINT指令"></a>使用ENTRYPOINT指令</h5><p>使用ENTRYPOINT指令可以定义运行容器镜像时所需要执行的命令。他的实现方式是使你无法通过在docker run命令行结尾添加参数来覆盖。如果Dockerfile包含ENTRYPOINT指令，并且还有CMD指令，这一行的参数会被传递给ENTRYPOINT指令。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:latest                                                                      </span><br><span class="line"><span class="keyword">MAINTAINER</span> Rui &lt;dooktmint@gmail.com&gt;</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/etc/hosts"</span>,<span class="string">"/etc/os-release"</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"cat"</span>]</span></span><br></pre></td></tr></table></figure><p>只要没有docker run命令提供其他参数，ENTRYPOINT行的命令（cat）就会将/etc/hosts和/etc/os-release文件作为参数，但是如果提供了其他参数（/etc/issue），CMD就会被忽略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint myent]$ docker run myent</span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">...</span><br><span class="line">NAME="CentOS Linux"</span><br><span class="line">VERSION="7 (Core)"</span><br><span class="line">ID="centos"</span><br><span class="line">...</span><br><span class="line">[mint@ali-mint myent]$ docker run myent /etc/issue    </span><br><span class="line">\S</span><br><span class="line">Kernel \r on an \m</span><br></pre></td></tr></table></figure><p>只使用ENTRYPOINT指定命令的好处是，可能想覆盖命令运行的默认方式。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> Rui &lt;dooktmint@gmail.com&gt;</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"cat"</span>,<span class="string">"/etc/hosts"</span>,<span class="string">"/etc/os-release"</span>]</span></span><br></pre></td></tr></table></figure><p>构建并运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint myent1]$ docker run myent1</span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">...</span><br><span class="line">NAME="CentOS Linux"</span><br><span class="line">VERSION="7 (Core)"</span><br><span class="line">ID="centos"</span><br><span class="line">...</span><br><span class="line">[mint@ali-mint myent1]$ docker run myent1 /etc/issue</span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">...</span><br><span class="line">172.18.0.2      7c5ddc9d4da9</span><br><span class="line">NAME="CentOS Linux"</span><br><span class="line">VERSION="7 (Core)"</span><br><span class="line">ID="centos"</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">\S</span><br><span class="line">Kernel \r on an \m</span><br></pre></td></tr></table></figure><p>由于hosts和os-release文件位于ENTRYPOINT行中，因此在docker run命令行结尾添加参数（/etc/issue）不能覆盖他们。会在这两个文件显示之后在显示/etc/issue文件。</p><p>使用docker run命令行的结尾参数不能覆盖ENTRYPONIT设置的命令，但是使用–entrypoint=””可以覆盖，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint myent1]$ docker run -it --entrypoint="/bin/bash" myent1 </span><br><span class="line">[root@7e017933d80b /]#</span><br></pre></td></tr></table></figure><h5 id="使用RUN指令"><a href="#使用RUN指令" class="headerlink" title="使用RUN指令"></a>使用RUN指令</h5><p> RUN指令只有在使用docker build创建镜像时才会被解释和执行。RUN指令的目的通常是执行那些以某种方式改变镜像的命令。可以安装软件包或创建成为这个镜像的一部分的配置文件。</p><p>以下例子，构建时创建一个文件，并让之后的docker run来显示它：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> Rui &lt;dooktmint@gmail.com&gt;</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"This container was built on <span class="variable">$(date)</span>."</span> &gt; /tmp/built.txt</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"cat"</span>,<span class="string">"/tmp/built.txt"</span>]</span></span><br></pre></td></tr></table></figure><p>运行docker build时，该命令会读取当前时间，将其插入一个句子中并将这个句子输出到/tmp/built.txt文件中。因为是在构建时运行的echo命令，所以每次执行docker run命令时都会显示相同的时间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint myrun]$ docker build -t myrun .</span><br><span class="line">[mint@ali-mint myrun]$ docker run myrun</span><br><span class="line">This container was built on Sat Aug 17 14:27:31 UTC 2019.</span><br><span class="line">[mint@ali-mint myrun]$ docker run myrun</span><br><span class="line">This container was built on Sat Aug 17 14:27:31 UTC 2019.</span><br></pre></td></tr></table></figure><h5 id="通过Dockerfile向镜像中添加文件"><a href="#通过Dockerfile向镜像中添加文件" class="headerlink" title="通过Dockerfile向镜像中添加文件"></a>通过Dockerfile向镜像中添加文件</h5><p>使用ADD指令可以在构建时向容器中添加所选文件。docker build会将有Dockerfile的目录作为根目录和当前目录。以下例子在Dockerfile所在目录创建一个文件并添加到名为myadd的镜像中。Dockerfile如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint myadd]$ tree .</span><br><span class="line">.</span><br><span class="line">├── Dockerfile</span><br><span class="line">└── test.txt</span><br><span class="line"></span><br><span class="line">0 directories, 2 files</span><br><span class="line">[mint@ali-mint myadd]$ cat test.txt </span><br><span class="line">This is test file.</span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> Rui &lt;dooktmint@gmail.com&gt;</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> test.txt /tmp/test.txt</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"cat"</span>,<span class="string">"/tmp/test.txt"</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint myadd]$ docker build -t myadd .</span><br><span class="line">[mint@ali-mint myadd]$ docker run myadd[mint@ali-mint myadd]$ docker run myadd </span><br><span class="line">This is test file.</span><br></pre></td></tr></table></figure><p>在ADD指令行中，test.txt在宿主机系统上与Docker位于同一目录，而/tmp/test.txt是在容器中存放的位置。切记把需要构建进容器的文件或目录放在Dockerfile所在目录或者子目录下。</p><h4 id="通过Dockerfile暴露镜像的端口"><a href="#通过Dockerfile暴露镜像的端口" class="headerlink" title="通过Dockerfile暴露镜像的端口"></a>通过Dockerfile暴露镜像的端口</h4><p>在Dockerfile中添加EXPOSE指令可以从所构建的镜像暴露特定的端口。当一个端口从正在运行的容器镜像中暴露出来时，它使两件事变成可能：</p><ul><li><strong>链接容器</strong>：一旦运行镜像，只要将正在运行的容器链接到另一个容器，其他容器就可以使用被暴露的端口，就像在同一本地系统上可用一样。</li><li><strong>运行时暴露</strong>：镜像构建时由EXPOSE指令标识的任何端口很容易通过本地宿主机的相同端口暴露出来。对docker run使用-p 选项，所有从容器内暴露的端口都被随机分配给宿主机的端口。之后可以在结果容器上运行docker port命令，查看端口的映射情况。</li></ul><p>以下是容器镜像的Web服务器Dockerfile，该镜像暴露了80端口：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> Rui &lt;dooktmint@gmail.com&gt;</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install httpd</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="comment"># Start the service</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"-D"</span>,<span class="string">"FOREGROUND"</span>]  </span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/usr/sbin/httpd"</span>]</span></span><br></pre></td></tr></table></figure><p>运行该镜像是，使用docker run -p把容器的80端口映射到宿主机的8080端口，能够正常显示Apache httpd的test页面。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint myweb]$ docker build -t myweb .</span><br><span class="line">[mint@ali-mint myweb]$ docker run -p 8080:80 -d myweb</span><br><span class="line">7c45f38c093ddc287379dd7f72adf2cca627c771e120588429c720a1b2953894</span><br><span class="line">[mint@ali-mint myweb]$ curl localhost:8080</span><br></pre></td></tr></table></figure><p>如果没有为端口指定协议，默认是TCP协议，如果是UDP协议，可以在端口后紧跟一个斜线（/）和协议名。例如可以用53/udp开放UDP的53端口。</p><h4 id="在Dockerfile中设置环境变量"><a href="#在Dockerfile中设置环境变量" class="headerlink" title="在Dockerfile中设置环境变量"></a>在Dockerfile中设置环境变量</h4><p>使用ENV指令，可以为所选的任何键设置环境变量。接下里的Dockerfile后续指令可以使用这些变量。可以一行设置多个，也可以使用多个ENV行。</p><p>Dockerfile的环境变量对这些方面很有用：修改数据目录的位置，添加密码，设置用户名。可以修改Dockerfile中的环境变量（ENV variable key）或通过docker run 命令在运行时修改（-e variable=key）</p><p>例如，可以将下面的环境变量构建到Dockerfile中，来创建Wordpress镜像</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> WORDPRESS_DB_HOST=host01.example.com</span><br><span class="line"><span class="keyword">ENV</span> WORDPRESS_DB_USER=root</span><br><span class="line"><span class="keyword">ENV</span> WORDPRESS_DB_PASSWORD=Yd467dsgn9f</span><br></pre></td></tr></table></figure><p>当运行这个wordpress镜像时，可以通过 docker run的-e选项修改这些值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker run --name=some-wordpress -e WORDPRESS_DB_HOST=10.4.2.25:3306 -e WORDPRESS_DB_USER=wordpress -e WORDPRESS_DB_PASSWORD=A3Hs34DS4FG -d wordpress</span><br></pre></td></tr></table></figure><h4 id="在Dockerfile中设置标签"><a href="#在Dockerfile中设置标签" class="headerlink" title="在Dockerfile中设置标签"></a>在Dockerfile中设置标签</h4><p>可以在Dockerfile中使用LABEL指令给所选得键设置值。可以用想用的任何键名。以下在myweb中添加LABEL指令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> Rui &lt;dooktmint@gmail.com&gt;</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> description=<span class="string">"Simple web server container"</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install httpd</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="comment"># Start the service</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"-D"</span>,<span class="string">"FOREGROUND"</span>]  </span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/usr/sbin/httpd"</span>]</span></span><br></pre></td></tr></table></figure><p>构建镜像取名为myweb:v1，使用docker inspect myweb:v1查看description属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint myweb]$ docker inspect myweb:v1</span><br><span class="line">...</span><br><span class="line">"Hostname": "",</span><br><span class="line">"Image": "sha256:5b5104d97dd6b88c47cbcdb1371f71cbcb68ead1f9de520301f8837857071f4a",</span><br><span class="line">"Labels": &#123;</span><br><span class="line">                "description": "Simple web server container",</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>以下是Dockerfile中使用LABEL指令的一些技巧</p><ul><li><strong>一行多个标签</strong>：需要为镜像设置多个标签，用一个LABEL行设置可以防止为每个标签都创建容器层。如下两种方法：</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="bash"> description=<span class="string">"My game images"</span> department=<span class="string">"Sales"</span> user=<span class="string">"joe"</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> description=<span class="string">"My game images"</span>\ </span></span><br><span class="line">department=<span class="string">"Sales"</span>\</span><br><span class="line"><span class="keyword">user</span>=<span class="string">"joe"</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>使用唯一标签</strong>：如果在Dockerfile中多次设置一个标签，最后的一个值会被使用，</p></li><li><p><strong>标签的字符</strong>：标签中可以使用的字符有一些限制。尽管不是强制，但应该使用字母、数字、点和中划线。确保每个键以字母或数字开头和结尾。不要使用连续的点或中划线</p></li><li><p><strong>用标签过滤</strong>：镜像构建后，可以使用–filter选项列出那些只把包含你设定的标签的镜像或容器。如下：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mint@ali-mint ~]$ docker images --filter "label=description=Simple web server container"  </span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">myweb               v1                  74b5f1bfb573        19 minutes ago      346MB</span><br><span class="line">[mint@ali-mint ~]$ docker ps -a --filter "label=description=Simple web server container"</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">9e70ad34ea98        myweb:v1            "/usr/sbin/httpd -D …"   19 minutes ago      Up 19 minutes       0.0.0.0:8080-&gt;80/tcp   sweet_nightingale</span><br></pre></td></tr></table></figure><h4 id="使用其他的docker-build命令选项"><a href="#使用其他的docker-build命令选项" class="headerlink" title="使用其他的docker build命令选项"></a>使用其他的docker build命令选项</h4><p>Dockerfile构建为Docker镜像唯一需要的就是docker build，但是还可以向docker build添加其他选项来调整构建过程，如下：</p><ul><li>docker build –force–rm=true .            告诉docker强制删除所有中间镜像</li><li>docker build –no-cache=true .             不会使用任何缓存数据，完全重头开始构建</li><li>docker build -f ~/home/mint/Dockerfile01 ~       指定构建文件名为/home/mint/Dockerfile01 </li><li>docker build –pull=true             Docker会检查是否从启用的repository中找到该镜像的新版本</li></ul><h4 id="构建容器的技巧"><a href="#构建容器的技巧" class="headerlink" title="构建容器的技巧"></a>构建容器的技巧</h4><h5 id="清理镜像"><a href="#清理镜像" class="headerlink" title="清理镜像"></a>清理镜像</h5><p>将不需要的软件包和数据从镜像中清除掉，yum clean all 、apt clean </p><h5 id="保持构建目录较小"><a href="#保持构建目录较小" class="headerlink" title="保持构建目录较小"></a>保持构建目录较小</h5><p>构建目录中每个目录都恢复至给Docker守护进程并被存储。开始构建前删除目录及其子目录的文件，加速构建并节约磁盘</p><p>某些情况下，从构建目录删除文件不太方便，可以将些文件排除在外。可以向构建目录添加一个.dockerignore文件并记录下要忽略的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat .dockerignore</span></span><br><span class="line">passwd</span><br><span class="line">passwd*</span><br><span class="line">*/passwd*</span><br><span class="line">*/*passwd*</span><br><span class="line">passw?</span><br><span class="line">!passwd-local</span><br><span class="line">mystuf/</span><br></pre></td></tr></table></figure><ul><li><strong>passwd</strong>：只忽略构建目录中的passwd文件</li><li><strong>passwd*</strong>：构建目录中所有已passwd开头的文件都会被忽略，如passwd-test，passwd.tar.gz</li><li><strong>/passwd*</strong>：构建目录的直接子目录中，所有以passwd开头的</li><li><strong><em>/passwd\</em></strong>：构建目录子目录下所有passwd开头的文件</li><li><strong>*/*passwd*</strong>： 构建目录子目录下所有包含passwd的文件</li><li><strong>passw?</strong>：构建目录中以passw开头后跟一个字符的文件，如passwg、passwb、passwd</li><li><strong>!passwd-local</strong>：该条目录之前的任何规则造成名为passwd-local的文件被忽略，这里所示字符串会让passwd-local不再被忽略。如果引起passwd-local被忽略的规则在这条规则之后出现，passwd-local文件会被忽略。</li><li><strong>mystuff/</strong>：构建目录中名为mystuff的目录，忽略该目录及子目录的任何文件和子目录</li></ul><h5 id="保持容器简单"><a href="#保持容器简单" class="headerlink" title="保持容器简单"></a>保持容器简单</h5><p>创建只做一件事的容器（运行文件服务器、启动Web服务器，或者提供一个简单的数据库）会简化对容器使用的管理和扩展。如果一个容器需要来自其他容器的服务，可以将容器链接到一起，或者使用编排服务（k8s）将一个容器需要的服务与提供这些服务的容器关联起来。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s平台搭建</title>
      <link href="/post/b2e09379.html"/>
      <url>/post/b2e09379.html</url>
      
        <content type="html"><![CDATA[<p>Kubernetes集群拥有一个Kubernetes Master。Kubernetes Master提供集群的独特视角，并且拥有一系列组件，比如Kubernetes API Server。API Server提供可以用来和集群交互的REST端点。master节点包括用来创建和复制Pod的Replication Controller。</p><a id="more"></a><h3 id="kubernetes平台环境"><a href="#kubernetes平台环境" class="headerlink" title="kubernetes平台环境"></a>kubernetes平台环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">k8s master节点：172.16.100.11</span><br><span class="line">k8s node1节点：172.16.100.101</span><br><span class="line">k8s node2节点：172.16.100.102</span><br><span class="line">docker仓库节点：172.16.100.105</span><br></pre></td></tr></table></figure><h4 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">yum -y install ntp</span><br><span class="line">ntpdate pool.ntp.org</span><br><span class="line">systemctl start ntpd</span><br><span class="line">systemctl enable ntpd</span><br></pre></td></tr></table></figure><h3 id="K8S-master安装配置"><a href="#K8S-master安装配置" class="headerlink" title="K8S master安装配置"></a>K8S master安装配置</h3><h4 id="在master节点安装etcd、kubernetes和flanneld"><a href="#在master节点安装etcd、kubernetes和flanneld" class="headerlink" title="在master节点安装etcd、kubernetes和flanneld"></a>在master节点安装etcd、kubernetes和flanneld</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install kubernetes-master etcd flannel</span><br></pre></td></tr></table></figure><h4 id="配置master节点etcd"><a href="#配置master节点etcd" class="headerlink" title="配置master节点etcd"></a>配置master节点etcd</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/etcd/etcd.conf</span></span><br><span class="line">ETCD_NAME=etcd1</span><br><span class="line">ETCD_DATA_DIR="/data/etcd"</span><br><span class="line">ETCD_LISTEN_PEER_URLS="http://172.16.100.11:2380"</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS="http://172.16.100.11:2379,http://127.0.0.1:2379"</span><br><span class="line">ETCD_MAX_SNAPSHOTS="5"</span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS="http://172.16.100.11:2380"</span><br><span class="line">ETCD_INITIAL_CLUSTER="etcd1=http://172.16.100.11:2380,etcd2=http://172.16.100.101:2380,etcd3=http://172.16.100.102:2380"</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS="http://172.16.100.11:2379"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建etcd数据目录</span></span><br><span class="line">mkdir  -p  /data/etcd/;chmod 757 -R /data/etcd/</span><br></pre></td></tr></table></figure><h4 id="修改-etc-kubernetes-config配置"><a href="#修改-etc-kubernetes-config配置" class="headerlink" title="修改/etc/kubernetes/config配置"></a>修改/etc/kubernetes/config配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/kubernetes/config </span></span><br><span class="line">KUBE_LOGTOSTDERR="--logtostderr=true"</span><br><span class="line">KUBE_LOG_LEVEL="--v=0"</span><br><span class="line">KUBE_ALLOW_PRIV="--allow-privileged=false"</span><br><span class="line">KUBE_MASTER="--master=http://172.16.100.11:8080"</span><br></pre></td></tr></table></figure><h4 id="修改kube-apiserver配置"><a href="#修改kube-apiserver配置" class="headerlink" title="修改kube-apiserver配置"></a>修改kube-apiserver配置</h4><p>将Kubernetes的apiserver进程的服务地址告诉Kubernetes的controller-manager, scheduler,proxy进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/kubernetes/apiserver</span></span><br><span class="line">KUBE_API_ADDRESS="--insecure-bind-address=0.0.0.0"</span><br><span class="line">KUBE_API_PORT="--port=8080"</span><br><span class="line">KUBELET_PORT="--kubelet-port=10250"</span><br><span class="line">KUBE_ETCD_SERVERS="--etcd-servers=http://172.16.100.11:2379,http://172.16.100.101:2379,http://172.16.100.102:2379"</span><br><span class="line">KUBE_SERVICE_ADDRESSES="--service-cluster-ip-range=10.254.0.0/16"</span><br><span class="line">KUBE_ADMISSION_CONTROL="--admission_control=NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota"</span><br><span class="line">KUBE_API_ARGS=""</span><br></pre></td></tr></table></figure><h4 id="启动master节点上的etcd-apiserver-controller-manager和scheduler"><a href="#启动master节点上的etcd-apiserver-controller-manager和scheduler" class="headerlink" title="启动master节点上的etcd, apiserver, controller-manager和scheduler"></a>启动master节点上的etcd, apiserver, controller-manager和scheduler</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for I in etcd kube-apiserver kube-controller-manager kube-scheduler;  do</span><br><span class="line">systemctl restart  $I</span><br><span class="line">systemctl enable  $I</span><br><span class="line">systemctl status   $I</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="K8S-node1节点配置"><a href="#K8S-node1节点配置" class="headerlink" title="K8S node1节点配置"></a>K8S node1节点配置</h3><h4 id="在node1节点上安装flannel、docker和Kubernetes"><a href="#在node1节点上安装flannel、docker和Kubernetes" class="headerlink" title="在node1节点上安装flannel、docker和Kubernetes"></a>在node1节点上安装flannel、docker和Kubernetes</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install kubernetes-node etcd docker flannel *rhsm* -y</span><br></pre></td></tr></table></figure><h4 id="配置node1节点etcd"><a href="#配置node1节点etcd" class="headerlink" title="配置node1节点etcd"></a>配置node1节点etcd</h4><p>配置信息告诉flannel进程etcd服务的位置以及在etcd上网络配置信息的节点位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/etcd/etc.conf</span></span><br><span class="line">ETCD_NAME=etcd2</span><br><span class="line">ETCD_DATA_DIR="/data/etcd"</span><br><span class="line">ETCD_LISTEN_PEER_URLS="http://172.16.100.101:2380"</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS="http://172.16.100.101:2379,http://127.0.0.1:2379"</span><br><span class="line">ETCD_MAX_SNAPSHOTS="5"</span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS="http://172.16.100.101:2380"</span><br><span class="line">ETCD_INITIAL_CLUSTER="etcd1=http://172.16.100.11:2380,etcd2=http://172.16.100.101:2380,etcd3=http://172.16.100.102:2380"</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS="http://172.16.100.101:2379"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建etcd数据目录</span></span><br><span class="line">mkdir  -p  /data/etcd/;chmod 757 -R /data/etcd/</span><br></pre></td></tr></table></figure><h4 id="修改-etc-kubernetes-config配置-1"><a href="#修改-etc-kubernetes-config配置-1" class="headerlink" title="修改/etc/kubernetes/config配置"></a>修改/etc/kubernetes/config配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/kubernetes/config</span></span><br><span class="line">KUBE_LOGTOSTDERR="--logtostderr=true"</span><br><span class="line">KUBE_LOG_LEVEL="--v=0"</span><br><span class="line">KUBE_ALLOW_PRIV="--allow-privileged=false"</span><br><span class="line">KUBE_MASTER="--master=http://172.16.100.11:8080"</span><br></pre></td></tr></table></figure><h4 id="修改kubelet配置"><a href="#修改kubelet配置" class="headerlink" title="修改kubelet配置"></a>修改kubelet配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/kubernetes/kubelet</span></span><br><span class="line">KUBELET_ADDRESS="--address=0.0.0.0"</span><br><span class="line">KUBELET_PORT="--port=10250"</span><br><span class="line">KUBELET_HOSTNAME="--hostname-override=172.16.100.101"</span><br><span class="line">KUBELET_API_SERVER="--api-servers=http://172.16.100.11:8080"</span><br><span class="line">KUBELET_POD_INFRA_CONTAINER="--pod-infra-container-image=registry.access.redhat.com/rhel7/pod-infrastructure:latest"</span><br><span class="line">KUBELET_ARGS=""</span><br></pre></td></tr></table></figure><h4 id="启动kube-proxy、kubelet、docker并查看其状态"><a href="#启动kube-proxy、kubelet、docker并查看其状态" class="headerlink" title="启动kube-proxy、kubelet、docker并查看其状态"></a>启动kube-proxy、kubelet、docker并查看其状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for I in kube-proxy kubelet docker</span><br><span class="line">do</span><br><span class="line">systemctl  enable  $I</span><br><span class="line">systemctl  restart  $I</span><br><span class="line">systemctl  status  $I</span><br><span class="line">done</span><br><span class="line">iptables -P FORWARD ACCEPT</span><br></pre></td></tr></table></figure><h3 id="K8S-node1节点配置-1"><a href="#K8S-node1节点配置-1" class="headerlink" title="K8S node1节点配置"></a>K8S node1节点配置</h3><h4 id="在node2节点上安装flannel、docker和Kubernetes"><a href="#在node2节点上安装flannel、docker和Kubernetes" class="headerlink" title="在node2节点上安装flannel、docker和Kubernetes"></a>在node2节点上安装flannel、docker和Kubernetes</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install kubernetes-node etcd docker flannel *rhsm* -y</span><br></pre></td></tr></table></figure><h4 id="配置node1节点etcd-1"><a href="#配置node1节点etcd-1" class="headerlink" title="配置node1节点etcd"></a>配置node1节点etcd</h4><p>配置信息告诉flannel进程etcd服务的位置以及在etcd上网络配置信息的节点位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/etcd/etc.conf</span></span><br><span class="line">ETCD_NAME=etcd3</span><br><span class="line">ETCD_DATA_DIR="/data/etcd"</span><br><span class="line">ETCD_LISTEN_PEER_URLS="http://172.16.100.102:2380"</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS="http://172.16.100.102:2379,http://127.0.0.1:2379"</span><br><span class="line">ETCD_MAX_SNAPSHOTS="5"</span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS="http://172.16.100.102:2380"</span><br><span class="line">ETCD_INITIAL_CLUSTER="etcd1=http://172.16.100.11:2380,etcd2=http://172.16.100.101:2380,etcd3=http://172.16.100.102:2380"</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS="http://172.16.100.102:2379"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建etcd数据目录</span></span><br><span class="line">mkdir  -p  /data/etcd/;chmod 757 -R /data/etcd/</span><br></pre></td></tr></table></figure><h4 id="修改-etc-kubernetes-config配置-2"><a href="#修改-etc-kubernetes-config配置-2" class="headerlink" title="修改/etc/kubernetes/config配置"></a>修改/etc/kubernetes/config配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/kubernetes/config</span></span><br><span class="line">KUBE_LOGTOSTDERR="--logtostderr=true"</span><br><span class="line">KUBE_LOG_LEVEL="--v=0"</span><br><span class="line">KUBE_ALLOW_PRIV="--allow-privileged=false"</span><br><span class="line">KUBE_MASTER="--master=http://172.16.100.11:8080"</span><br></pre></td></tr></table></figure><h4 id="修改kubelet配置-1"><a href="#修改kubelet配置-1" class="headerlink" title="修改kubelet配置"></a>修改kubelet配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/kubernetes/kubelet</span></span><br><span class="line">KUBELET_ADDRESS="--address=0.0.0.0"</span><br><span class="line">KUBELET_PORT="--port=10250"</span><br><span class="line">KUBELET_HOSTNAME="--hostname-override=172.16.100.102"</span><br><span class="line">KUBELET_API_SERVER="--api-servers=http://172.16.100.11:8080"</span><br><span class="line">KUBELET_POD_INFRA_CONTAINER="--pod-infra-container-image=registry.access.redhat.com/rhel7/pod-infrastructure:latest"</span><br><span class="line">KUBELET_ARGS=""</span><br></pre></td></tr></table></figure><h4 id="启动kube-proxy、kubelet、docker并查看其状态-1"><a href="#启动kube-proxy、kubelet、docker并查看其状态-1" class="headerlink" title="启动kube-proxy、kubelet、docker并查看其状态"></a>启动kube-proxy、kubelet、docker并查看其状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for  I  in  kube-proxy  kubelet  docker</span><br><span class="line">do</span><br><span class="line">systemctl  enable  $I</span><br><span class="line">systemctl  restart  $I</span><br><span class="line">systemctl  status  $I</span><br><span class="line">done</span><br><span class="line">iptables -P FORWARD ACCEPT</span><br></pre></td></tr></table></figure><h3 id="K8S-Flanneld网络配置"><a href="#K8S-Flanneld网络配置" class="headerlink" title="K8S Flanneld网络配置"></a>K8S Flanneld网络配置</h3><p>k8s的node节点搭建和配置flannel网络，etcd中/atomic.io/network/config节点会被Node节点上的flannel用来创建Doker IP地址网段。k8s集群所有节点都需要配置flanneld网络，如下，配置完成之后依次重启flanneld。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/sysconfig/flanneld</span></span><br><span class="line">FLANNEL_ETCD_ENDPOINTS="http://172.16.100.11:2379"</span><br><span class="line">FLANNEL_ETCD_PREFIX="/atomic.io/network"</span><br></pre></td></tr></table></figure><p>重启flanneld失败，原因是etcd中没有创建flannel网络</p><h4 id="创建flanneld网络"><a href="#创建flanneld网络" class="headerlink" title="创建flanneld网络"></a>创建flanneld网络</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcdctl  mk  /atomic.io/network/config '&#123;"Network":"172.17.0.0/16"&#125;'</span><br></pre></td></tr></table></figure><h4 id="etcd使用"><a href="#etcd使用" class="headerlink" title="etcd使用"></a>etcd使用</h4><p>在master节点上测试etcd集群是否正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">etcdctl  member list</span><br><span class="line">etcdctl cluster-health</span><br><span class="line">etcdctl get /atomic.io/network/config</span><br><span class="line">etcdctl ls /atomic.io/network/subnets</span><br><span class="line">etcdctl  rm   /atomic.io/network/   --recursive</span><br><span class="line">etcdctl  mk  /atomic.io/network/config &apos;&#123;&quot;Network&quot;:&quot;172.17.0.0/16&quot;&#125;&apos;</span><br></pre></td></tr></table></figure><h3 id="K8S-Dashborad-UI"><a href="#K8S-Dashborad-UI" class="headerlink" title="K8S Dashborad UI"></a>K8S Dashborad UI</h3><p>k8s实现的最重要的工作是对Docker容器集群统一的管理和调度，通常使用命令行来操作Kubernetes集群及各个节点，命令行操作非常不方便，如果使用UI界面来可视化操作，会更加方便的管理和维护。</p><p>由于官网下载镜像太慢，提前下载好以下两个镜像：</p><ul><li>pod-infrastructure</li><li>kubernetes-dashboard-amd64</li></ul><h4 id="Docker镜像导入并修改名称"><a href="#Docker镜像导入并修改名称" class="headerlink" title="Docker镜像导入并修改名称"></a>Docker镜像导入并修改名称</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; pod-infrastructure.tgz</span><br><span class="line">docker tag $(docker images|grep none|awk '&#123;print $3&#125;') registry.access.redhat.com/rhel7/pod-infrastructure</span><br><span class="line">docker load &lt;kubernetes-dashboard-amd64.tgz</span><br><span class="line">docker tag $(docker images|grep none|awk '&#123;print $3&#125;') bestwu/kubernetes-dashboard-amd64:v1.6.3</span><br></pre></td></tr></table></figure><h4 id="在master创建dashboard-controller-yaml"><a href="#在master创建dashboard-controller-yaml" class="headerlink" title="在master创建dashboard-controller.yaml"></a>在master创建dashboard-controller.yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">      annotations:</span></span><br><span class="line">        <span class="string">scheduler.alpha.kubernetes.io/critical-pod:</span> <span class="string">''</span></span><br><span class="line">        <span class="string">scheduler.alpha.kubernetes.io/tolerations:</span> <span class="string">'[&#123;"key":"CriticalAddonsOnly", "operator":"Exists"&#125;]'</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">bestwu/kubernetes-dashboard-amd64:v1.6.3</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line">          <span class="comment"># keep request = limit to keep this container in guaranteed class</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">50</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">          requests:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">50</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">        args:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="bullet">--apiserver-host=http://172.16.100.11:8080</span></span><br><span class="line"><span class="attr">        livenessProbe:</span></span><br><span class="line"><span class="attr">          httpGet:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">            port:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">          initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">          timeoutSeconds:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><h4 id="在master上创建dashboard-service-yaml"><a href="#在master上创建dashboard-service-yaml" class="headerlink" title="在master上创建dashboard-service.yaml"></a>在master上创建dashboard-service.yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">9090</span></span><br></pre></td></tr></table></figure><h4 id="创建dashborad-pods实例"><a href="#创建dashborad-pods实例" class="headerlink" title="创建dashborad pods实例"></a>创建dashborad pods实例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f dashboard-controller.yaml</span><br><span class="line">kubectl create -f dashboard-service.yaml</span><br></pre></td></tr></table></figure><h4 id="查看pods和service信息"><a href="#查看pods和service信息" class="headerlink" title="查看pods和service信息"></a>查看pods和service信息</h4><p>因为默认查询到的namespace是default下的，所以需要指定namespace </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl  get  namespace</span><br><span class="line">kubectl get  deployment --all-namespaces</span><br><span class="line">kubectl get  svc  --all-namespaces</span><br><span class="line">kubectl  get  pods  --all-namespaces</span><br><span class="line">kubectl get pod  -o wide  --all-namespaces</span><br><span class="line">kubectl  describe  service/kubernetes-dashboard  --namespace="kube-system"</span><br><span class="line">kubectl  describe  pod/kubernetes-dashboard-530803917-816df --namespace="kube-system"</span><br><span class="line">kubectl  delete pod/kubernetes-dashboard-530803917-816df --namespace="kube-system" --grace-period=0 --force</span><br></pre></td></tr></table></figure><h3 id="访问k8s-dasborad-UI"><a href="#访问k8s-dasborad-UI" class="headerlink" title="访问k8s dasborad UI"></a>访问k8s dasborad UI</h3><p>通过浏览器访问：<a href="http://172.16.100.11/ui" target="_blank" rel="noopener">http://172.16.100.11/ui</a></p><h3 id="访问ui有问题提示"><a href="#访问ui有问题提示" class="headerlink" title="访问ui有问题提示"></a>访问ui有问题提示</h3><ul><li>注意dashborad-controller.yaml中定义的apiserver-host 是否正确</li><li>使用iptables -P FORWARD ACCEPT </li></ul>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器配置软件为系统服务</title>
      <link href="/post/c6b0c30c.html"/>
      <url>/post/c6b0c30c.html</url>
      
        <content type="html"><![CDATA[<p>通过官网下载NGinx源码安装、部署Tomcat时。每次都是需要手动进入安装目录下管理,很是麻烦.写个脚本实现应用的启动、停止、重载。并可以使用Service或者Systemctl来管理实现开机自启动。</p><a id="more"></a><h5 id="Nginx开机启动service版本"><a href="#Nginx开机启动service版本" class="headerlink" title="Nginx开机启动service版本"></a>Nginx开机启动service版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> chkconfig: - 85 15</span><br><span class="line"><span class="meta">#</span> description: Nginx Web Server </span><br><span class="line"></span><br><span class="line">Dir=/usr/local/nginx/</span><br><span class="line">Config=/usr/local/nginx/sbin/nginx</span><br><span class="line">Pidfile=/usr/local/nginx/logs/nginx.pid</span><br><span class="line"></span><br><span class="line">. /etc/init.d/functions</span><br><span class="line"></span><br><span class="line">start()&#123;</span><br><span class="line">    if [ ! -f $Pidfile ];then</span><br><span class="line">        $Config</span><br><span class="line">        NUM=$?</span><br><span class="line">        if [ $NUM -ne 0 ];then</span><br><span class="line">            action "NGINX starting..." /bin/false</span><br><span class="line">            return $NUM</span><br><span class="line">        else</span><br><span class="line">            action "NGINX starting..." /bin/true</span><br><span class="line">            return $NUM</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line">        echo "NGINX is running"</span><br><span class="line">        return $NUM</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop() &#123;</span><br><span class="line">    if [ -f $Pidfile ];then</span><br><span class="line">        $Config -s stop</span><br><span class="line">        NUM=$?</span><br><span class="line">        if [ $NUM -ne 0 ];then</span><br><span class="line">            action "NGINX stopping..." /bin/false</span><br><span class="line">            return $NUM</span><br><span class="line">        else</span><br><span class="line">            action "NGINX stopping..." /bin/true</span><br><span class="line">            return $NUM</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line">        echo "NGINX is not running"</span><br><span class="line">        return $NUM            </span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">status() &#123;</span><br><span class="line">    if [ `ps -ef | grep nginx | grep -vc grep` -gt 1 ];then</span><br><span class="line">        echo -e "\033[32mNGINX is running\033[0m"</span><br><span class="line">    else</span><br><span class="line">        echo -e "\033[31mNGINX is not running\033[0m"</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">    start)</span><br><span class="line">        start</span><br><span class="line">        NUM=$?</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        stop</span><br><span class="line">        NUM=$?</span><br><span class="line">        ;;</span><br><span class="line">    restart)</span><br><span class="line">        stop</span><br><span class="line">        sleep 2</span><br><span class="line">        start</span><br><span class="line">        NUM=$?</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        status</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        echo $"Usage: $0 &#123;start|stop|restart|status&#125;"</span><br><span class="line">        exit 9</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br><span class="line">exit $NUM</span><br></pre></td></tr></table></figure><h5 id="Nginx开机启动sytemctl版本"><a href="#Nginx开机启动sytemctl版本" class="headerlink" title="Nginx开机启动sytemctl版本"></a>Nginx开机启动sytemctl版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>cat /usr/lib/systemd/system/nginx.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=true</span><br><span class="line">[Install]</span><br></pre></td></tr></table></figure><h5 id="Tomcat开机启动service版本"><a href="#Tomcat开机启动service版本" class="headerlink" title="Tomcat开机启动service版本"></a>Tomcat开机启动service版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> chkconfig: 2345 99 10</span><br><span class="line"><span class="meta">#</span> description: Tomcat service manage script</span><br><span class="line"></span><br><span class="line">. /etc/init.d/functions</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_112/</span><br><span class="line">export CATALINA_HOME=/opt/apache-tomcat-9.0.4</span><br><span class="line"></span><br><span class="line">Usage() &#123;</span><br><span class="line">    echo $"Usage: $0 &#123;start|stop|restart|status&#125;"</span><br><span class="line">    exit 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start() &#123;</span><br><span class="line">    if [ -f $CATALINA_HOME/bin/startup.sh ];then</span><br><span class="line">        $CATALINA_HOME/bin/startup.sh &amp;&gt; /dev/null</span><br><span class="line">        NUM=$?</span><br><span class="line">        if [ $NUM -eq 0 ];then</span><br><span class="line">            action "Tomcat started..." /bin/true</span><br><span class="line">            return $NUM</span><br><span class="line">        else</span><br><span class="line">            action "Tomcat started..." /bin/false</span><br><span class="line">            return $NUM</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop() &#123;</span><br><span class="line">    if [ -f $CATALINA_HOME/bin/shutdown.sh ];then</span><br><span class="line">        $CATALINA_HOME/bin/shutdown.sh &amp;&gt; /dev/null</span><br><span class="line">        NUM=$?</span><br><span class="line">        if [ $NUM -eq 0 ];then</span><br><span class="line">            action "Tomcat stopped..." /bin/true</span><br><span class="line">            return $NUM</span><br><span class="line">        else</span><br><span class="line">            action "Tomcat stopped..." /bin/false</span><br><span class="line">            return $NUM</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">status() &#123;</span><br><span class="line">    if [ `ps -ef | grep java | grep -vc grep` -ge 1 ];then</span><br><span class="line">       echo -e "\033[32mTomcat is running\033[0m" </span><br><span class="line">    else</span><br><span class="line">       echo -e "\033[31mTomcat is not running\033[0m" </span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case "$1" in</span><br><span class="line">    start)</span><br><span class="line">        start</span><br><span class="line">        NUM=$?</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        stop</span><br><span class="line">        NUM=$?</span><br><span class="line">        ;;</span><br><span class="line">    restart)</span><br><span class="line">        stop</span><br><span class="line">        sleep 2</span><br><span class="line">        start</span><br><span class="line">        NUM=$?</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        status</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        Usage</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">exit $NUM</span><br></pre></td></tr></table></figure><h5 id="Tomcat开机启动systemctl版本"><a href="#Tomcat开机启动systemctl版本" class="headerlink" title="Tomcat开机启动systemctl版本"></a>Tomcat开机启动systemctl版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Tomcat</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">Environment="JAVA_HOME=/usr/java/jdk1.8.0_144"</span><br><span class="line">PIDFile=/usr/apache/apache-tomcat-8.0.53/tomcat.pid</span><br><span class="line">ExecStart=/usr/apache/apache-tomcat-8.0.53/bin/startup.sh</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">PrivateTmp=true</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h5 id="Systemctl参数说明"><a href="#Systemctl参数说明" class="headerlink" title="Systemctl参数说明"></a>Systemctl参数说明</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]:服务的说明</span><br><span class="line">Description:描述服务</span><br><span class="line">After:描述服务类别</span><br><span class="line">[Service]服务运行参数的设置</span><br><span class="line">Type=forking是后台运行的形式</span><br><span class="line">ExecStart为服务的具体运行命令</span><br><span class="line">ExecReload为重启命令</span><br><span class="line">ExecStop为停止命令</span><br><span class="line">PrivateTmp=True表示给服务分配独立的临时空间</span><br><span class="line">注意：[Service]的启动、重启、停止命令全部要求使用绝对路径</span><br><span class="line">[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scripts </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编写zabbix告警邮件</title>
      <link href="/post/7df7e5a.html"/>
      <url>/post/7df7e5a.html</url>
      
        <content type="html"><![CDATA[<p>使用Python编写一个脚本，实现zabbix邮件告警</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">mail_host = <span class="string">'smtp.163.com'</span></span><br><span class="line">mail_user = <span class="string">'1831317'</span></span><br><span class="line">mail_pass = <span class="string">'******'</span></span><br><span class="line">mail_postfix = <span class="string">'163.com'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(to_list,subject,content)</span>:</span></span><br><span class="line">    me = <span class="string">"zabbix监控告警平台"</span>+<span class="string">"&lt;"</span>+mail_user+<span class="string">"@"</span>+mail_postfix+<span class="string">"&gt;"</span></span><br><span class="line">    msg = MIMEText(content, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    msg[<span class="string">'Subject'</span>] = subject</span><br><span class="line">    msg[<span class="string">'From'</span>] = me</span><br><span class="line">    msg[<span class="string">'to'</span>] = to_list</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = smtplib.SMTP()</span><br><span class="line">        s.connect(mail_host)</span><br><span class="line">        s.login(mail_user,mail_pass)</span><br><span class="line">        s.sendmail(me,to_list,msg.as_string())</span><br><span class="line">        s.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="keyword">print</span> str(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    send_mail(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], sys.argv[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DockerFile生成镜像</title>
      <link href="/post/4120479c.html"/>
      <url>/post/4120479c.html</url>
      
        <content type="html"><![CDATA[<p>Dockerfile是一个用于组合镜像的文本集合，可以在命令行中调用任何命令。Dockerfile其内部包含了一条条的指令，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。使用Dockerfile生成一个可以使用ssh的Centos基础镜像呢。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM centos                                                                                                          </span><br><span class="line"><span class="comment">#指定基础镜像</span></span><br><span class="line">MAINTAINER mint</span><br><span class="line"><span class="comment">#制定维护者</span></span><br><span class="line">RUN yum -y install passwd openssl openssh-server&amp;&amp; <span class="built_in">echo</span> <span class="string">'123456'</span>|passwd --stdin root</span><br><span class="line">RUN ssh-keygen -q -t rsa -b 2048 -f /etc/ssh/ssh_host_rsa_key -N <span class="string">''</span></span><br><span class="line">RUN ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N <span class="string">''</span></span><br><span class="line">RUN sed -i <span class="string">'/^session\s\+required\s\+pam_loginuid.so/s/^/#/'</span> /etc/pam.d/sshd</span><br><span class="line">RUN mkdir -p /root/.ssh &amp;&amp; chown root. /root &amp;&amp; chmod 700 /root/.ssh &amp;&amp; cp /etc/skel/.bash* /root</span><br><span class="line">EXPOSE 22</span><br><span class="line"><span class="comment">#暴露ssh端口</span></span><br><span class="line">CMD ip addr ls eth0|awk <span class="string">'&#123;print $2&#125;'</span>|egrep -o <span class="string">'([0-9]+\.)&#123;3&#125;[0-9]+'</span>;/usr/sbin/sshd -D</span><br><span class="line"><span class="comment">#设定运行镜时,输出IP,并以daemon的方式启动sshd</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins发布脚本</title>
      <link href="/post/d936a15c.html"/>
      <url>/post/d936a15c.html</url>
      
        <content type="html"><![CDATA[<p>复杂的项目构建中，有不同的主机、不用的应用，如果手工部署，容易出问题。使用jenkins配置不同主机、不同应用，结合ansible通过jenkins界面就可以很简单的完成业务升级、回滚、备份等功能。</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">定义变量</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> -x</span></span><br><span class="line"></span><br><span class="line">APPDIR=$2                               #应用所在目录，/opt/app</span><br><span class="line">APPNAME=$3                              #应用名称，如test-llb-dubbo-21996</span><br><span class="line">ENV=$4                                  #如tdtp,ttsp</span><br><span class="line">TOMCATWAR=$5                            #Tomcat应用webapps下的内容</span><br><span class="line">SERVER_PORT=$6                          #应用启动的端口，如21996</span><br><span class="line">TARDIR=/opt/package                     #应用tar包存放目录，如/opt/package</span><br><span class="line">BAKDIR=/opt/backup                      #应用备份目录，如/opt/backup/</span><br><span class="line">LOGDIR=/opt/logs                        #应用日志目录，如/opt/logs</span><br><span class="line">BINDIR=$&#123;APPDIR&#125;/$&#123;APPNAME&#125;/bin         #脚本所在目录，如/opt/app/test-llb-dubbo-20889/bin/</span><br><span class="line">DEPLOY_DIR=$&#123;APPDIR&#125;/$&#123;APPNAME&#125;         #应用发布目录，如/opt/app/test-llb-dubbo-20889</span><br><span class="line">PARAMNUM=$#                             #传入的参数个数</span><br><span class="line">SCRIPTNAME=$0                           #脚本名称</span><br><span class="line"><span class="meta">#</span><span class="bash">SHELLLOG=<span class="string">"<span class="variable">$&#123;LOGDIR&#125;</span>/<span class="variable">$&#123;SCRIPTNAME&#125;</span>.log"</span>  <span class="comment">#存放脚本操作日志文件</span></span></span><br><span class="line">CONFIG_SERVER=172.16.100.11             #jenkins上的nginx服务器地址</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用帮助</span></span><br><span class="line"></span><br><span class="line">function usage() &#123;</span><br><span class="line">    if [[ $&#123;PARAMNUM&#125; -ne 6 ]];then</span><br><span class="line">        echo "Usage: $0 start|stop|restart|publish|rollback APPDIR APPNAME ENV TOMCATWAR SERVER_PORT"</span><br><span class="line">        exit 11</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">start <span class="keyword">function</span></span></span><br><span class="line">function start() &#123;</span><br><span class="line">    PIDS=`ps -ef | grep java | grep "$&#123;DEPLOY_DIR&#125;" |awk '&#123;print $2&#125;'`</span><br><span class="line">    #判断应用是否启动</span><br><span class="line">    if [[ -n "$&#123;PIDS&#125;" ]];then</span><br><span class="line">        echo "ERROR: The $&#123;APPNAME&#125; already started!"</span><br><span class="line">        echo "PID: $PIDS"</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line">chown -R app. /opt</span><br><span class="line">    </span><br><span class="line">    #判断端口是否被占用</span><br><span class="line">    if [[ -n $&#123;SERVER_PORT&#125; ]];then</span><br><span class="line">        SERVER_PORT_COUNT=`netstat -tln | grep $&#123;SERVER_PORT&#125; | wc -l`</span><br><span class="line">        if [[ $&#123;SERVER_PORT_COUNT&#125; -gt 0 ]]; then</span><br><span class="line">            echo "ERROR: The $&#123;APPNAME&#125; port $&#123;SERVER_PORT&#125; already used!"</span><br><span class="line">            return 2</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    #执行启动脚本</span><br><span class="line">    echo -e "Starting the $&#123;APPNAME&#125; ...\c"</span><br><span class="line">    sleep 2</span><br><span class="line"></span><br><span class="line">    #判断是不是dubbo应用</span><br><span class="line">result=$(echo $&#123;APPNAME&#125;| grep -vE "tomcat|bom")</span><br><span class="line">if [[ "$&#123;result&#125;" != "" ]];then</span><br><span class="line">        source /etc/profile &amp;&amp; cd $&#123;BINDIR&#125; &amp;&amp; /bin/bash $&#123;BINDIR&#125;/start.sh</span><br><span class="line">    else</span><br><span class="line">        source /etc/profile &amp;&amp; cd $&#123;BINDIR&#125; &amp;&amp; nohup /bin/bash $&#123;BINDIR&#125;/startup.sh &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 判断应用是否启动成功</span><br><span class="line">    COUNT=0  # 计算java 进程个数</span><br><span class="line">    flag=0   # 计算启动时间秒数</span><br><span class="line">    while [[ $&#123;COUNT&#125; -lt 1 ]]; do</span><br><span class="line">        echo -e ".\c"  # 等同于 echo -n "."</span><br><span class="line">        sleep 1</span><br><span class="line">        if [[ -n "$&#123;SERVER_PORT&#125;" ]]; then</span><br><span class="line">            COUNT=`netstat -ant | grep $&#123;SERVER_PORT&#125; | wc -l`</span><br><span class="line">        else</span><br><span class="line">            COUNT=`ps -f | grep java | grep "$&#123;DEPLOY_DIR&#125;" | awk '&#123;print $2&#125;' | wc -l`</span><br><span class="line">        fi</span><br><span class="line">        if [[ $&#123;COUNT&#125; -gt 0 ]]; then</span><br><span class="line">            break</span><br><span class="line">        fi</span><br><span class="line">        # 判断启动30s后，端口或进程不存在，表示启动失败</span><br><span class="line">        flag=$[$&#123;flag&#125;+1]</span><br><span class="line">        if [[ $&#123;flag&#125; -gt 30 ]] &amp;&amp; [[ $&#123;COUNT&#125; -eq 0 ]]; then</span><br><span class="line">            echo "应用启动失败"</span><br><span class="line">            exit 33</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">    </span><br><span class="line">    #输出启动成功信息</span><br><span class="line">    echo "OK!"</span><br><span class="line">    PIDS=`ps -f | grep java | grep "$&#123;DEPLOY_DIR&#125;" | awk '&#123;print $2&#125;'`</span><br><span class="line">    echo "Start $&#123;APPNAME&#125; Success, PID: $PIDS"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> stop <span class="keyword">function</span></span></span><br><span class="line">function stop() &#123;</span><br><span class="line">    PIDS=`ps -ef | grep java | grep "$&#123;DEPLOY_DIR&#125;" |awk '&#123;print $2&#125;'`    </span><br><span class="line">    #判断应用是否已经停止</span><br><span class="line">    if [[ -z "$PIDS" ]]; then</span><br><span class="line">        echo "ERROR: The $&#123;APPNAME&#125; does not started!"</span><br><span class="line">        return 4</span><br><span class="line">    fi</span><br><span class="line">    #停止应用进程</span><br><span class="line">    echo -e "Stopping the $&#123;APPNAME&#125; ...\c"</span><br><span class="line">    for PID in $&#123;PIDS&#125; ; do</span><br><span class="line">        kill $&#123;PID&#125; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">     #判断应用是否停止成功，等待时间15s</span><br><span class="line">     COUNT=0</span><br><span class="line">     while [[ $&#123;COUNT&#125; -lt 15 ]]; do</span><br><span class="line">         echo -e ".\c"</span><br><span class="line">         sleep 1</span><br><span class="line">         COUNT=$[$&#123;COUNT&#125;+1]</span><br><span class="line">     done</span><br><span class="line"></span><br><span class="line">      # 停止进程超过15s，直接kill -9</span><br><span class="line">      PIDS_EXIST=`ps -ef | grep java | grep "$&#123;DEPLOY_DIR&#125;" |awk '&#123;print $2&#125;'`</span><br><span class="line">      echo $&#123;PIDS_EXIST&#125;</span><br><span class="line">      if [[ -n "$&#123;PIDS_EXIST&#125;" ]]; then</span><br><span class="line">          for PID in $&#123;PIDS_EXIST&#125; ; do</span><br><span class="line">              kill -9 $&#123;PID&#125; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">          done</span><br><span class="line">      fi</span><br><span class="line"></span><br><span class="line">      # 输出停止成功信息</span><br><span class="line">      echo "OK!"</span><br><span class="line">      echo "Stop $&#123;APPNAME&#125; Success, PID: $PIDS"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> backup <span class="keyword">function</span></span></span><br><span class="line">function backup() &#123;</span><br><span class="line">    cd $&#123;APPDIR&#125;</span><br><span class="line">    #判断应用目录是否存在</span><br><span class="line">    if [[ ! -d $&#123;APPNAME&#125; ]];then</span><br><span class="line">        echo "ERROR: $&#123;DEPLOY_DIR&#125; is not existed."</span><br><span class="line">        return 5</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    mv $&#123;APPNAME&#125; $&#123;BAKDIR&#125;/$&#123;APPNAME&#125;_`date +%F_%T`</span><br><span class="line"></span><br><span class="line">    #判断是否备份成功</span><br><span class="line">    if [[ $? -eq 0 ]];then</span><br><span class="line">        echo "Backup $&#123;APPNAME&#125; sucess!"</span><br><span class="line">    else</span><br><span class="line">        echo "Backup $&#123;APPNAME&#125; failed!"</span><br><span class="line">        exit 6</span><br><span class="line">    fi</span><br><span class="line">    cd $&#123;BAKDIR&#125;</span><br><span class="line">    find . -mtime +30 -name "*$&#123;APPNAME&#125;*" -exec rm -rf &#123;&#125; \;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">deploy <span class="keyword">function</span></span></span><br><span class="line">function deploy() &#123;</span><br><span class="line">    #解压需要更新的应用包到应用目录</span><br><span class="line">    </span><br><span class="line">    #判断是否是dubbo应用</span><br><span class="line">result=$(echo $&#123;APPNAME&#125;| grep -vE "tomcat|bom")</span><br><span class="line">if [[ "$&#123;result&#125;" != "" ]];then</span><br><span class="line">        mkdir -p "$&#123;APPDIR&#125;/$&#123;APPNAME&#125;"</span><br><span class="line">        cd $&#123;APPDIR&#125;/$&#123;APPNAME&#125;</span><br><span class="line">        #下载应用包,解压文件夹</span><br><span class="line">        wget http://$&#123;CONFIG_SERVER&#125;/$&#123;ENV&#125;/$&#123;APPNAME&#125;.tar -O $&#123;TARDIR&#125;/$&#123;APPNAME&#125;.tar</span><br><span class="line">        tar -xf $&#123;TARDIR&#125;/$&#123;APPNAME&#125;.tar -C $&#123;APPDIR&#125;</span><br><span class="line">        sleep 3</span><br><span class="line">        if [[ ! -d $&#123;LOGDIR&#125; ]];then</span><br><span class="line">            mkdir -p $&#123;LOGDIR&#125;</span><br><span class="line">        fi</span><br><span class="line">        #判断应用目录日志文件是否是软连接</span><br><span class="line">        if [[ ! -L $&#123;APPNAME&#125;/log ]];then</span><br><span class="line">            #判断应用目录日志文件夹是否是文件夹</span><br><span class="line">            if [[ -d $&#123;APPNAME&#125;/logs ]]; then</span><br><span class="line">                mv $&#123;APPNAME&#125;/logs/* $&#123;LOGDIR&#125;</span><br><span class="line">                rmdir $&#123;APPNAME&#125;/logs</span><br><span class="line">            fi</span><br><span class="line">            ln -s $&#123;LOGDIR&#125; $&#123;APPDIR&#125;/$&#123;APPNAME&#125;/logs </span><br><span class="line">        else</span><br><span class="line">            echo "日志文件已经是软链接"</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line"><span class="meta">#</span><span class="bash">如果是tomcat应用</span></span><br><span class="line">        #获取到tomcat包保存在包目录</span><br><span class="line">wget http://$&#123;CONFIG_SERVER&#125;/tomcat-8.5.29.tar.gz -O $&#123;TARDIR&#125;/tomcat-8.5.29.tar.gz</span><br><span class="line">        #判断是否存在tomcat应用目录</span><br><span class="line">        if [[ ! -d $&#123;APPDIR&#125;/$&#123;APPNAME&#125; ]];then</span><br><span class="line">            #解压文件夹</span><br><span class="line">            cd $&#123;APPDIR&#125; &amp;&amp; tar xf $&#123;TARDIR&#125;/tomcat-8.5.29.tar.gz -C . &amp;&amp; rm -rf ./tomcat-8.5.29/webapps  &amp;&amp; mv tomcat-8.5.29 $&#123;APPNAME&#125;</span><br><span class="line">wget http://$&#123;CONFIG_SERVER&#125;/$&#123;ENV&#125;/$&#123;APPNAME&#125;.tar -O $&#123;TARDIR&#125;/$&#123;APPNAME&#125;.tar</span><br><span class="line">cd $&#123;TARDIR&#125; &amp;&amp; tar xf $&#123;APPNAME&#125;.tar &amp;&amp; mv $&#123;APPNAME&#125;/webapps $&#123;APPDIR&#125;/$&#123;APPNAME&#125; &amp;&amp; rm -rf $&#123;APPNAME&#125;</span><br><span class="line">sleep 3</span><br><span class="line">            if [[ ! -d $&#123;LOGDIR&#125; ]];then</span><br><span class="line">                mkdir -p $&#123;LOGDIR&#125;</span><br><span class="line">            fi</span><br><span class="line"><span class="meta">#</span><span class="bash">判断应用目录日志文件是否是软连接</span></span><br><span class="line">        if [[ ! -L $&#123;APPNAME&#125;/log ]];then</span><br><span class="line">            #判断应用目录日志文件夹是否是文件夹</span><br><span class="line">            if [[ -d $&#123;APPNAME&#125;/logs ]]; then</span><br><span class="line">                mv $&#123;APPNAME&#125;/logs/* $&#123;LOGDIR&#125;</span><br><span class="line">                rmdir $&#123;APPNAME&#125;/logs</span><br><span class="line">            fi</span><br><span class="line">            ln -s $&#123;LOGDIR&#125; $&#123;APPDIR&#125;/$&#123;APPNAME&#125;/logs</span><br><span class="line">        else</span><br><span class="line">            echo "日志文件已经是软链接"</span><br><span class="line">        fi</span><br><span class="line">        fi</span><br><span class="line">            </span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">rollback <span class="keyword">function</span></span></span><br><span class="line">function rollback() &#123;</span><br><span class="line">    cd $&#123;APPDIR&#125;</span><br><span class="line">result=$(echo $&#123;APPNAME&#125; | grep -vE "tomcat|bom")</span><br><span class="line">if [[ "$&#123;result&#125;" = "" ]];then</span><br><span class="line">        [[ -d $&#123;APPNAME&#125; ]] &amp;&amp; rm -rf $&#123;APPNAME&#125;</span><br><span class="line">        mv $&#123;BAKDIR&#125;/`ls -rht $&#123;BAKDIR&#125;|grep $&#123;APPNAME&#125;|tail -1` $&#123;APPNAME&#125;</span><br><span class="line">    else</span><br><span class="line">        [[ -d $&#123;APPNAME&#125; ]] &amp;&amp; rm -rf $&#123;APPNAME&#125;/webapps/</span><br><span class="line">        mv $&#123;BAKDIR&#125;/`ls -rht $&#123;BAKDIR&#125;|grep webapps|tail -1` $&#123;APPNAME&#125;/</span><br><span class="line">    fi</span><br><span class="line">    #输出应用回滚成功信息</span><br><span class="line">    echo "Rollback $&#123;APPNAME&#125; sucess!"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case $1 in </span><br><span class="line">    start)</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">    restart)</span><br><span class="line">        stop</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">    publish)</span><br><span class="line">        stop</span><br><span class="line">        backup</span><br><span class="line">        deploy</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">    rollback)</span><br><span class="line">        stop</span><br><span class="line">        rollback</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        usage</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ----------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description:     start|stop|restart|deploy|rollback app</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Release:         2019-5-23</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Email:           </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ----------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">APPDIR=$2  # 应用所在目录 /opt/app</span><br><span class="line">APPNAME=$3  # 应用名称 ttsp-admin-dubbo-22991</span><br><span class="line">TARSOURCE=$4  # 应用压缩包存放目录 /opt/package</span><br><span class="line">TARSUFFIX=$5  # 应用压缩包后缀 .tar</span><br><span class="line">LOGDIR=$6  # 应用日志目录 /opt/logs</span><br><span class="line">BAKDIR=$7   # 应用备份目录 /opt/backup</span><br><span class="line">REDIS_IPS=$8</span><br><span class="line">ZK_ADDR=$9</span><br><span class="line">DB_INFO=$&#123;10&#125;</span><br><span class="line"></span><br><span class="line">SERVER_PORT=$(echo $&#123;APPNAME&#125; | awk -F'-' '&#123;print $NF&#125;')  # 应用启动端口 22991</span><br><span class="line">BINDIR=$&#123;APPDIR&#125;/$&#123;APPNAME&#125;/bin  # 应用执行脚本目录</span><br><span class="line"><span class="meta">#</span><span class="bash">CONF_DIR=<span class="variable">$&#123;APPDIR&#125;</span>/<span class="variable">$&#123;APPNAME&#125;</span>/conf  <span class="comment"># 应用配置文件目录</span></span></span><br><span class="line">DEPLOY_DIR=$&#123;APPDIR&#125;/$&#123;APPNAME&#125;  # 应用文件所在目录</span><br><span class="line">PARAMNUM=$#  # 脚本传入参数个数</span><br><span class="line">SCRIPTNAME=$0  # 脚本名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">######################################################################################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> usage <span class="keyword">function</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">######################################################################################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">function</span> <span class="function"><span class="title">usage</span></span>() &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     [ <span class="variable">$&#123;PARAMNUM&#125;</span> -ne 7 ] &amp;&amp; &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">         <span class="built_in">echo</span> <span class="string">"usage: <span class="variable">$0</span> start|stop|restart|publish|rollback APPDIR APPNAME TARSOURCE TARSUFFIX LOGDIR BAKDIR"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">         <span class="built_in">exit</span> 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     &#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">######################################################################################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> start <span class="keyword">function</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">######################################################################################################################</span></span></span><br><span class="line">function start() &#123;</span><br><span class="line"></span><br><span class="line">    PIDS=`ps aux | grep "$&#123;DEPLOY_DIR&#125;" |grep -v grep |awk '&#123;print $2&#125;'`</span><br><span class="line"></span><br><span class="line">    # 判断应用是否已经启动</span><br><span class="line">    if [ -n "$PIDS" ]; then</span><br><span class="line">        echo "WARN: The $&#123;APPNAME&#125; already started!"</span><br><span class="line">        echo "PID: $PIDS"</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 判断应用端口是否被占用</span><br><span class="line">    ss -tnl | grep $&#123;SERVER_PORT&#125; &amp;&amp; &#123;</span><br><span class="line">        echo -e "\033[31;1mERROR: The $&#123;APPNAME&#125; port $&#123;SERVER_PORT&#125; already used!\033[0m"</span><br><span class="line">        exit 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 执行启动脚本</span><br><span class="line">    echo -e "Starting the $&#123;APPNAME&#125; ...\c"</span><br><span class="line">    source /etc/profile &amp;&amp; cd $&#123;BINDIR&#125;</span><br><span class="line">    if echo "$&#123;APPNAME&#125;" | grep tomcat &amp;&gt;/dev/null; then</span><br><span class="line">        nohup bash startup.sh  &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">    else</span><br><span class="line">        nohup bash start.sh &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 判断应用是否启动成功</span><br><span class="line">    RUN_TIME=0   # 计算启动时间秒数</span><br><span class="line">    if echo "$&#123;APPNAME&#125;" | grep tomcat &amp;&gt;/dev/null; then</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">../logs/framework.log</span></span><br><span class="line">        while true; do</span><br><span class="line">            echo -e ".\c"  # 等同于 echo -n "."</span><br><span class="line">            sleep 1</span><br><span class="line">        </span><br><span class="line">            grep " ERROR " ../logs/framework.log &amp;&gt;/dev/null &amp;&amp; &#123;</span><br><span class="line">                echo -e "\033[31;1mERROR:应用启动失败\033[0m"</span><br><span class="line">                exit 1</span><br><span class="line">            &#125;</span><br><span class="line">            grep "FrameworkServlet 'springmvc': initialization completed" ../logs/framework.log &amp;&gt;/dev/null &amp;&amp; break</span><br><span class="line"></span><br><span class="line">            # 判断启动60s后，端口或进程不存在，表示启动失败</span><br><span class="line">            let RUN_TIME++</span><br><span class="line">            [ $&#123;RUN_TIME&#125; -gt 60 ] &amp;&amp; &#123;</span><br><span class="line">                echo -e "\033[31;1mERROR:应用启动超时\033[0m"</span><br><span class="line">                exit 1</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        done</span><br><span class="line">    else</span><br><span class="line">        while true; do</span><br><span class="line">            echo -e ".\c"  # 等同于 echo -n "."</span><br><span class="line">            sleep 1</span><br><span class="line">            # 端口和进程都存在表示启动成功</span><br><span class="line">            ss -tnl | grep $&#123;SERVER_PORT&#125; &amp;&gt;/dev/null &amp;&amp; ps aux | grep "$&#123;DEPLOY_DIR&#125;"|grep -v grep &amp;&gt;/dev/null &amp;&amp; break</span><br><span class="line"></span><br><span class="line">            # 判断启动60s后，端口或进程不存在，表示启动失败</span><br><span class="line">            let RUN_TIME++</span><br><span class="line">            [ $&#123;RUN_TIME&#125; -gt 60 ] &amp;&amp; &#123;</span><br><span class="line">                echo -e "\033[31;1mERROR:应用启动超时\033[0m"</span><br><span class="line">                exit 1</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        done</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 3s后检查端口和进程</span><br><span class="line">    sleep 3</span><br><span class="line">    ss -tnl | grep $&#123;SERVER_PORT&#125; &amp;&gt;/dev/null &amp;&amp; ps aux | grep "$&#123;DEPLOY_DIR&#125;"|grep -v grep &amp;&gt;/dev/null || &#123;</span><br><span class="line">        echo -e "\033[31;1mERROR:应用启动失败\033[0m"</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 输出启动成功信息</span><br><span class="line">    echo "OK!"</span><br><span class="line">    PIDS=`ps aux | grep "$&#123;DEPLOY_DIR&#125;" |grep -v grep | awk '&#123;print $2&#125;'`</span><br><span class="line">    echo "Start $&#123;APPNAME&#125; Success, PID: $PIDS"</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">######################################################################################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> stop <span class="keyword">function</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">######################################################################################################################</span></span></span><br><span class="line">function stop() &#123;</span><br><span class="line"></span><br><span class="line">    PIDS=`ps aux | grep "$&#123;DEPLOY_DIR&#125;" |grep -v grep |awk '&#123;print $2&#125;'`  # 输出例如： 22019 22111</span><br><span class="line"></span><br><span class="line">    # 判断应用是否已经停止</span><br><span class="line">    if [ -z "$PIDS" ]; then</span><br><span class="line">        echo "WARN: The $&#123;APPNAME&#125; does not started!"</span><br><span class="line">        return</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 停止应用进程</span><br><span class="line">    echo -e "Stopping the $&#123;APPNAME&#125; ...\c"</span><br><span class="line">    for PID in $&#123;PIDS&#125; ; do</span><br><span class="line">        kill $&#123;PID&#125; &gt; /dev/null 2&gt;&amp;1 || &#123;</span><br><span class="line">            echo -e "\033[31;1mERROR:应用停止失败\033[0m"</span><br><span class="line">        &#125;</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    # 判断应用是否停止成功，等待时间15s</span><br><span class="line">    RUN_TIME=0</span><br><span class="line">    while true; do</span><br><span class="line">        echo -e ".\c"</span><br><span class="line">        sleep 1</span><br><span class="line">        let RUN_TIME++</span><br><span class="line">        </span><br><span class="line">        PIDS_EXIST=`ps aux | grep "$&#123;DEPLOY_DIR&#125;" |grep -v grep |awk '&#123;print $2&#125;'`</span><br><span class="line">        [ -z $&#123;PIDS_EXIST&#125; ] &amp;&amp; break</span><br><span class="line"></span><br><span class="line">        # 停止进程超过15s，直接kill -9</span><br><span class="line">        [ $&#123;RUN_TIME&#125; -gt 15 ] &amp;&amp; &#123;</span><br><span class="line">        echo $&#123;PIDS_EXIST&#125;</span><br><span class="line">        for PID in $&#123;PIDS_EXIST&#125; ; do</span><br><span class="line">            kill -9 $&#123;PID&#125; &gt; /dev/null 2&gt;&amp;1 || &#123;</span><br><span class="line">                    echo -e "\033[31;1mERROR:应用停止失败\033[0m"</span><br><span class="line">                &#125;</span><br><span class="line">        done</span><br><span class="line">        break</span><br><span class="line">        &#125;</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    # 输出停止成功信息</span><br><span class="line">    echo "OK!"</span><br><span class="line">    echo "Stop $&#123;APPNAME&#125; Success, PID: $PIDS"</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">######################################################################################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> backup <span class="keyword">function</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">######################################################################################################################</span></span></span><br><span class="line">function backup() &#123;</span><br><span class="line"></span><br><span class="line">    # 判断应用目录是否存在</span><br><span class="line">    cd $&#123;APPDIR&#125;</span><br><span class="line">    if [ ! -d $&#123;APPNAME&#125; ]; then</span><br><span class="line">        echo "WARN: $&#123;DEPLOY_DIR&#125; is not existed."</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 判断是否是 tomcat 应用</span><br><span class="line">    if echo "$&#123;APPNAME&#125;" | grep tomcat &amp;&gt;/dev/null; then</span><br><span class="line">        mv $&#123;APPNAME&#125;/webapps $&#123;BAKDIR&#125;/$&#123;APPNAME&#125;_webapps_`date +%F_%T`</span><br><span class="line">    else</span><br><span class="line">        mv $&#123;APPNAME&#125; $&#123;BAKDIR&#125;/$&#123;APPNAME&#125;_`date +%F_%T`</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 判断是否备份成功</span><br><span class="line">    if [ $? -eq 0 ]; then</span><br><span class="line">        echo "Backup $&#123;APPNAME&#125; success!"</span><br><span class="line">    else</span><br><span class="line">        echo -e "\033[31;1mERROR:Backup $&#123;APPNAME&#125; failed!\033[0m"</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 日志目录检查</span></span><br><span class="line">function check_logdir() &#123;</span><br><span class="line">cd $&#123;APPDIR&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断应用日志文件夹是否存在</span></span><br><span class="line">    if [ ! -d $&#123;LOGDIR&#125;/$&#123;APPNAME&#125; ]; then</span><br><span class="line">        mkdir -p $&#123;LOGDIR&#125;/$&#123;APPNAME&#125;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 判断应用目录日志文件夹是否是软连接</span><br><span class="line">    if [ ! -L $&#123;APPNAME&#125;/logs ]; then</span><br><span class="line">        # 判断应用目录日志文件夹是否是文件夹</span><br><span class="line">        if [ -d $&#123;APPNAME&#125;/logs ]; then</span><br><span class="line">            mv $&#123;APPNAME&#125;/logs/* $&#123;LOGDIR&#125;/$&#123;APPNAME&#125;</span><br><span class="line">            rmdir $&#123;APPNAME&#125;/logs</span><br><span class="line">        fi</span><br><span class="line">        ln -s $&#123;LOGDIR&#125;/$&#123;APPNAME&#125; $&#123;APPDIR&#125;/$&#123;APPNAME&#125;/logs</span><br><span class="line">    else</span><br><span class="line">        echo "日志文件夹已经是软链接"</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置文件检查  包括redis、dubbo、jdbc</span></span><br><span class="line">function check_config() &#123;</span><br><span class="line">    CONFIG_DIR=""</span><br><span class="line">    if echo "$&#123;APPNAME&#125;" | grep tomcat &amp;&gt;/dev/null; then</span><br><span class="line">        CONFIG_DIR=$&#123;APPDIR&#125;/$&#123;APPNAME&#125;/webapps/ROOT/WEB-INF/classes</span><br><span class="line">    else</span><br><span class="line">        CONFIG_DIR=$&#123;APPDIR&#125;/$&#123;APPNAME&#125;/conf</span><br><span class="line">    fi</span><br><span class="line">    cd $CONFIG_DIR</span><br><span class="line"></span><br><span class="line">    # redis配置更新。 从外界传递数据过来，tdtp和jtkms格式为10.4.20.31,10.4.20.32,10.4.20.33;r6bzr2wev4</span><br><span class="line">    # ttsp格式为10.4.20.50:26379,10.4.20.51:26379,10.4.20.52:26379;5gziaWWQP</span><br><span class="line">    if echo "$&#123;APPNAME&#125;" | grep "^ttsp" &amp;&gt;/dev/null; then</span><br><span class="line">    REDIS_NODES=$(echo $&#123;REDIS_IPS&#125;|awk -F';' '&#123;print $1&#125;')</span><br><span class="line">    REDIS_PASSWORD=$(echo $&#123;REDIS_IPS&#125;|awk -F';' '&#123;print $2&#125;')</span><br><span class="line">    sed -i "s/\(redis.sentinel.nodes\)=.*$/\1=$&#123;REDIS_NODES&#125;/g" redis.properties</span><br><span class="line">    sed -i "s/\(redis.password\)=.*$/\1=$&#123;REDIS_PASSWORD&#125;/g" redis.properties</span><br><span class="line">    else</span><br><span class="line">        _REDIS_IPS=$(echo $&#123;REDIS_IPS&#125;|awk -F';' '&#123;print $1&#125;')</span><br><span class="line">        REDIS_PASSWORD=$(echo $&#123;REDIS_IPS&#125;|awk -F';' '&#123;print $2&#125;')</span><br><span class="line">    REDIS_IP1=$(echo $&#123;_REDIS_IPS&#125;|awk -F',' '&#123;print $1&#125;')</span><br><span class="line">    REDIS_IP2=$(echo $&#123;_REDIS_IPS&#125;|awk -F',' '&#123;print $2&#125;')</span><br><span class="line">    REDIS_IP3=$(echo $&#123;_REDIS_IPS&#125;|awk -F',' '&#123;print $3&#125;')</span><br><span class="line">    sed -i "s/\(redis.sentinel.hostname.1\)=.*$/\1=$&#123;REDIS_IP1&#125;/g" redis.properties</span><br><span class="line">    sed -i "s/\(redis.sentinel.hostname.2\)=.*$/\1=$&#123;REDIS_IP2&#125;/g" redis.properties</span><br><span class="line">    sed -i "s/\(redis.sentinel.hostname.3\)=.*$/\1=$&#123;REDIS_IP3&#125;/g" redis.properties</span><br><span class="line">        sed -i "s/\(redis.password\)=.*$/\1=$&#123;REDIS_PASSWORD&#125;/g" redis.properties</span><br><span class="line">        </span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">    # dubbo配置更新。从外界传递数据过来，格式为10.4.20.50:2181,10.4.20.51:2181,10.4.20.52:2181</span><br><span class="line">    sed -i "s/\(dubbo.zk.address\)=.*$/\1=$&#123;ZK_ADDR&#125;/g" dubbo.properties</span><br><span class="line"></span><br><span class="line">    # jdbc配置更新。从外界传递数据过来，格式为10.4.10.10:3308,bwt_ttsp,BKSqUw7ImRMYaKrQ</span><br><span class="line">    if echo "$&#123;APPNAME&#125;" | grep -v tomcat &amp;&gt;/dev/null; then</span><br><span class="line">        DB_IP_PORT=$(echo $&#123;DB_INFO&#125;|awk -F',' '&#123;print $1&#125;')</span><br><span class="line">        DB_USERNAME=$(echo $&#123;DB_INFO&#125;|awk -F',' '&#123;print $2&#125;')</span><br><span class="line">        DB_PASSWORD=$(echo $&#123;DB_INFO&#125;|awk -F',' '&#123;print $3&#125;')</span><br><span class="line">        sed -i "s@$(grep 'jdbc.url=' jdbc.properties|awk -F'/+' '&#123;print $2&#125;')@$&#123;DB_IP_PORT&#125;@g" jdbc.properties</span><br><span class="line">        sed -i "s@\(jdbc.username\)=.*\$@\1=$&#123;DB_USERNAME&#125;@g"  jdbc.properties</span><br><span class="line">        sed -i "s@\(jdbc.password\)=.*\$@\1=$&#123;DB_PASSWORD&#125;@g"  jdbc.properties</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">######################################################################################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> deploy <span class="keyword">function</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">######################################################################################################################</span></span></span><br><span class="line">function deploy() &#123;</span><br><span class="line"></span><br><span class="line">    # 解压需要更新的应用包到应用目录</span><br><span class="line">    cd $&#123;APPDIR&#125;</span><br><span class="line">    tar xf $&#123;TARSOURCE&#125;/$&#123;APPNAME&#125;$&#123;TARSUFFIX&#125; -C $&#123;APPDIR&#125;</span><br><span class="line">   </span><br><span class="line">    # 判断是否是 tomcat 应用，修改启动脚本start.sh</span><br><span class="line">    if echo "$&#123;APPNAME&#125;" | grep tomcat &amp;&gt;/dev/null; then</span><br><span class="line">        sed -i 's#\^sh ./startup.sh#nohup sh ./startup.sh \&amp;#g' $&#123;DEPLOY_DIR&#125;/bin/start.sh</span><br><span class="line">    else</span><br><span class="line">    # workid限制在1~32之间，修改workid为eth0 ip点分十进制最后一段的十进制数 % 32 +1</span><br><span class="line">    echo "work.id=$[`ifconfig eth0|sed -n 2p|awk '&#123;print $2&#125;'|awk -F'.' '&#123;print $NF&#125;'` % 32 + 1]" &gt;$&#123;APPNAME&#125;/conf/worker.properties</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 配置文件检查</span><br><span class="line">    check_config</span><br><span class="line"></span><br><span class="line">    # 日志目录检查</span><br><span class="line">    check_logdir</span><br><span class="line"></span><br><span class="line">    # 输出应用更新成功信息</span><br><span class="line">    echo "Deploy $&#123;APPNAME&#125; success!"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">######################################################################################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rollback <span class="keyword">function</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">######################################################################################################################</span></span></span><br><span class="line">function rollback() &#123;</span><br><span class="line">    cd $&#123;APPDIR&#125;</span><br><span class="line"></span><br><span class="line">    # 判断是否是 tomcat 应用</span><br><span class="line">    if echo "$&#123;APPNAME&#125;" | grep tomcat &amp;&gt;/dev/null; then</span><br><span class="line">        [ -d $&#123;APPNAME&#125; ] &amp;&amp; rm -fr $&#123;APPNAME&#125;/webapps</span><br><span class="line">        mv $&#123;BAKDIR&#125;/`ls -rht $&#123;BAKDIR&#125;|grep $&#123;APPNAME&#125;|tail -1` $&#123;APPNAME&#125;/webapps</span><br><span class="line">    else</span><br><span class="line">        [ -d $&#123;APPNAME&#125; ] &amp;&amp; rm -fr $&#123;APPNAME&#125;</span><br><span class="line">        mv $&#123;BAKDIR&#125;/`ls -rht $&#123;BAKDIR&#125;|grep $&#123;APPNAME&#125;|tail -1` $&#123;APPNAME&#125;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # 日志目录检查</span><br><span class="line">    check_logdir</span><br><span class="line"></span><br><span class="line">    # 输出应用回滚成功信息</span><br><span class="line">    echo "Rollback $&#123;APPNAME&#125; success!"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> usage</span></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">    start )</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">    stop )</span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">    restart )</span><br><span class="line">        stop</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">    publish )</span><br><span class="line">        stop</span><br><span class="line">        backup</span><br><span class="line">        deploy</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">    rollback )</span><br><span class="line">        stop</span><br><span class="line">        rollback</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scripts </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s-一个简单的例子</title>
      <link href="/post/d6261197.html"/>
      <url>/post/d6261197.html</url>
      
        <content type="html"><![CDATA[<p>使用k8s部署一个Java WEB应用。该应用运行在Tomcat里的Web App。需要启动两个容器：WEB容器和MySQL容器，并且Web App需要访问MySQL容器。</p><a id="more"></a><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>使用vmware+centos7.2。安装系统完成之后，首先关闭防火墙，selinux，安装和下载k8s相关镜像，使用kubeadm快速安装一个k8s集群</p><ul><li>宿主机IP：172.16.100.11</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@spareribs ~]# systemctl stop firewalld</span><br><span class="line">[root@spareribs ~]# systemctl disable firewalld</span><br><span class="line">[root@spareribs ~]# sed '/SELINUX/s/enforcing/disabled/g' /etc/selinux/config</span><br><span class="line">[root@spareribs ~]# init 6 </span><br><span class="line">[root@spareribs ~]# yum -y install etcd kubernetes      #会自动安装docker</span><br><span class="line">[root@spareribs ~]# systemctl restart etcd docker kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy      #需要按顺序启动</span><br></pre></td></tr></table></figure><h4 id="查看服务端口"><a href="#查看服务端口" class="headerlink" title="查看服务端口"></a>查看服务端口</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep -E "kube|etcd|docker"</span><br><span class="line">netstat -tnlp | grep -E "kube|etcd|docker"</span><br></pre></td></tr></table></figure><h3 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h3><h4 id="定义MySQL-RC文件"><a href="#定义MySQL-RC文件" class="headerlink" title="定义MySQL RC文件"></a>定义MySQL RC文件</h4><h5 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h5><ul><li>kind：资源对象类型，ReplicationController表示是一个RC</li><li>spec：RC的相关属性定义</li><li>spec.selector：表示是RC的Pod标签（Label）选择器，即监控和管理拥有这些标签的Pod实例，确保当前集群上始终有且仅有replicas个Pod实例在运行</li><li>spec.replicas：表示Pod实例运行的数量</li><li>spec.template：当Pod数量小于replicas时，RC会根据spec.template定义的Pod模板来生成新的Pod实例</li><li>spec.template.matadata.labels：指定该Pod的标签，必须匹配之前的spec.selector，否则RC每次创建的Pod都无法被selector识别，到时候会成为一个死循环</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat mysql-rc.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">'123456'</span></span><br></pre></td></tr></table></figure><h5 id="文件详解"><a href="#文件详解" class="headerlink" title="文件详解"></a>文件详解</h5><ul><li>kind：副本控制器RC</li><li>metadata.name：RC的名称，全局唯一</li><li>spec.selector.app：符合目标的Pod拥有此标签</li><li>spec.replicas：Pod副本期待数目</li><li>spec.template：根据此模板创建Pod的实例</li><li>spec.template.matadata.labels：Pod实例拥有的标签，对应RC的selector</li><li>spec.template.spec.containers：Pod实例内容器定义部分</li><li>spec.template.spec.containers.name：容器名字</li><li>spec.template.spec.containers.images：对应的docker镜像</li><li>spec.template.spec.containers.ports.containersPort：容器对应的端口号</li><li>spec.template.spec.containers.ports.env：注入到容器内的环境变量</li></ul><h4 id="发布MySQL-RC文件到集群中"><a href="#发布MySQL-RC文件到集群中" class="headerlink" title="发布MySQL RC文件到集群中"></a>发布MySQL RC文件到集群中</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s ~]# kubectl create -f mysql-rc.yaml</span><br><span class="line"> replicationcontroller "mysql" created</span><br></pre></td></tr></table></figure><h4 id="查询mysql-RC信息及mysql-Pod信息"><a href="#查询mysql-RC信息及mysql-Pod信息" class="headerlink" title="查询mysql RC信息及mysql Pod信息"></a>查询mysql RC信息及mysql Pod信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s ~]# kubectl get rc</span><br><span class="line">NAME      DESIRED   CURRENT   READY     AGE</span><br><span class="line">mysql     1         1         1         1h</span><br><span class="line"></span><br><span class="line">[root@k8s ~]# kubectl get pods</span><br><span class="line">NAME          READY     STATUS    RESTARTS   AGE</span><br><span class="line">mysql-kl3bx   1/1       Running   0          1h</span><br></pre></td></tr></table></figure><h5 id="启动Pod失败解决方案"><a href="#启动Pod失败解决方案" class="headerlink" title="启动Pod失败解决方案"></a>启动Pod失败解决方案</h5><p>发现Pod一直处于ContainCreating状态，可以使用kubectl describe pod mysql查看报错信息</p><p>image pull failed for registry.access.redhat.com/rhel7/pod-infrastructure:latest, this may be because there are no credentials on this request.  details: (open /etc/docker/certs.d/registry.access.redhat.com/redhat-ca.crt: no such file or directory)</p><ul><li>yum install <em>rhsm</em> -y     #测试不生效</li><li>使用如下方式解决</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s ~]# wget http://mirror.centos.org/centos/7/os/x86_64/Packages/python-rhsm-certificates-1.19.10-1.el7_4.x86_64.rpm</span><br><span class="line">[root@k8s ~]# rpm2cpio python-rhsm-certificates-1.19.10-1.el7_4.x86_64.rpm | cpio -iv --to-stdout ./etc/rhsm/ca/redhat-uep.pem | tee /etc/rhsm/ca/redhat-uep.pem</span><br></pre></td></tr></table></figure><p>Failed to create pod infra container: ImagePullBackOff; Skipping pod “redis-master-jj6jw_default(fec25a87-cdbe-11e7-ba32-525400cae48b)”: Back-off pulling image “registry.access.redhat.com/rhel7/pod-infrastructure:lates” </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s ~]# docker pull registry.access.redhat.com/rhel7/pod-infrastructure:latest</span><br></pre></td></tr></table></figure><ul><li>如果启动失败，需要先删除在创建</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s ~]# kubectl delete -f mysql-rc.yaml</span><br><span class="line">[root@k8s ~]# kubectl create -f mysql-rc.yaml</span><br><span class="line">[root@k8s ~]# kubectl get rc </span><br><span class="line">[root@k8s ~]# kubectl get pods</span><br></pre></td></tr></table></figure><h4 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a>查看正在运行的容器</h4><p>此时会发现MySQL Pod对应的容器还多创建了一个来自谷歌的pause容器，这个就是Pod的根容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s ~]# docker ps | grep mysql</span><br><span class="line">3488f858c29a        mysql                                                        "docker-entrypoint..."   About an hour ago   Up About an hour                        k8s_mysql.f6601b53_mysql-kl3bx_default_c3374963-b0c6-11e9-aca2-000c294094ee_89d776ee</span><br><span class="line">b5ac50286749        registry.access.redhat.com/rhel7/pod-infrastructure:latest   "/usr/bin/pod"           About an hour ago   Up About an hour                        k8s_POD.1d520ba5_mysql-kl3bx_default_c3374963-b0c6-11e9-aca2-000c294094ee_85e02244</span><br></pre></td></tr></table></figure><h4 id="定义一个Service文件"><a href="#定义一个Service文件" class="headerlink" title="定义一个Service文件"></a>定义一个Service文件</h4><h5 id="参数解释-1"><a href="#参数解释-1" class="headerlink" title="参数解释"></a>参数解释</h5><ul><li>metadata：是Service的服务名</li><li>spec.ports.port：定义了Service的虚拟端口</li><li>spec.selector：确定了那些Pod副本</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat mysql-svc.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure><h5 id="文件详解-1"><a href="#文件详解-1" class="headerlink" title="文件详解"></a>文件详解</h5><ul><li>kind：标明k8s Services</li><li>matadata.name：Service的全局唯一名称</li><li>spec.ports.port：Service提供服务的端口号</li><li>spec.selector：Service对应的Pod拥有这里定义的标签</li></ul><h4 id="发布MySQL-SVC文件到集群中"><a href="#发布MySQL-SVC文件到集群中" class="headerlink" title="发布MySQL SVC文件到集群中"></a>发布MySQL SVC文件到集群中</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s ~]# kubectl create -f mysql-svc.yaml</span><br><span class="line">service "mysql" created</span><br></pre></td></tr></table></figure><h4 id="查询svc文件信息"><a href="#查询svc文件信息" class="headerlink" title="查询svc文件信息"></a>查询svc文件信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s ~]# kubectl get svc</span><br><span class="line">NAME         CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">kubernetes   10.254.0.1      &lt;none&gt;        443/TCP          2h</span><br><span class="line">mysql        10.254.202.48   &lt;none&gt;        3306/TCP         1h</span><br></pre></td></tr></table></figure><h3 id="启动Tomcat应用"><a href="#启动Tomcat应用" class="headerlink" title="启动Tomcat应用"></a>启动Tomcat应用</h3><h4 id="定义Tomcat-RC文件"><a href="#定义Tomcat-RC文件" class="headerlink" title="定义Tomcat RC文件"></a>定义Tomcat RC文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat myweb-rc.yaml </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line"><span class="attr">  name:</span> <span class="string">myweb</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  selector:</span> </span><br><span class="line"><span class="attr">    app:</span> <span class="string">myweb</span></span><br><span class="line"><span class="attr">  template:</span> </span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span> </span><br><span class="line"><span class="attr">        app:</span> <span class="string">myweb</span></span><br><span class="line"><span class="attr">    spec:</span> </span><br><span class="line"><span class="attr">      containers:</span> </span><br><span class="line"><span class="attr">        - name:</span> <span class="string">myweb</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">kubeguide/tomcat-app:v1</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">          - containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">          env:</span> </span><br><span class="line"><span class="attr">          - name:</span> <span class="string">MYSQL_SERVICE_HOST</span></span><br><span class="line"><span class="attr">            value:</span> <span class="number">10.254</span><span class="number">.202</span><span class="number">.48</span></span><br></pre></td></tr></table></figure><h4 id="发布Tomcat-RC文件到集群中"><a href="#发布Tomcat-RC文件到集群中" class="headerlink" title="发布Tomcat RC文件到集群中"></a>发布Tomcat RC文件到集群中</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s ~]# kubectl create -f myweb-rc.yaml</span><br><span class="line">replicationcontroller "myweb" created</span><br></pre></td></tr></table></figure><h4 id="查询Tomcat-RC信息及Pod信息"><a href="#查询Tomcat-RC信息及Pod信息" class="headerlink" title="查询Tomcat RC信息及Pod信息"></a>查询Tomcat RC信息及Pod信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s k8s]# kubectl get rc    </span><br><span class="line">NAME      DESIRED   CURRENT   READY     AGE</span><br><span class="line">mysql     1         1         1         1h</span><br><span class="line">myweb     2         2         2         1h</span><br><span class="line"></span><br><span class="line">[root@k8s k8s]# kubectl get pod</span><br><span class="line">NAME          READY     STATUS    RESTARTS   AGE</span><br><span class="line">mysql-kl3bx   1/1       Running   0          1h</span><br><span class="line">myweb-djvx5   1/1       Running   0          1h</span><br><span class="line">myweb-jcmz8   1/1       Running   0          1h</span><br></pre></td></tr></table></figure><h4 id="定义一个Service文件-1"><a href="#定义一个Service文件-1" class="headerlink" title="定义一个Service文件"></a>定义一个Service文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat myweb-svc.yaml </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">myweb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">30001</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">myweb</span></span><br></pre></td></tr></table></figure><h4 id="发布Tomcat-SVC文件到集群中"><a href="#发布Tomcat-SVC文件到集群中" class="headerlink" title="发布Tomcat SVC文件到集群中"></a>发布Tomcat SVC文件到集群中</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s ~]# kubectl create -f myweb-svc.yaml</span><br><span class="line">service "myweb" created</span><br></pre></td></tr></table></figure><h4 id="查看Tomcat-SVC信息"><a href="#查看Tomcat-SVC信息" class="headerlink" title="查看Tomcat SVC信息"></a>查看Tomcat SVC信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s k8s]# kubectl get svc</span><br><span class="line">NAME         CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">kubernetes   10.254.0.1      &lt;none&gt;        443/TCP          2h</span><br><span class="line">mysql        10.254.202.48   &lt;none&gt;        3306/TCP         1h</span><br><span class="line">myweb        10.254.128.72   &lt;nodes&gt;       8080:30001/TCP   1h</span><br><span class="line">[root@k8s k8s]#</span><br></pre></td></tr></table></figure><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><ul><li>使用curl 10.254.128.72 8080可以正常访问tomat</li><li>使用curl 172.16.100.11 30001却访问不了</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>使用该命令即可解决问题</span><br><span class="line">[root@k8s k8s]# iptables -P FORWARD ACCEPT</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql设置权限</title>
      <link href="/post/41380.html"/>
      <url>/post/41380.html</url>
      
        <content type="html"><![CDATA[<p>MySQL是由列级别权限存在的。实现了限制用户对表上特定列的访问权限。一般都是实现对表级别不具备访问权限，但是对某些列有访问权限。当然也存在其他情形。</p><a id="more"></a><h3 id="使用物理工具备份可能需要的权限"><a href="#使用物理工具备份可能需要的权限" class="headerlink" title="使用物理工具备份可能需要的权限"></a>使用物理工具备份可能需要的权限</h3><ul><li>物理备份工具：innobackupex，MySQL Enterprise Backup等等 </li><li>权限lock tables  作用：备份时锁表，产生一致性备份</li><li>权限process  作用：show processlist,show engine innodb status,查看线程，查看引擎状态</li><li>权限reload  作用：flush table/host/logs/tables/status/threads/refresh/reload，所有的flush操作。用于锁表，切割日志，更新权限</li><li>权限：replication client 作用：show master/slave status;查看事务日志执行状态与位置 show binary logs；查看当前保存的事务日志列表与文件大小</li><li>权限：super 作用：super权限很多很多，但是没有CURD（增删改查权限），这里点到为止说一下和备份相关的起停复制线程，切换主库位置，更改复制过滤条件，清理二进制日志，赋予账户视图与存储过程的DEFINER权限，创建链接服务器（类似于MSSQL的订阅服务器），关闭线程，不受最大连接线程数限制的VIP连接通道，阻断刷新线程的命令，不受离线模式影响，</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant lock tables,reload,process,replication client,super,select,event,trigger,show view on *.* to bak@'192.168.%';</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="使用逻辑备份工具可能需要的权限"><a href="#使用逻辑备份工具可能需要的权限" class="headerlink" title="使用逻辑备份工具可能需要的权限"></a>使用逻辑备份工具可能需要的权限</h3><ul><li>逻辑备份工具：mysqldump,mysqlpump,mydumper等等</li><li>权限SELECT  作用：查询表中数据</li><li>权限SHOW VIEW  作用：查看创建视图的语句 </li><li>权限TRIGGER  作用：备份触发器    </li><li>权限EVENT  作用：备份事件（定时任务） </li><li>权限lock tables  作用：备份时锁表，产生一致性备份    </li><li>权限reload  作用：show processlist,show engine innodb status,查看线程，查看引擎状态</li><li>权限replication client  作用：show master/slave status;查看事务日志执行状态与位置 show binary logs；查看当前保存的事务日志列表与文件大小</li><li>权限：super  作用：关闭线程，不受最大连接线程数限制的VIP连接通道，阻断刷新线程的命令，不受离线模式影响</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant lock tables,reload,process,replication client,super,select,event,trigger,show view on *.* to bak@'192.168.%';</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>备注：</p><ul><li>super权限可以防止因为线程满，备份任务无法连接数据库而导致的备份翻车。且阻断刷新线程也是很重要</li><li>innobackupex主要以物理文件和备份缓存文件的方式进行，所以不需要show权限与select权限<br>逻辑备份的基本原理就是数据全部读取，必须select与show权限，查看表定义的权限由select权限提供</li><li>login-path的以port+host的方式保存时，会在用户目录下生成.login.cnf文件，拷贝到网络互通的其他主机上，仍然可以登陆，方便的同时也留下祸根</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker实战</title>
      <link href="/post/11988.html"/>
      <url>/post/11988.html</url>
      
        <content type="html"><![CDATA[<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的linux机器上，也可以实现虚拟化。Docker虚拟化有三个概念需要理解，分别<strong>镜像、容器、仓库</strong>。</p><a id="more"></a><p>镜像：Docker的镜像其实就是模板，跟我们常见的ISO镜像类似，是一个样板。Docker镜像作为docker中最基本的概念，一个完整的Docker镜像可以支撑一个Docker容器的运行，在Docker容器运行过程中主要提供文件系统数据支撑。有以下几个特性：<br>    - 镜像分层，每个镜像都由一个或多个镜像层组成；<br>    - 可通过在某个镜像加上一定的镜像层得到新镜像（此过程可通过编写dockerfile或基于容器Commit实现）<br>    - 每个镜像层拥有唯一镜像ID<br>    - 镜像在存储和使用时共享相同的镜像层（根据ID），所以在pull镜像时，已有的镜像层会自动跳过下载；<br>    - 每个镜像层都是只读，即使启动成容器，也无法对其真正的修改，修改只会作用于最上层的容器层；<br>容器：使用镜像常见的应用或者系统，我们称之为一个容器。（通俗来说，镜像运行起来叫容器）<br>仓库：仓库是存放镜像的地方，分为公开仓库（Public）和私有仓库（Private）两种形式。</p><p>注：以下环境全部基于Centos7.*</p><h3 id="安装docker引擎"><a href="#安装docker引擎" class="headerlink" title="安装docker引擎"></a>安装docker引擎</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docekr</span><br><span class="line">sed -i s/SELINUX/enforcing/disabled/g /etc/selinux/conf</span><br><span class="line">setenforce 0</span><br><span class="line">systemctl disable firewald </span><br><span class="line">systemctl stop firewalld</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">docker  version #查看版本</span><br><span class="line">docker  search centos#搜索可用docker镜像</span><br><span class="line">docker  images 查看当前docker所有镜像</span><br><span class="line">docker  pull  centos #下载镜像</span><br><span class="line">cat   centos.tar | docker import  -  centos6_newname  #Docker导入镜像</span><br><span class="line">docker  export  容器_id  &gt; cenos6.tar  #Docker导出镜像</span><br><span class="line">docker  run  centos  echo "hello word"#在docker容器中运行hello world!</span><br><span class="line">docker  run  centos  yum install ntpdate#在容器中安装ntpdate的程序</span><br><span class="line">docker  ps -l 命令获得最后一个容器的id，docker   ps  -a查看所有的容器。</span><br><span class="line">运行docker commit 提交刚修改的容器，例如：</span><br><span class="line">docker  commit  2313132  centos:v1</span><br><span class="line">docker run -i -t -d centos /bin/bash 在容器里启动一个/bin/bash shell环境，可以登录进入操作，其中-t tty，表示打开一个终端的意思，-i interactive，表示可以交互输入,-d表示在后台启动，以daemon方式启动。  </span><br><span class="line">docker  run  -d  centos:v1  /bin/bash </span><br><span class="line">Docker  stop  id 关闭容器</span><br><span class="line">Docker  start  id 启动某个容器</span><br><span class="line">docker  rm  id 删除容器，docker  rmi  images删除镜像</span><br><span class="line">docker  run  -d  -p  80:80  -p 8022:22   centos:v2，解析：-p指定容器启动后docker上运行的端口映射及容器里运行的端口，80:80，第一个80表示docker系统上的80，第二个80表示docker虚拟机里面的端口。用户默认访问本机80端口，自动映射到容器里面的80端口。</span><br><span class="line">docker  exec   -it  id  /bin/bash 进入容器终端</span><br><span class="line">docker  exec  id ifconfig查看容器的IP地址；</span><br><span class="line">Docker  inspect id |grep -i ipaddr查看容器IP地址；</span><br><span class="line">Docker  exec  df -h查看容器的磁盘分区信息</span><br></pre></td></tr></table></figure><h3 id="docker和docker-ce修改国内镜像源"><a href="#docker和docker-ce修改国内镜像源" class="headerlink" title="docker和docker-ce修改国内镜像源"></a>docker和docker-ce修改国内镜像源</h3><ul><li><p>docker配置国内镜像源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/docker/daemon.json </span><br><span class="line">&#123; </span><br><span class="line">"registry-mirrors": \["https://registry.docker-cn.com"\] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>docker-ce配置国内镜像源<br>编辑docker-ce启动脚本/usr/lib/systemd/system/docker.service，在ExecStart=/usr/bin/dockerd后添加docker仓库源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd --registry-mirror=https://jxus37ad.mirror.aliyuncs.com</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li></ul><h3 id="docker网络模式"><a href="#docker网络模式" class="headerlink" title="docker网络模式"></a>docker网络模式</h3><p>基于docker run 创建Docker容器时，可以使用–net选项制定容器的网络模式，Docker默认四种网络模式：host、container、none、bridge（–net=host, –net=container ,  –net=none –net=bridge）</p><ul><li>host模式：Docker容器运行时，会默认分配独立的network Namespace，用于隔离子系统，基于host模式时，容器将不会获得独立的Network Namespace。将与宿主机共用一个Netework Namespace，不会配置IP地址，而是使用宿主机的IP地址</li><li>container模式：新创建的容器和已经存在的容器共享一个Network Namespace，而不是和宿主机共享，依赖与第一个存在的容器</li><li>none模式：容器拥有自己的Network Namespace，但是不对Docker 容器进行任何网路配置，也就是说该Docker容器没有网卡、IP、路由等信息，需要手工为Docker容器添加网卡、配置IP等，典型Pipework工具为Docker容器指定IP等信息；</li><li>bridge模式：Bridge模式是Docker默认的网络模式，该模式会为每一个容器分配Network Namespace、设置IP、路由等配置，默认会将Docker容器连接到一个虚拟网桥交换机Docker0上。</li></ul><ul><li>首先宿主机上创建一对虚拟网卡veth pair设备，veth设备总是成对出现的，组成了一个数据的通道，数据从一个设备进入，就会从另一个设备出来，veth设备常用来连接两个网络设备。</li><li>Docker将veth pair设备的一端放在新创建的容器中，并命名为eth0，然后将另一端放在宿主机中，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中，可以通过brctl show命令查看。</li><li>从docker0子网中分配一个IP给容器使用，并设置docker0的IP地址为容器的默认网关。</li><li>此时容器IP与宿主机能够通信，宿主机也可以访问容器中的IP地址，在Bridge模式下，连在同一网桥上的容器之间可以相互通信，同时容器也可以访问外网，但是其他物理机不能访问docker容器IP，需要通过NAT将容器IP的port映射为宿主机的IP和port。</li></ul><h3 id="docker配置bridge网络"><a href="#docker配置bridge网络" class="headerlink" title="docker配置bridge网络"></a>docker配置bridge网络</h3><p>Centos7下docker使用桥接模式非常简单，当然我们借助 大牛 写的pipework工具实现</p><ul><li>安装pipework工具</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jpetazzo/pipework /usr/local/pipework</span><br><span class="line">cp ~/pipework/pipework /usr/local/bin/</span><br></pre></td></tr></table></figure><ul><li>启动一个docker容器<ul><li>注意一定要加上–net=none（分配网络空间但不配置IP地址）</li><li>docker run -itd –net=none nginx          #启动一个Nginx容器</li></ul></li><li>使用pipework配置桥接网络<ul><li>docker ps -a             #查看刚刚启动的Nginx的容器ID</li><li># “677dd7beac02”为Nginx的容器ID，以此为IP地址、掩码、网关。注意网关一定是docker宿主机的IP地址</li><li>pipework br0 677dd7beac02 192.168.2.103/24@192.168.2.253</li></ul></li></ul><h3 id="Dockerfile实战"><a href="#Dockerfile实战" class="headerlink" title="Dockerfile实战"></a>Dockerfile实战</h3><p>由于Docker官网公共仓库镜像大多不完整，无法真正满足企业的生产环境系统，此时需要我们自行定制镜像或者重新打包镜像。<br>Docker镜像制作是管理员的必备工作之一，Docker镜像制作的方法主要有两种，制作方法如下：<br>Docker commit|export将新容器提交至Images列表；<br>编写Dockerfile，bulid新的镜像至镜像列表；</p><p>本例，基础镜像采用 docker.io/lemonbar/centos6-ssh</p><ul><li>运行一个基础镜像来启动一个容器，修改相应配置，并使用docker commit提交</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd docker.io/lemonbar/centos6-ssh       #启动镜像</span><br><span class="line">docker exec -it 44b3fb717f9f /bin/bash          #进去刚启动的容器中</span><br><span class="line">rm /etc/yum.repos.d/*.repo;wget -c http://mirrors.aliyun.com/repo/Centos-6.repo  # 在容器中中执行，更换阿里云镜像源</span><br><span class="line">docker commit 44b3fb717f9f centos-test:v1        #在宿主机上提交</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">- 根据需求编写Dockerfile文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##生成nginx镜像</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置基本镜像</span></span><br><span class="line">FROM centos-test:v1</span><br><span class="line"><span class="meta">#</span><span class="bash">作者信息</span></span><br><span class="line">MAINTAINER MINT</span><br><span class="line"><span class="meta">#</span><span class="bash">设置工作目录</span></span><br><span class="line">WORKDIR /root</span><br><span class="line">RUN cp /etc/skel/.bash* /root</span><br><span class="line">RUN echo '123456'|passwd --stdin root</span><br><span class="line">RUN rpm --rebuilddb &amp;&amp; yum -y install tar vim wget gcc gcc-c++ make pcre pcre-devel zlib zlib-devel gzip* bzip* net-tools ntpdate</span><br><span class="line">RUN wget -c http://nginx.org/download/nginx-1.12.2.tar.gz;tar -xf nginx-1.12.2.tar.gz;cd nginx-1.12.2;./configure --prefix=/usr/local/nginx &amp;&amp; make &amp;&amp; make install</span><br><span class="line"><span class="meta">#</span><span class="bash">暴露端口</span></span><br><span class="line">EXPOSE 22 80</span><br><span class="line"><span class="meta">#</span><span class="bash">设置运行镜像时的默认命令</span></span><br><span class="line">CMD /usr/local/nginx/sbin/nginx; /usr/sbin/sshd -D</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##生成redis镜像</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置基本镜像</span></span><br><span class="line">FROM centos-test:v2</span><br><span class="line"><span class="meta">#</span><span class="bash">作者信息</span></span><br><span class="line">MAINTAINER  MINT</span><br><span class="line"><span class="meta">#</span><span class="bash">设置工作目录</span></span><br><span class="line">WORKDIR /root</span><br><span class="line">RUN cp /etc/skel/.bash* /root</span><br><span class="line">RUN echo '123456'|passwd --stdin root</span><br><span class="line">RUN rpm --rebuilddb &amp;&amp; yum -y install wget tar gcc gcc-c++ make</span><br><span class="line">RUN tar -xf redis-4.0.10.tar.gz;cd redis-4.0.10;make PREFIX=/usr/local/redis install</span><br><span class="line"><span class="meta">#</span><span class="bash">暴露端口</span></span><br><span class="line">EXPOSE 22 6379</span><br><span class="line"><span class="meta">#</span><span class="bash">设置运行镜像时的默认命令</span></span><br><span class="line">CMD /usr/local/redis/bin/redis-server; /usr/sbin/sshd -D</span><br></pre></td></tr></table></figure><ul><li>使用docker build 生成新镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t centos-nginx .               </span><br><span class="line">docker build -t centos-redis -f /root/Docker-redis         #指定redis的dockerfile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mycat+MySQL读写分离</title>
      <link href="/post/35152.html"/>
      <url>/post/35152.html</url>
      
        <content type="html"><![CDATA[<p>随着互联网时代的发展，传统的数据库技术日趋成熟、计算机网络技术的飞速发展和应用范围的扩充，数据库应用已经普遍建立于计算机网络之上。此时集中式数据库系统表现出它的不足：</p><a id="more"></a><ul><li>集中式处理，势必造成性能瓶颈；</li><li>应用程序集中在一台计算机上运行，一旦该计算机发生故障，则整个系统受到影响，可靠性不高；</li><li>集中式处理引起系统的规模和配置都不够灵活，系统的可扩充性差。</li></ul><p>在这种形势下，集中式数据库将向分布式数据库发展。</p><h3 id="MyCAT发展历程"><a href="#MyCAT发展历程" class="headerlink" title="MyCAT发展历程"></a>MyCAT发展历程</h3><hr><p>MyCAT的诞生，要从其前身Amoeba和Cobar说起，Amoeba（变形虫）项目，该开源框架于2008年开始发布一款 Amoeba for Mysql软件。这个软件致力于MySQL的分布式数据库前端代理层，它主要在应用层访问MySQL的时候充当SQL路由功能，专注于分布式数据库代理层（Database Proxy）开发。</p><p>座落与 Client、DB Server(s)之间，对客户端透明。具有负载均衡、高可用性、SQL过滤、读写分离、可路由相关的到目标数据库、可并发请求多台数据库合并结果。 通过Amoeba你能够完成多数据源的高可用、负载均衡、数据切片的功能，目前Amoeba已在很多企业的生产线上面使用。</p><p>阿里巴巴于2012年6月19日，正式对外开源的数据库中间件Cobar，前身是早已经开源的Amoeba，不过其作者陈思儒离职去盛大之后，阿里巴巴内部考虑到Amoeba的稳定性、性能和功能支持，以及其他因素，重新设立了一个项目组并且更换名称为Cobar。[Cobar](<a href="https://github.com/alibaba/cobar&quot;" target="_blank" rel="noopener">https://github.com/alibaba/cobar&quot;</a> \t “_blank) 是由 Alibaba 开源的 MySQL 分布式处理中间件，它可以在分布式的环境下看上去像传统数据库一样提供海量数据服务。</p><p>Cobar自诞生之日起， 就受到广大程序员的追捧，但是自2013年后，几乎没有后续更新。在此情况下，MyCAT应运而生，它基于阿里开源的Cobar产品而研发，Cobar的稳定性、可靠性、优秀的架构和性能，以及众多成熟的使用案例使得MyCAT一开始就拥有一个很好的起点，站在巨人的肩膀上，MyCAT能看到更远。目前MyCAT的最新发布版本为1.6版本。</p><p>从定义和分类来看，MyCAT是一个开源的分布式数据库系统，是一个实现了MySQL协议的Server，前端用户可以把它看做是一个数据库代理中间件，基于MySQL客户端工具和命令行访问，其后端可以用MySQL原生（Native）协议与多个MySQL服务器通信，也可以用JDBC协议与大多数主流数据库服务器通信，其核心功能是分库分表，即将一个大表水平分割为N个小表，存储在后端MySQL服务器里或者其他数据库里。</p><p>Mycat发展到目前版本，已经不在是一个单纯的MySQL代理，它的后端可以支持MySQL、SQL Server、Oracle、DB2、PostgreSQL等主流数据库，也支持MongoDB这种新型NOSQL方式的存储，未来还会支持更多类型的存储。</p><p>最终用户看来，无论是那种存储方式，在Mycat里，都是一个传统的数据库表，支持标准的SQL语句进行数据的操作，对前端业务系统来说，可以大幅度降低开发难度，提升开发速度，在测试阶段，可以将一表定义为任何一种Mycat支持的存储方式，比如MySQL的MyASM表、内存表、或者MongoDB、LeveIDB以及号称是世界上最快的内存数据库MemSQL上。</p><h4 id="DBA眼中的MyCAT"><a href="#DBA眼中的MyCAT" class="headerlink" title="DBA眼中的MyCAT"></a><strong>DBA眼中的MyCAT</strong></h4><p>Mycat就是MySQL Server，而Mycat后面连接的MySQL Server，就好象是MySQL的存储引擎,如InnoDB，MyISAM等，因此，Mycat本身并不存储数据，数据是在后端的MySQL上存储的，因此数据可靠性以及事务等都是MySQL保证的，简单的说，Mycat就是MySQL最佳伴侣，它在一定程度上让MySQL拥有了能跟Oracle PK的能力。</p><h4 id="软件工程师眼中的MyCAT"><a href="#软件工程师眼中的MyCAT" class="headerlink" title="软件工程师眼中的MyCAT"></a><strong>软件工程师眼中的MyCAT</strong></h4><p>Mycat就是一个近似等于MySQL的数据库服务器，你可以用连接MySQL的方式去连接Mycat（除了端口不同，默认的Mycat端口是8066而非MySQL的3306，因此需要在连接字符串上增加端口信息），大多数情况下，可以用你熟悉的对象映射框架使用Mycat，但建议对于分片表，尽量使用基础的SQL语句，因为这样能达到最佳性能，特别是几千万甚至几百亿条记录的情况下。</p><h4 id="架构师眼中的MyCAT"><a href="#架构师眼中的MyCAT" class="headerlink" title="架构师眼中的MyCAT"></a><strong>架构师眼中的MyCAT</strong></h4><p>Mycat是一个强大的数据库中间件，不仅仅可以用作读写分离、以及分表分库、容灾备份，而且可以用于多租户应用开发、云平台基础设施、让你的架构具备很强的适应性和灵活性，借助于即将发布的Mycat智能优化模块，系统的数据访问瓶颈和热点一目了然，根据这些统计分析数据，你可以自动或手工调整后端存储，将不同的表映射到不同存储引擎上，而整个应用的代码一行也不用改变。</p><h3 id="MyCAT中间件原理"><a href="#MyCAT中间件原理" class="headerlink" title="MyCAT中间件原理"></a>MyCAT中间件原理</h3><hr><p>Mycat的原理中最重要的一个动词是“拦截”，它拦截了用户发送过来的SQL语句，首先对SQL语句做了一些特定的分析：如分片分析、路由分析、读写分离分析、缓存分析等，然后将此SQL发往后端的真实数据库，并将返回的结果做适当的处理，最终再返回给用户。</p><p>Orders表被分为三个分片datanode（简称dn)，这三个分片是分布在两台MySQL Server上(DataHost)，即datanode=database@datahost方式，因此你可以用一台到N台服务器来分片，分片规则为（sharding rule)典型的字符串枚举分片规则，一个规则的定义是分片字段（sharding column)+分片函数(rule function)，这里的分片字段为rov而分片函数为字符串枚举方式。</p><p>当Mycat收到一个SQL时，会先解析这个SQL，查找涉及到的表，然后看此表的定义，如果有分片规则，则获取到SQL里分片字段的值，并匹配分片函数，得到该QL对应的分片列表，然后将SQL发往这些分片去执行，最后收集和处理所有分片返回的结果数据，并输出到客户端。</p><p>以select * from Orders where prov=?语句为例，查到prov=wuhan，按照分片函数，wuhan返回dn1，于是SQL就发给了MySQL1，去取DB1上的查询结果，并返回给用户。</p><p>如果上述SQL改为elect * from Orders where prov in (‘wuhan’,‘beijing’)，那么，SQL就会发给ySQL1与MySQL2去执行，然后结果集合并后输出给用户。</p><p>通常业务中我们的SQL会有Order By 以及Limit翻页语法，此时就涉及到结果集在Mycat端的二次处理，这部分的代码也比较复杂，而最复杂的则属两个表的Jion问题，为此，Mycat提出了创新性的ER分片、全局表、HBT（Human Brain Tech)人工智能的Catlet、以及结合Storm/Spark引擎等十八般武艺的解决办法，从而成为目前业界最强大的方案，这就是开源的力量。</p><h3 id="MyCAT应用场景"><a href="#MyCAT应用场景" class="headerlink" title="MyCAT应用场景"></a>MyCAT应用场景</h3><hr><p>Mycat发展到现在，适用的场景已经很丰富，而且不断有新用户给出新的创新性的方案，以下是几个典型的应用场景：</p><ul><li>单纯的读写分离，此时配置最为简单，支持读写分离，主从切换；</li><li>分表分库，对于超过1000万的表进行分片，最大支持1000亿的单表分片；</li><li>多租户应用，每个应用一个库，但应用程序只连接Mycat,从而不改造程序本身，实现多租户化；</li><li>报表系统，借助于Mycat的分表能力，处理大规模报表的统计；</li><li>代替Hbase,分析大数据；</li><li>作为海量数据实时查询的一种简单有效方案，比如 1〇〇亿条频繁查询的记录需要在3秒内查询出来结果，除了基于主键的查询，还可能存在范围查询或其他属性查询，此时Mycat可能是最简单有效的选择；</li><li>单纯的MyCAT读写分离，配置最为简单，支持读写分离，主从切换分表分库，对于超过1000万的表进行分片，最大支持1000亿的单表分片；</li><li>多租户应用，每个应用一个库，但应用程序只连接Mycat，从而不改造程序本身，实现多租户化；</li><li>报表系统，借助于Mycat的分表能力，处理大规模报表的统计替代Hbase，分析大数据，作为海量数据实时查询的一种简单有效方案，比如100亿条频繁查询的记录需要在3秒内查询出来结果，除了基于主键的查询，还可能存在范围查询或其他属性查询，此时Mycat可能是最简单有效的选择  。</li></ul><h2 id="Mycat概念详解"><a href="#Mycat概念详解" class="headerlink" title="Mycat概念详解"></a>Mycat概念详解</h2><p>Mycat是一个开源的分布式数据库系统，但是由于真正的数据库需要存储引擎，而Mycat并没有存储引擎，所以并不是完全意义的分布式数据库系统。</p><h4 id="MyCAT数据库中间件"><a href="#MyCAT数据库中间件" class="headerlink" title="MyCAT数据库中间件"></a>MyCAT数据库中间件</h4><p>那么Mycat是什么？Mycat是数据库中间件，就是介于数据库与应用之间，进行数据处理与交互的中间服务。对数据进行分片处理之后，从原有的一个库，被切分为多个分片数据库，所有的分片数据库集群构成了整个完整的数据库存储。</p><p>数据被分到多个分片数据库后，应用如果需要读取数据，就要需要处理多个数据源的数据。如果没有数据库中间件，那么应用将直接面对分片集群，数据源切换、事务处理、数据聚合都需要应用直接处理，原本该是专注于业务的应用，将会花大量的工作来处理分片后的问题，最重要的是每个应用处理将是完全的重复造轮子。</p><p>加入数据库中间件之后，应用只需要集中与业务处理，大量的通用的数据聚合，事务，数据源切换都由中间件来处理，中间件的性能与处理能力将直接决定应用的读写性能，所以一款好的数据库中间件至关重要。</p><h4 id="MyCAT逻辑库-schema"><a href="#MyCAT逻辑库-schema" class="headerlink" title="MyCAT逻辑库(schema)"></a>MyCAT逻辑库(schema)</h4><p>通常对实际应用来说，并不需要知道中间件的存在，开发人员只需要知道数据库的概念，所以数据库中间件可以被看做是一个或多个数据库集群构成的逻辑库。</p><p>在云计算时代，数据库中间件可以以多租户的形式给一个或多个应用提供服务，每个应用访问的可能是一个独立或者是共享的物理库，常见的如阿里云数据库服务器RDS。</p><h4 id="MyCAT逻辑表（Table"><a href="#MyCAT逻辑表（Table" class="headerlink" title="MyCAT逻辑表（Table)"></a>MyCAT逻辑表（Table)</h4><p>MyCAT既然有逻辑库，那么就会有逻辑表，分布式数据库中，对应用来说，读写数据的表就是逻辑表。逻辑表，可 以是数据切分后，分布在一个或多个分片库中，也可以不做数据切分，不分片，只有一个表构成。</p><h4 id="MyCAT分片表"><a href="#MyCAT分片表" class="headerlink" title="MyCAT分片表"></a>MyCAT分片表</h4><p>MyCAT分片表，是指那些原有的很大数据的表，需要切分到多个数据库的表，这样，每个分片都有一部分数据，所有分片构成了完整的数据；</p><p>例如在Mycat配置中的t_node就属于分片表，数据按照规则被分到dn1,dn2两个分片节点(dataNode) 上。</p><h4 id="MyCAT非分片表"><a href="#MyCAT非分片表" class="headerlink" title="MyCAT非分片表"></a>MyCAT非分片表</h4><p>如果一个数据库中并不是所有的表都很大，某些表是可以不用进行切分的，非分片是相对分片表来说的，就是那些不需要进行数据切分的表。如下配置中t_node ,只存在于分片节点（dataNode ) dn1上。</p><h4 id="MyCAT-ER表"><a href="#MyCAT-ER表" class="headerlink" title="MyCAT ER表"></a>MyCAT ER表</h4><p>关系型数据库是基于实体关系模型（Entity-Relationship Model)之上，通过其描述了真实世界中事物与关 系，Mycat中的ER表即是来源于此，根据这一思路，提出了基于E-R关系的数捤分片策略，子表的记录与所关 联的父表记录存放在同一个数据分片上，即子表依赖于父表，通过表分组（Table Group )保证数据Join不会跨库操作。</p><p>表分组（Table Group )是解决跨分片数据join的一种很好的思路，也是数据切分规划的重要一条规则。</p><h4 id="MyCAT全局表"><a href="#MyCAT全局表" class="headerlink" title="MyCAT全局表"></a>MyCAT全局表</h4><p>一个真实的业务系统中，往往存在大量的类似字典表的表，这些表基本上很少变动，字典表具有以下几个特性：</p><ul><li>变动不频繁；</li><li>数据量总体变化不大；</li><li>数据规模不大，很少有超过数十万条记录；</li></ul><h4 id="分片节点-dataNode"><a href="#分片节点-dataNode" class="headerlink" title="分片节点(dataNode)"></a>分片节点(dataNode)</h4><p>MyCAT数据切分后，一个大表被分到不同的分片数据库上面，每个表分片所在的数据库就是分片节点 (dataNode )。</p><h4 id="节点主机-dataHost"><a href="#节点主机-dataHost" class="headerlink" title="节点主机(dataHost)"></a>节点主机(dataHost)</h4><p>MyCAT数据切分后，每个分片节点（dataNode )不一定都会独占一台机器，同一机器上面可以有多个分片数据库， 这样一个或多个分片节点（dataNode )所在的机器就是节点主机（dataHost),为了规避单节点主机并发数限 制，尽量将读写压力高的分片节点（dataNode )均衡的放在不同的节点主机（dataHost )。</p><h4 id="分片规则-rule"><a href="#分片规则-rule" class="headerlink" title="分片规则(rule)"></a>分片规则(rule)</h4><p>MyCAT数据切分，1个大表被分成若干个分片表，就需要一定的规则，这样按照某种业务规则把数据分到 某个分片的规则就是分片规则，数据切分选择合适的分片规则非常重要，将极大的避免后续数据处理的难度。</p><h4 id="MyCAT多租户"><a href="#MyCAT多租户" class="headerlink" title="MyCAT多租户"></a>MyCAT多租户</h4><p>多租户技术或称多重租赁技术，是一种软件架构技术，它是在探讨与实现如何于多用户的环境下共用相同的系统或程序组件，并且仍可确保各用户间数据的隔离性。</p><p>在云计算时代，多租户技术在共用的数据中心以单一系统架构与服务提供多数客户端相同甚至可定制化的服务，并且仍然可以保障客户的数据隔离。</p><p>目前各种各样的云计算服务就是这类技术范畴，例如阿里云数据库服务（RDS )、阿里云服务器(ECS)等等。</p><h2 id="数据多租户方案"><a href="#数据多租户方案" class="headerlink" title="数据多租户方案"></a>数据多租户方案</h2><p>目前互联网多租户在数据存储上存在三种主要的方案，独立数据库、共享数据库及共享数据库共享架构；</p><h4 id="独立数据库"><a href="#独立数据库" class="headerlink" title="独立数据库"></a>独立数据库</h4><p>多租户第一种方案，即一个租户一个数据库，这种方案的用户数据隔离级别最高，安全性最好，但成本也高。</p><ul><li>该方案优点：<ul><li>为不同的租户提供独立的数据库，有助于简化数据模型的扩展设计，满足不同租户的独特需求；</li><li>如果出现故障，恢复数据比较简单。-</li></ul></li><li>该方案缺点：<ul><li>增大了数据库的安装数量；</li><li>数据库维护成本和购置成本的增加。</li></ul></li></ul><p>这种方案与传统的一个客户、一套数据、一套部署类似，差别只在于软件统一部署在运营商那里。如果面对的是银行、医院等需要非常高数据隔离级别的租户，可以选择这种模式，提高租用的定价。如果定价较低，产品 走低价路线，这种方案一般对运营商来说是无法承受的。</p><h4 id="共享数据库，隔离数据架构"><a href="#共享数据库，隔离数据架构" class="headerlink" title="共享数据库，隔离数据架构"></a>共享数据库，隔离数据架构</h4><p>多租户第二种方案，即多个或所有租户共享Database，但是每个租户一个Schema。</p><ul><li>该方案优点：<ul><li>为安全性要求较高的租户提供了一定程度的逻辑数据隔离，并不是完全隔离；</li><li>每个数据库可以支持更多的租户数量。</li></ul></li><li>该方案缺点：<ul><li>如果出现故障，数据恢复比较困难，因为恢复数据库将牵扯到其它租户的数据；</li><li>如果需要跨租户统计数据，存在一定困难。</li></ul></li></ul><h4 id="共享数据库，共享数据架构"><a href="#共享数据库，共享数据架构" class="headerlink" title="共享数据库，共享数据架构"></a>共享数据库，共享数据架构</h4><p>多租户第三种方案，即租户共享同一个Database、同一个Schema，但在表中通过TenantID区分租户的数据，这是共享程度最高、隔离级别最低的模式。</p><ul><li><p>该方案优点：</p><ul><li>三种方案比较，第三种方案的维护和购置成本最低；</li><li>允许每个数据库支持的租户数量最多。</li></ul></li><li><p>该方案缺点：</p><ul><li>隔离级别最低，安全性最低，需要在设计开发时加大对安全的开发量；</li><li>数据备份和恢复最困难，需要逐表逐条备份和还原。</li><li>如果希望以最少的服务器为最多的租户提供服务，并且租户接受以牺牲隔离级别换取降低成本，这种方案最适合；</li></ul></li></ul><h2 id="MyCAT数据切分"><a href="#MyCAT数据切分" class="headerlink" title="MyCAT数据切分"></a>MyCAT数据切分</h2><p>简单来说，就是指通过某种特定的条件，将我们存放在同一个数据库中的数据分散存放到多个数据库（主 机）上面，以达到分散单台设备负载的效果。数据的切分(Sharding )根据其切分规则的类型，可以分为两种切分模式：</p><ul><li><p>按照不同的表（或者 Schema )来切分到不同的数据库(主机）之上，这种切可以称之为数据的垂直（纵向）切分；</p></li><li><p>根据表中的数据的逻辑关系，将同一个表中的数据按照某种条件拆分到多台数据库（主机）上面，这种切分称之为数据的水平（横向）切分。</p></li><li><p><strong>垂直切分</strong>的最大特点就是规则简单，实施也更为方便，尤其适合各业务之间的耦合度非常低，相互影响很小，业务逻辑非常清晰的系统。在这种系统中，可以很容易做到将不同业务模块所使用的表分拆到不同的数据库中。根据不同的表来进行拆分，对应用程序的影响也更小，拆分规则也会比较简单清晰。</p></li><li><p><strong>水平切分</strong>于垂直切分相比，相对来说稍微复杂一些。因为要将同一个表中的不同数据拆分到不同的据库中，对于应用程序来说，拆分规则本身就较根据表名来拆分更为复杂，后期的数据维护也会更为复杂一些。</p></li></ul><h4 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h4><p>数据库由很多表的构成，每个表对应着不同的业务，垂直切分是指按照业务将表进行分类，分布到不同 的数据库上面，这样也就将数据或者说压力分担到不同的库上面，</p><p>一个架构设计较好的应用系统，其总体功能肯定是由很多个功能模块所组成的，而每一个功能模块所需要的 数据对应到数据库中就是一个或者多个表。而在架构设计中，各个功能模块相互之间的交互点越统一越少，系统 的耦合度就越低，系统各个模块的维护性以及扩展性也就越好。这样的系统，实现数据的垂直切分也就越容易。</p><p>往往系统之有些表难以做到完全的独立，存在这扩库join的情况，对于这类的表，就需要去做平衡，是数据库让步业务，共用一个数据源，还是分成多个库，业务之间通过接口来做调用。在系统初期，数据量比较少，或者资源有限的情况下，会选择共用数据源，但是当数据发展到了一定的规模，负载很大的情况，就需要必须去做分割。</p><p>一般来讲业务存在着复杂join的场景是难以切分的，往往业务独立的易于切分。如何切分，切分到何种 程度是考验技术架构的一个难题。</p><ul><li>垂直切分的优点：<ul><li>拆分后业务清晰，拆分规则明确；</li><li>系统之间整合或扩展容易；</li><li>数据维护简单。</li></ul></li><li>垂直切分的缺点：<ul><li>部分业务表无法join ,只能通过接口方式解决，提高了系统复杂度；</li><li>受每种业务不同的限制存在单库性能瓶颈，不易扩展跟性能提高。</li><li>事务处理复杂。由于垂直切分是按照业务的分类将表分散到不同的库，所以有些业务表会过于庞大，存在单库读写与存储瓶颈，所以就需要水平拆分来做解决。</li></ul></li></ul><h4 id="水平切分"><a href="#水平切分" class="headerlink" title="水平切分"></a>水平切分</h4><p>相对于垂直拆分，水平拆分不是将表做分类，而是按照某个字段的某种规则来分散到多个库之中，每个表中包含一部分数据。简单来说，我们可以将数据的水平切分理解为是按照数据行的切分，就是将表中的某些行切分 到一个数据库，而另外的某些行又切分到其他的数据库中，如图：</p><p>拆分数据就需要定义分片规则。关系型数据库是行列的二维模型，拆分的第一原则是找到拆分维度。比如: 从会员的角度来分析，商户订单交易类系统中查询会员某天期某个订单，那么就需要按照会员结合日期来拆分，不同的数据按照会员ID做分组，这样所有的数据查询join都会在单库内解决；</p><p>如果从商户的角度来讲，要查询某个商家某天所有的订单数，就需要按照商户ID做拆分；但是如果系统既想按会员拆分，又想按商家数据，则会有一定的困难。如何找到合适的分片规则需要综合考虑衡量。</p><h4 id="典型的分片规则"><a href="#典型的分片规则" class="headerlink" title="典型的分片规则"></a>典型的分片规则</h4><ul><li>按照用户ID求模，将数据分散到不同的数据库，具有相同数据用户的数据都被分散一个库中；</li><li>按照日期，将不同月甚至日的数据分散到不同的库中；</li><li>按照某个特定的字段求模，或者根据特定范围段分散到不同的库中。</li></ul><p>如图，切分原则都是根据业务找到适合的切分规则分散到不同的库，下面用用户 ID 求模举例：</p><p>既然数据做了拆分有优点也就优缺点。</p><ul><li><p>数据库拆分优点：</p><ul><li>拆分规则抽象好，join 操作基本可以数据库做；</li><li>不存在单库大数据，高并发的性能瓶颈；</li><li>应用端改造较少；</li><li>提高了系统的稳定性跟负载能力。</li></ul></li><li><p>数据库拆分缺点：</p><ul><li>拆分规则难以抽象；</li><li>分片亊务一致性难以解决；</li><li>数捤多次扩展难度跟维护量极大；</li><li>跨库 join 性能较差。</li></ul></li><li><p>垂直切分、水平切分共同的缺点：</p><ul><li>引入分布式亊务的问题；</li><li>跨节点 Join 的问题；</li><li>跨节点合并排序分页问题；</li><li>多数据源管理问题；</li></ul></li></ul><h4 id="针对数据源管理，目前主要有两种思路："><a href="#针对数据源管理，目前主要有两种思路：" class="headerlink" title="针对数据源管理，目前主要有两种思路："></a>针对数据源管理，目前主要有两种思路：</h4><ul><li>客户端模式，在每个应用程序模块中配置管理自己需要的一个（或者多个）数据源，直接访问各个数据库，在模块内完成数据的整合；</li><li>通过中间代理层来统一管理所有的数据源，后端数据库集群对前端应用程序透明，可能 90%以上的人在面对上面这两种解决思路的时候都会倾向于选择第二种，尤其是系统不断变得庞大复杂的时候。确实，这是一个非常正确的选择，虽然短期内需要付出的成本可能会相对更大一些，但是对整个系统的扩展性来讲，是非常有帮助的数据切分的原则：</li></ul><h4 id="数据切分的原则："><a href="#数据切分的原则：" class="headerlink" title="数据切分的原则："></a>数据切分的原则：</h4><ul><li>能不切分尽量不要切分；</li><li>如果要切分一定要选择合适的切分规则，提前规划好；  </li><li>数据切分尽量通过数据冗余或者表分组（Table Group）来降低跨库 Join 的可能；</li><li>由于数据库中间件对数据 Join 实现的优劣难以把握，而且实现高性能难度极大，业务读取尽量少使用多表 Join。</li></ul><h3 id="MyCAT安装配置"><a href="#MyCAT安装配置" class="headerlink" title="MyCAT安装配置"></a>MyCAT安装配置</h3><hr><h4 id="MyCAT系统安装环境："><a href="#MyCAT系统安装环境：" class="headerlink" title="MyCAT系统安装环境："></a>MyCAT系统安装环境：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.149.128 MyCAT</span><br><span class="line">192.168.149.129 MYSQL-MASTER</span><br><span class="line">192.168.149.130 MYSQL-SLAVE</span><br></pre></td></tr></table></figure><p>MyCAT安装之前，需要先安装jdk (Java Development Kit) ，JDK是 Java 语言的软件开发工具包(SDK)），本文安装版本为：jdk1.7.0_75.tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf jdk1.7.0_75.tar.gz</span><br><span class="line">mkdir -p /usr/java/</span><br><span class="line">mv jdk1.7.0_75 /usr/java/</span><br></pre></td></tr></table></figure><p>配置java环境变量，vi /etc/profile 添加如下语句：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export JAVA\_HOME=/usr/java/jdk1.7.0\_75</span><br><span class="line">export CLASSPATH=$CLASSPATH:$JAVA\_HOME/lib:$JAVA\_HOME/jre/lib</span><br><span class="line">export PATH=$JAVA\_HOME/bin:$JAVA\_HOME/jre/bin:$PATH:$HOMR/bin</span><br><span class="line">source /etc/profile //使环境变量立刻生效。</span><br><span class="line">java -version //查看java版本，显示版本为1.7.0_75，证明安装成功。</span><br></pre></td></tr></table></figure><p>官网下载MyCAT最新稳定版本1.6：<a href="http://www.mycat.io" target="_blank" rel="noopener">http://www.mycat.io</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://dl.mycat.io/1.6-RELEASE/Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz</span><br><span class="line">tar xzf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz</span><br><span class="line">mv mycat/ /usr/local/</span><br></pre></td></tr></table></figure><p>进入MyCAT主目录，如图所示：</p><p>MyCAT配置目录详解如下：</p><ul><li>bin程序目录，存放了 window版本和linux版本启动脚本，除了提供封装服务的版本之外，也提供了 nowrap的 shell脚本命令，方便大家选择和修改，进入到bin目录：</li><li>Linux 下运行：./mycat console,首先要 chmod +x *</li><li>mycat 支持的命令{ console | start | stop | restart | status | dump }</li><li>conf目录下存放配置文件，其中：</li><li>server.xm 丨Mycat服务器参数调整和用户授权的配置文件；</li><li>schema.xm丨逻辑库定义和表及分片定义的配置文件；</li><li>rule.xml |分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改，需要重启Mycat或者通过9066端口 reload；</li><li>lib目录下主要存放mycat依赖的一些jar文件；</li><li>日志存放在logs/mycat.log中，每天一个文件，日志的配置是在conf/log4j.xml中，根据自己的需要，可以调整输出级别为debug , debug级别下；</li><li>Catlet |支持跨分片复杂SQL实现以及存储过程支持。</li></ul><p>本文基于MyCAT实现读写分离，只需要涉及到两个MyCAT配置文件，分别是：server.xml和schema.xml文件：<br>其中Server.xml文件主要配置段内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">"jfedu1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>jfedu1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schemas"</span>&gt;</span>testdb<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">"jfedu2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>jfedu2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schemas"</span>&gt;</span>testdb<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"readOnly"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建jfedu1、jfedu2两个用户用于连接MyCAT中间件：</li><li>用户名jfedu1、密码jfedu1，对逻辑数据库testdb具有增删改查的权限，也即WEB连接MyCAT的用户名和密码；</li><li>用户名jfedu2，密码jfedu2，该用户对逻辑数据库testdb只读的权限；</li></ul><p>其中Schema.xml文件主要配置内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mycat:schema SYSTEM "schema.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">"http://io.mycat/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">"testdb"</span> <span class="attr">checkSQLschema</span>=<span class="string">"false"</span> <span class="attr">sqlMaxLimit</span>=<span class="string">"1000"</span> <span class="attr">dataNode</span>=<span class="string">"dn1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn1"</span> <span class="attr">dataHost</span>=<span class="string">"localhost1"</span> <span class="attr">database</span>=<span class="string">"discuz"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"localhost1"</span> <span class="attr">maxCon</span>=<span class="string">"2000"</span> <span class="attr">minCon</span>=<span class="string">"1"</span> <span class="attr">balance</span>=<span class="string">"0"</span> <span class="attr">writeType</span>=<span class="string">"1"</span> <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span> <span class="attr">switchType</span>=<span class="string">"1"</span> <span class="attr">slaveThreshold</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"hostM1"</span> <span class="attr">url</span>=<span class="string">"192.168.149.129:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">"hostS1"</span> <span class="attr">url</span>=<span class="string">"192.168.149.130:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上配置逻辑数据库testdb必须和server.xml中的用户指定的testdb数据库名称一致，否则会报错！如下为配置文件详解：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line">xml文件格式；</span><br><span class="line">&lt;!DOCTYPE mycat:schema SYSTEM "schema.dtd"&gt;</span><br><span class="line">文件标签属性；</span><br><span class="line">&lt;mycat:schema xmlns:mycat="http://io.mycat/"&gt;</span><br><span class="line">Mycat起始标签</span><br><span class="line">&lt;schema name="testdb" checkSQLschema="false" sqlMaxLimit="1000" dataNode="dn1"&gt;</span><br><span class="line">&lt;/schema&gt;</span><br></pre></td></tr></table></figure><p>配置逻辑库，与server.xml指定库名保持一致，绑定数据节点dn1;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn1"</span> <span class="attr">dataHost</span>=<span class="string">"localhost1"</span> <span class="attr">database</span>=<span class="string">"discuz"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>添加数据节点dn1，设置数据节点host名称，同时设置数据节点真实database为discuz；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"localhost1"</span> <span class="attr">maxCon</span>=<span class="string">"2000"</span> <span class="attr">minCon</span>=<span class="string">"1"</span> <span class="attr">balance</span>=<span class="string">"0"</span> <span class="attr">writeType</span>=<span class="string">"1"</span> <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span> <span class="attr">switchType</span>=<span class="string">"1"</span> <span class="attr">slaveThreshold</span>=<span class="string">"100"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据节点主机，绑定数据节点，设置连接数及均衡方式、切换方法、驱动程序、连接方法；</p><p><strong>Balance均衡策略设置：</strong></p><ol><li>balance=0  不开启读写分离机制，所有读操作都发送到当前可用的writehost；</li><li>balance=1  全部的readHost与stand by writeHost参与select语句的负载均衡，简单的说，当双主双从模式(M1-&gt;S1，M2-&gt;S2，并且M1与 M2互为主备)，正常情况下，M2,S1,S2都参与select语句的负载均衡。</li><li>balance=2  所有读操作都随机的在readhost和writehost上分发；</li><li>balance=3 所有读请求随机的分发到wiriterHost对应的readhost执行，writerHost不负担读压力。</li></ol><ul><li><p><strong>writeType 写入策略设置</strong></p><ul><li>writeType=0， 所有写操作发送到配置的第一个writeHost；</li><li>writeType=1，所有写操作都随机的发送到配置的writeHost；</li><li>writeType=2，不执行写操作</li></ul></li><li><p><strong>switchType 策略设置</strong></p><ul><li>switchType=-1，表示不自动切换；</li><li>switchType=1，默认值，自动切换；</li><li>switchType=2，基于MySQL 主从同步的状态决定是否切换；</li><li>switchType=3，基于MySQL galary cluster的切换机制（适合集群）（1.4.1），心跳语句为 show status like ‘wsrep%’。</li></ul></li></ul><p><heartbeat>select user()</heartbeat><br>检测后端MYSQL实例，SQL语句；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"hostM1"</span> <span class="attr">url</span>=<span class="string">"192.168.149.129:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">"hostS1"</span> <span class="attr">url</span>=<span class="string">"192.168.149.130:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br></pre></td></tr></table></figure><p>指定读写请求，同时转发至后端MYSQL真实服务器，配置连接后端MYSQL用户名和密码（该用户名和密码为MYSQL数据库用户名和密码）；</p><p> 数据主机标签；</p><p> mycat结束标签；</p><h2 id="MyCAT读写分离测试"><a href="#MyCAT读写分离测试" class="headerlink" title="MyCAT读写分离测试"></a>MyCAT读写分离测试</h2><p>MyCAT配置完毕，直接启动即可；/usr/local/mycat/bin/mycat start即可，<br>查看8066和9066端口是否启动，其中8066用于WEB连接Mycat，9066用于SA|DBA管理端口；</p><p>netstat -ntl|grep -E –color “8066|9066”</p><p>进入MyCAT命令行界面：</p><p>mysql -h192.168.149.128 -ujfedu1 -pjfedu1 -P8066</p><p>插入数据，以9066端口登录。</p><h4 id="MyCAT管理命令"><a href="#MyCAT管理命令" class="headerlink" title="MyCAT管理命令"></a>MyCAT管理命令</h4><hr><p>MyCAT 自身有类似其他数据库的管理监控方式，可以通过 Mysql 命令行,登录管理端口(9066)执行相应 的 SQL 进行管理,也可以通过 jdbc 的方式进行远程连接管理,本小节主要讲解命令行的管理操作。</p><p>其中8066 数据端口，9066 管理端口，命令行的登陆是通过9066 管理端口来操作，登录方式类似于 mysql 的服务端登陆。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -h192.168.149.128 -ujfedu1 –pjfedu1 -P8066</span><br><span class="line">mysql -h192.168.149.128 -ujfedu1 –pjfedu1 -P9066</span><br></pre></td></tr></table></figure><ul><li>-h 后面是主机，即当前 mycat 按照的主机地址；</li><li>-u Mycat server.xml 中配置的逻辑库用户；</li><li>-p Mycat server.xml 中配置的逻辑库密码；</li><li>-P 后面是端口 默认 9066,注意 P 是大写；</li></ul><p>数据端口与管理端口的配置端口修改，数据端口默认 8066,管理端口默认 9066 ,如果需要修改需要配置 server.xml，加入如下代码，例如将数据库端口改成3306:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"serverPort"</span>&gt;</span>3306<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"managerPort"</span>&gt;</span>9066<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>9066 管理端口登陆后，执行show @@help可以查看到所有命令：</p><p>常见管理命令如下：<br>查看当前的库<br>show @@database;</p><p>+———-+</p><p>| DATABASE |</p><p>+———-+</p><p>| testdb |</p><p>+———-+</p><p>1 row in set (0.00 sec)</p><ol><li>查看MyCAT数据节点的列表,dataNode节点：</li></ol><p>mysql&gt; show @@datanode;</p><p>其中,“NAME”表示 dataNode 的名称;“dataHost”表示对应 dataHost 属性的值,即数据主机; “ACTIVE”表示活跃连接数;“IDLE”表示闲置连接数;“SIZE”对应总连接数量。</p><p>有1个空闲连接，那我们去主从节点用 netstat -ntp 命令看看建立的连接情况：</p><ol><li>查看心跳报告：</li></ol><p>mysql&gt; show @@heartbeat;</p><p>该命令用于报告心跳状态</p><ol><li>查看Mycat的前端连接状态，即应用与mycat的连接：<br>mysql&gt; show @@connection\G<br>从上面获取到的连接 ID 属性，可以手动杀掉某个连接。<br>kill @@connection id,id,id</li><li>显示后端连接状态：<br>mysql&gt; show @@backend\G</li><li>显示数据源：<br>mysql&gt; show @@datasource;</li></ol><p>可以看到主从信息，同时可以看到读、写的次数；</p><h4 id="MyCAT状态监控"><a href="#MyCAT状态监控" class="headerlink" title="MyCAT状态监控"></a>MyCAT状态监控</h4><hr><p>MyCAT-WEB是基于mycat的一个性能监控工具，可以更有效的使用mycat管理mycat监控Mycat，让Mycat工作更加高效。Mycat-web的运行依赖 zookpeer ，需要提前安装Zookeeper服务，Zookeeper作为配置中心；</p><p>MyCAT监控 支持如下特点：</p><ul><li>支持对Mycat、Mysql性能监控 ；</li><li>支持对Mycat的JVM内存提供监控服务 ；</li><li>支持对线程的监控 ；</li><li>支持对操作系统的CPU、内存、磁盘、网络的监控 ；</li></ul><p>Zookeeper安装配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget http://apache.opencas.org/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz</span><br><span class="line">tar -zxvf zookeeper-3.4.6.tar.gz -C /usr/local/</span><br><span class="line">cd /usr/local/zookeeper-3.4.6/</span><br><span class="line">cd conf</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">cd /usr/local/zookeeper-3.4.6/bin/</span><br><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure><p>安装配置MyCAT-WEB：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://dl.mycat.io/mycat-web-1.0/Mycat-web-1.0-SNAPSHOT-20170102153329-linux.tar.gz</span><br><span class="line">tar -xvf Mycat-web-1.0-SNAPSHOT-20170102153329-linux.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure><p>#修改zookeeper注册中心地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mycat-web/mycat-web/WEB-INF/classes</span><br><span class="line">vim mycat.properties</span><br><span class="line">zookeeper=127.0.0.1:2181</span><br></pre></td></tr></table></figure><p>#启动MyCAT-WEB服务即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mycat-web/</span><br><span class="line">./start.sh &amp;</span><br></pre></td></tr></table></figure><p>#通过浏览器访问如图所示:</p><p>访问地址是：<a href="http://192.168.149.128:8082/mycat/" target="_blank" rel="noopener">http://192.168.149.128:8082/mycat/</a></p><p>连接MyCAT服务器，填写如下配置即可：</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RAID简介</title>
      <link href="/post/59899.html"/>
      <url>/post/59899.html</url>
      
        <content type="html"><![CDATA[<p>磁盘阵列（Redundant Arrays of Independent Drives，RAID），有“独立磁盘构成的具有冗余能力的阵列”之意。磁盘阵列是由很多块独立的磁盘，组合成一个容量巨大的磁盘组，利用个别磁盘提供数据所产生加成效果提升整个磁盘系统效能。利用这项技术，将数据切割成许多区段，分别存放在各个硬盘上。</p><a id="more"></a><p>1.RAID 0：称为Stripping条带存储技术（条带），所有磁盘完全地并行读，并行写，是组建磁盘阵列最简单的一种形式，只需要2块以上的硬盘即可，成本低，可以提供整个磁盘的性能和吞吐量，但RAID 0没有提供数据冗余和错误修复功能，因此单块硬盘的损坏会导致所有的数据丢失。（提高读写性能，无备份，成本最低）<br>2.RAID 1：镜像存储，通过把两块磁盘中的一块磁盘的数据镜像到另一块磁盘上， 实现数据冗余，在两块磁盘上产生互为备份的数据，其容量仅等于一块磁盘的容量。当数据在写入一块磁盘时，会在另一块闲置的磁盘上生产镜像，在不影响性能情况下最大限度的保证系统的可靠性和可修复性；当原始数据繁忙时，可直接从镜像拷贝中读取数据（从两块硬盘中较快的一块中读出），提高读取性能。相反的，RAID 1的写入速度较缓慢。RAID 1一般支持“热交换”，即阵列中硬盘的移除或替换可以在系统运行状态下进行，无须中断退出系统。RAID 1是磁盘阵列中硬盘单位成本最高的，但它提供了很高的数据安全性、可靠性和可用性，当一块硬盘失效时，系统可以自动切换到镜像磁盘上读写，而不需要重组失效的数据。（提高读速度，降低写速度，有备份，成本最高）<br>3.RAID 0+1：也被称为RAID 10，实际是将RAID 0和RAID 1结合的形式，在连续地以位或字节为单位分割数据并且并行读/写多个磁盘的同时，为每一块磁盘做镜像进行冗余。通过RAID 0+1的组合形式，数据除分布在多个盘上外，每个盘都有其物理镜像盘，提供冗余能力，允许一个以下磁盘故障，而不影响数据可用性，并且有快速读/写能力。RAID 0+1至少需要4个硬盘在磁盘镜像中建立带区集。RAID 0+1技术在保证数据高可靠性的同时，也保证了数据读/写的高效性。<br>4.RAID 5：是一种存储性能、数据安全和存储成本兼顾的存储解决方案。RAID 5可以理解为是RAID 0和RAID 1的折衷方案，RAID 5至少需要三块硬盘。RAID 5可以为系统提供数据安全保障，但保障程度要比镜像低而磁盘空间利用率要比镜像高。RAID 5具有和RAID 0相近似的数据读取速度，只是多了一个奇偶校验信息，写入数据的速度比对单个磁盘进行写入操作稍慢。同时由于多个数据对应一个奇偶校验信息，RAID 5的磁盘空间利用率要比RAID 1高，存储成本相对较低，是目前运用较多的一种解决方案。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 磁盘管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux性能优化企业实战</title>
      <link href="/post/44413.html"/>
      <url>/post/44413.html</url>
      
        <content type="html"><![CDATA[<p>随着企业网站访问量越来越大，服务器的压力也逐渐增加，主要体现在CPU使用率、内存、硬盘、网卡流量等方面资源占用情况很高。此时需对服务器性能进行调优，尽量在保持服务器的现有数量，然后对其各个环节参数进行优化。</p><a id="more"></a><p>Linux企业级性能服务器优化、TCP/IP报文、TCP三次握手及四次断开、Linux内核深入优化、Linux内核故障解决方案及对Linux性能进行评估等。</p><h4 id="TCP-IP报文详解"><a href="#TCP-IP报文详解" class="headerlink" title="TCP/IP报文详解"></a>TCP/IP报文详解</h4><p>TCP/IP 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。</p><p>TCP负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地，而IP是给因特网的每台联网设备规定一个地址。TCP/IP 协议数据封装的过程包括：用户数据经过应用层协议封装后传递给传输层，传输层封装TCP头部，交给网络层，网络层封装IP头部后，再交给数据链路层，数据链路层封装Ethernet帧头和帧尾，交给物理层，物理层以比特流的形式将数据发送到物理线路上。</p><p>一般而言，不同的协议层对数据包有不同的称谓，数据包在传输层叫做段（segment），在网络层叫做数据报（datagram），在链路层叫做帧（frame）。数据封装成帧后发到传输介质上，到达目的主机后每层协议再剥掉相应的首部，最后将应用层数据交给应用程序处理，如图15-1所示：</p><p>优化Linux服务器，需要了解TCP协议相关信息，例如TCP/IP数据报文的内容及如何传输的。</p><p>IP数据包详解如下：</p><p>Source Port和Destination Port:分别占用16位，表示源端口号和目的端口号；用于区别主机中的不同进程，而IP地址是用来区分不同的主机的，源端口号和目的端口号配合上IP首部中的源IP地址和目的IP地址就能唯一的确定一个TCP连接；<br>Sequence Number:用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节在数据流中的序号；主要用来解决网络报乱序的问题；<br>Acknowledgment Number:32位确认序列号包含发送确认的一端所期望收到的下一个序号，因此，确认序号应当是上次已成功收到数据字节序号加1。不过，只有当标志位中的ACK标志（下面介绍）为1时该确认序列号的字段才有效。主要用来解决不丢包的问题；<br>Offset:给出首部中32 bit字的数目，需要这个值是因为任选字段的长度是可变的。这个字段占4bit（最多能表示15个32bit的的字，即4*15=60个字节的首部长度），因此TCP最多有60字节的首部。然而，没有任选字段，正常的长度是20字节；<br>TCP Flags:TCP首部中有6个标志比特，它们中的多个可同时被设置为1，主要是用于操控TCP的状态机的，依次为URG，ACK，PSH，RST，SYN，FIN。每个标志位的意思如下：<br>URG：此标志表示TCP包的紧急指针域（后面马上就要说到）有效，用来保证TCP连接不被中断，并且督促中间层设备要尽快处理这些数据；<br>ACK：此标志表示应答域有效，就是说前面所说的TCP应答号将会包含在TCP数据包中；有两个取值：0和1，为1的时候表示应答域有效，反之为0；<br>PSH：这个标志位表示Push操作。所谓Push操作就是指在数据包到达接收端以后，立即传送给应用程序，而不是在缓冲区中排队；<br>RST：这个标志表示连接复位请求。用来复位那些产生错误的连接，也被用来拒绝错误和非法的数据包；<br>SYN：表示同步序号，用来建立连接。SYN标志位和ACK标志位搭配使用，当连接请求的时候，SYN=1，ACK=0；连接被响应的时候，SYN=1，ACK=1；这个标志的数据包经常被用来进行端口扫描。扫描者发送一个只有SYN的数据包，如果对方主机响应了一个数据包回来 ，就表明这台主机存在这个端口；但是由于这种扫描方式只是进行TCP三次握手的第一次握手，因此这种扫描的成功表示被扫描的机器不很安全，一台安全的主机将会强制要求一个连接严格的进行TCP的三次握手；<br>FIN： 表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送FIN标志位的TCP数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描。<br>Window:窗口大小，也就是有名的滑动窗口，用来进行流量控制；<br>TCP三次握手及四次断开<br>TCP是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换TCP窗口大小信息。</p><h4 id="TCP三次握手原理："><a href="#TCP三次握手原理：" class="headerlink" title="TCP三次握手原理："></a>TCP三次握手原理：</h4><p>第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后客户端进入SYN_SENT状态，等待服务器的确认；<br>第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；<br>第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。<br>如图15-4所示为基于tcpdump抓取TCP/IP三次握手及数据包传输过程：</p><p>TCP四次挥手原理：<br>第一次挥手：主机A（可以使客户端，可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机B发送一个FIN报文段；此时，主机A进入FIN_WAIT_1状态；这表示主机A没有数据要发送给主机B；<br>第二次挥手：主机B收到了主机A发送的FIN报文段，向主机A回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机A进入FIN_WAIT_2状态；主机B告诉主机A，我“同意”你的关闭请求；<br>第三次挥手：主机B向主机A发送FIN报文段，请求关闭连接，同时主机B进入LAST_ACK状态；<br>第四次挥手：主机A收到主机B发送的FIN报文段，向主机B发送ACK报文段，然后主机A进入TIME_WAIT状态；主机B收到主机A的ACK报文段以后，就关闭连接；此时，主机A等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机A也可以关闭连接。<br>如图15-5所示为基于tcpdump抓取TCP/IP四次挥手及数据包传输过程：</p><h4 id="优化Linux文件打开最大数"><a href="#优化Linux文件打开最大数" class="headerlink" title="优化Linux文件打开最大数"></a>优化Linux文件打开最大数</h4><p>为了防止失控的进程破坏系统的性能，Unix和Linux会跟踪进程使用的大部分资源，并允许用户和系统管理员使用对进程的资源限制，例如控制某个进程打开的系统文件数、对某个用户打开系统进程数进行限制等，一般限制手段包括：软限制和硬限制。<br>软限制（soft limit）是内核实际执行的限制，任何进程都可以将软限制设置为任意小于等于对进程限制的硬限制的值，(noproc)最大线程数和(nofile)文件数；<br>硬限制（hard limit）是可以在任何时候任何进程中设置，但硬限制只能由超级用户修改。<br>Linux系统一切皆文件，对Linux进行各种操作，其实是对文件进行操作，文件可分为：普通文件、目录文件、链接文件和设备文件。而文件描述符（file descriptor）是内核为了高效管理已被打开的文件所创建的索引，其值一个非负整数（通常是小整数），用于指代被打开的文件，所有执行I/O操作的系统调用都通过文件描述符。<br>Linux系统默认已经打开的文件描述符包括：STDIN_FILENO 0表示标准输入、STDOUT_FILENO 1表示标准输出、STDERR_FILENO 2表示标准错误输出，默认打开一个新文件，它的文件描述符为3。<br>每个文件描述符与一个打开文件相对应，不同的文件描述符可以指向同一个文件。相同的文件可以被不同的进程打开，也可以在同一个进程中被多次打开。<br>Linux系统为每个进程维护了一个文件描述符表，该表的值都从0开始的，在不同的进程中你会看到相同的文件描述符，相同文件描述符有可能指向同一个文件，也有可能指向不同的文件。Linux内核对文件操作，维护了3个数据结构概念如下：<br>进程级的文件描述符表；<br>系统级的打开文件描述符表；<br>文件系统的i-node表；<br>其中进程级的描述符表的每一个条目记录了单个文件描述符的相关信息，例如控制文件描述符操作的一组标志及对打开文件句柄的引用。Linux内核对所有打开的文件都维护了一个系统级的描述符表（open file description table）。将描述符表中的记录行称为打开文件句柄（open file handle），一个打开文件句柄存储了与一个打开文件相关的全部信息，详细信息如下：<br>当前文件偏移量；<br>打开文件时所使用的状态标识；<br>文件访问模式；<br>与信号驱动相关的设置；<br>对该文件i-node对象的引用；<br>文件类型和访问权限；<br>指针，指向该文件所持有的锁列表；<br>文件的各种属性。<br>默认Linux内核对每个用户设置了打开文件最大数为1024，对于高并发网站，是远远不够的，需要将默认值调整到更大，调整方法有两种：<br>Linux每个用户打开文件最大数临时设置方法，重启服务器该参数无效，命令行终端执行如下命令：<br>ulimit   -n  65535<br>Linux每个用户打开文件最大数永久设置方法，将如下代码加入内核限制文件/etc/security/limits.conf的末尾：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*    soft        noproc                  65535</span><br><span class="line">*    hard       noproc                  65535</span><br><span class="line">*    soft        nofile                    65535</span><br><span class="line">*    hard       nofile                    65535</span><br></pre></td></tr></table></figure><p>如上设置为对每个用户分别设置nofile、noproc最大数，如果需要对Linux整个系统设置文件最大数限制，需要修改/proc/sys/fs/file-max中的值，该值为Linux总文件打开数，例如设置为：echo 3865161233 &gt;/proc/sys/fs/file-max。</p><p>内核参数的优化<br>Linux /proc/sys目录下存放着多数内核的参数，并且可以在系统运行时进行更改，一般重新启动机器就会失效。而/etc/sysctl.conf是一个允许改变正在运行中的Linux系统的接口，它包含一些TCP/IP堆栈和虚拟内存系统的高级选项，修改内核参数永久生效。</p><p>/proc/sys下内核文件与配置文件sysctl.conf中变量存在着对应关系，即修改sysct.conf配置文件，其实是修改/proc/sys相关参数，所以对Linux内核优化只需修改/etc/sysctl.conf文件即可。如下为BAT企业生产环境/etc/sysct.conf内核完整参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward = 0</span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">kernel.sysrq = 0</span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line">kernel.shmmax = 68719476736</span><br><span class="line">kernel.shmall = 4294967296</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 10000</span><br><span class="line">net.ipv4.tcp_sack = 1</span><br><span class="line">net.ipv4.tcp_window_scaling = 1</span><br><span class="line">net.ipv4.tcp_rmem = 4096 87380 4194304</span><br><span class="line">net.ipv4.tcp_wmem = 4096 16384 4194304</span><br><span class="line">net.core.wmem_default = 8388608</span><br><span class="line">net.core.rmem_default = 8388608</span><br><span class="line">net.core.rmem_max = 16777216</span><br><span class="line">net.core.wmem_max = 16777216</span><br><span class="line">net.core.netdev_max_backlog = 262144</span><br><span class="line">net.core.somaxconn = 262144</span><br><span class="line">net.ipv4.tcp_max_orphans = 3276800</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class="line">net.ipv4.tcp_timestamps = 0</span><br><span class="line">net.ipv4.tcp_synack_retries = 1</span><br><span class="line">net.ipv4.tcp_syn_retries = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_mem = 94500000 915000000 927000000</span><br><span class="line">net.ipv4.tcp_fin_timeout = 1</span><br><span class="line">net.ipv4.tcp_keepalive_time = 30</span><br><span class="line">net.ipv4.ip_local_port_range = 1024 65535</span><br></pre></td></tr></table></figure><h4 id="Linux内核常见参数详解："><a href="#Linux内核常见参数详解：" class="headerlink" title="Linux内核常见参数详解："></a>Linux内核常见参数详解：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_timestamps = 1</span><br><span class="line">该参数控制RFC 1323 时间戳与窗口缩放选项；</span><br><span class="line">net.ipv4.tcp_sack = 1</span><br><span class="line">选择性应答(SACK)是 TCP 的一项可选特性,可以提高某些网络中所有可用带宽的使用效率；</span><br><span class="line">net.ipv4.tcp_fack = 1</span><br><span class="line">打开FACK(Forward ACK) 拥塞避免和快速重传功能；</span><br><span class="line">net.ipv4.tcp_retrans_collapse = 1</span><br><span class="line">打开重传重组包功能，为0的时候关闭重传重组包功能；</span><br><span class="line">net.ipv4.tcp_syn_retries = 5</span><br><span class="line">对于一个新建连接，内核要发送多少个SYN 连接请求才决定放弃；</span><br><span class="line">net.ipv4.tcp_synack_retries = 5</span><br><span class="line">tcp_synack_retries显示或设定Linux在回应SYN要求时尝试多少次重新发送初始SYN,ACK封包后才决定放弃；</span><br><span class="line">net.ipv4.tcp_max_orphans = 131072</span><br><span class="line">系统所能处理不属于任何进程的TCP sockets最大数量；</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="line">系统同时保持TIME_WAIT套接字的最大数量，如果超过这个数字，TIME_WAIT套接字将立刻被清除并打印警告信息；</span><br><span class="line">默认为180000，设为较小数值此项参数可以控制TIME_WAIT套接字的最大数量，避免服务器被大量的TIME_WAIT套接字拖死；</span><br><span class="line">net.ipv4.tcp_keepalive_time = 30</span><br><span class="line">net.ipv4.tcp_keepalive_probes = 3</span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 3</span><br><span class="line">如果某个TCP连接在空闲30秒后,内核才发起probe(探查)；</span><br><span class="line">如果probe 3次(每次3秒既tcp_keepalive_intvl值)不成功,内核才彻底放弃,认为该连接已失效；</span><br><span class="line">net.ipv4.tcp_retries1 = 3</span><br><span class="line">放弃回应一个TCP 连接请求前﹐需要进行多少次重试；</span><br><span class="line">net.ipv4.tcp_retries2 = 15</span><br><span class="line">在丢弃激活(已建立通讯状况)的TCP连接之前﹐需要进行多少次重试；</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line">表示如果套接字由本端要求关闭，这个参数决定了它保持在 FIN-WAIT-2状态的时间；</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭；</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 8192</span><br><span class="line">表示SYN队列的长度，默认为1024，加大队列长度为8192，可以容纳更多等待连接的网络连接数；</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">TCP建立连接的 3 次握手过程中，当服务端收到最初的 SYN 请求时，会检查应用程序的syn_backlog队列是否已满，启用syncookie，可以解决超高并发时的Can’t  Connect` 问题。但是会导致 TIME_WAIT 状态fallback为保持2MSL时间，高峰期时会导致客户端无可复用连接而无法连接服务器；</span><br><span class="line">net.ipv4.tcp_orphan_retries = 0</span><br><span class="line">关闭TCP连接之前重试多少次；</span><br><span class="line">net.ipv4.tcp_mem = 178368  237824     356736</span><br><span class="line">net.ipv4.tcp_mem[0]: 低于此值,TCP没有内存压力；</span><br><span class="line">net.ipv4.tcp_mem[1]: 在此值下,进入内存压力阶段；</span><br><span class="line">net.ipv4.tcp_mem[2]: 高于此值,TCP拒绝分配socket；</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">表示开启重用，允许将TIME-WAIT sockets重新用于新的TCP连接；</span><br><span class="line">net.ipv4.ip_local_port_range = 1024 65000</span><br><span class="line">表示用于向外连接的端口范围；</span><br><span class="line">net.ipv4.ip_conntrack_max = 655360</span><br><span class="line">在内核内存中netfilter可以同时处理的“任务”（连接跟踪条目）；</span><br><span class="line">net.ipv4.icmp_ignore_bogus_error_responses = 1</span><br><span class="line">开启恶意icmp错误消息保护；</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">开启SYN洪水攻击保护。</span><br></pre></td></tr></table></figure><h4 id="Linux内核报错剖析"><a href="#Linux内核报错剖析" class="headerlink" title="Linux内核报错剖析"></a>Linux内核报错剖析</h4><p>企业生产环境Linux服务器正常运行，由于某种原因会导致内核报错或者抛出很多信息，根据系统SA可以快速定位Linux服务器故障，Linux内核日志一般存在messages日志中，可以通过命令tail -fn 100 /var/log/messages查看Linux内核日志，如下为Linux内核常见报错日志及生产环境解决报错的方案：</p><h5 id="Linux内核抛出net-ipv4-tcp-max-tw-buckets错误："><a href="#Linux内核抛出net-ipv4-tcp-max-tw-buckets错误：" class="headerlink" title="Linux内核抛出net.ipv4.tcp_max_tw_buckets错误："></a>Linux内核抛出net.ipv4.tcp_max_tw_buckets错误：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sep 23 04:45:55 localhost kernel: TCP: time wait bucket table overflow</span><br><span class="line">Sep 23 04:45:55 localhost kernel: TCP: time wait bucket table overflow</span><br><span class="line">Sep 23 04:45:55 localhost kernel: TCP: time wait bucket table overflow</span><br><span class="line">Sep 23 04:45:55 localhost kernel: TCP: time wait bucket table overflow</span><br><span class="line">Sep 23 04:45:55 localhost kernel: TCP: time wait bucket table overflow</span><br><span class="line">Sep 23 04:45:55 localhost kernel: TCP: time wait bucket table overflow</span><br><span class="line">Sep 23 04:45:55 localhost kernel: TCP: time wait bucket table overflow</span><br><span class="line">Sep 23 04:45:55 localhost kernel: TCP: time wait bucket table overflow</span><br><span class="line">Sep 23 04:45:55 localhost kernel: TCP: time wait bucket table overflow</span><br></pre></td></tr></table></figure><p>根据TCP协议定义的3次握手及四次断开连接规定，发起socket主动关闭的一方Socket将进入TIME_WAIT状态，TIME_WAIT状态将持续2个MSL(Max Segment Lifetime)。<br>如果该值设置过小导致，当系统Time wait数量超过默认设置的值，即会抛出如上的警告信息，需要增加net.ipv4.tcp_max_tw_buckets的值，警告信息消除。<br>当然也不能设置过大，对于一个处理大量短连接的服务器，如果是由服务器主动关闭客户端的连接，将导致服务器端存在大量的处于TIME_WAIT状态的Socket，甚至比处于Established状态下的Socket多的多，严重影响服务器的处理能力，甚至耗尽可用的Socket而停止服务，TIME_WAIT是TCP协议用以保证被重新分配的Socket不会受到之前残留的延迟重发报文影响的机制，是TCP传输必要的逻辑保证。</p><h5 id="Linux内核抛出Too-many-open-files错误："><a href="#Linux内核抛出Too-many-open-files错误：" class="headerlink" title="Linux内核抛出Too many open files错误："></a>Linux内核抛出Too many open files错误：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Benchmarking localhost (be patient)</span><br><span class="line">socket: Too many open files (24)</span><br><span class="line">socket: Too many open files (24)</span><br><span class="line">socket: Too many open files (24)</span><br><span class="line">socket: Too many open files (24)</span><br><span class="line">socket: Too many open files (24)</span><br></pre></td></tr></table></figure><p>每个文件描述符与一个打开文件相对应，不同的文件描述符可以指向同一个文件。相同的文件可以被不同的进程打开，也可以在同一个进程中被多次打开。Linux内核对应每个用户打开的文件最大数一般为1024，需要将该值调高满足大并发网站的访问。<br>Linux每个用户打开文件最大数永久设置方法，将如下代码加入内核限制文件/etc/security/limits.conf的末尾，Exit退出终端，重新登录即生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/security/limits.conf</span></span><br><span class="line">*    soft        noproc                  65535</span><br><span class="line">*    hard       noproc                  65535</span><br><span class="line">*    soft        nofile                    65535</span><br><span class="line">*    hard       nofile                    65535</span><br></pre></td></tr></table></figure><h5 id="Linux内核抛出possible-SYN-flooding-on-port-80-Sending-cookies错误："><a href="#Linux内核抛出possible-SYN-flooding-on-port-80-Sending-cookies错误：" class="headerlink" title="Linux内核抛出possible SYN flooding on port 80. Sending cookies错误："></a>Linux内核抛出possible SYN flooding on port 80. Sending cookies错误：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">May 31 14:20:14 localhost kernel: possible SYN flooding on port 80. Sending cookies.</span><br><span class="line">May 31 14:21:28 localhost kernel: possible SYN flooding on port 80. Sending cookies.</span><br><span class="line">May 31 14:22:44 localhost kernel: possible SYN flooding on port 80. Sending cookies.</span><br><span class="line">May 31 14:25:33 localhost kernel: possible SYN flooding on port 80. Sending cookies.</span><br><span class="line">May 31 14:27:06 localhost kernel: possible SYN flooding on port 80. Sending cookies.</span><br><span class="line">May 31 14:28:44 localhost kernel: possible SYN flooding on port 80. Sending cookies.</span><br><span class="line">May 31 14:28:51 localhost kernel: possible SYN flooding on port 80. Sending cookies.</span><br><span class="line">May 31 14:31:01 localhost kernel: possible SYN flooding on port 80. Sending cookies.</span><br></pre></td></tr></table></figure><p>此问题是由于SYN 队列已满，而触发SYN cookies，一般是由于大量的访问，或者恶意访问导致，也称之为SYN Flooding洪水攻击，与DDOS攻击类似。<br>完整的TCP连接的三次握手，假设一个用户A向服务器发送了SYN报文后突然死机或掉线，那么服务器在发出SYN+ACK应答报文后是无法收到客户端的ACK报文的（第三次握手无法完成），这种情况下服务器端一般会重试（再次发送SYN+ACK给客户端）并等待一段时间后丢弃这个未完成的连接，这段时间的长度我们称为SYN Timeout，一般来说这个时间是分钟的数量级（大约为30秒-2分钟）。<br>一个用户出现异常导致服务器的一个线程等待1分钟并不是什么很大的问题，但如果有一个恶意的攻击者大量模拟这种情况，服务器端将为了维护一个非常大的半连接列表而消耗非常多的资源，数以万计的半连接，即使是简单的保存并遍历也会消耗非常多的CPU时间和内存，何况还要不断对这个列表中的IP进行SYN+ACK的重试。<br>实际上如果服务器的TCP/IP栈不够强大，最后的结果往往是堆栈溢出崩溃，即使服务器端的系统足够强大，服务器端也将忙于处理攻击者伪造的TCP连接请求而无暇理睬客户的正常请求（毕竟客户端的正常请求比率非常之小），此时从正常客户的角度看来，服务器失去响应，服务器拒绝提供服务，服务器受到了DDOS攻击，这里攻击的手段为DDOS中SYN Flood攻击（SYN洪水攻击）。</p><h5 id="防护DDOS攻击"><a href="#防护DDOS攻击" class="headerlink" title="防护DDOS攻击"></a>防护DDOS攻击</h5><p>防护DDOS攻击有两种手段，一是基于硬件专业防火墙、二是基于Linux内核简单防护，如果攻击流量特别大，单纯配置内核参数是无法抵挡的，还得依靠专业级硬件防火墙，如下为Linux内核防护DDOS优化参数，加入如下代码即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line">net.ipv4.tcp_keepalive_time = 1200</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.ip_local_port_range = 1024 65000</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 8192</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 8000</span><br><span class="line">net.ipv4.tcp_synack_retries = 2</span><br><span class="line">net.ipv4.tcp_syn_retries = 2</span><br></pre></td></tr></table></figure><h5 id="Linux内核抛出ip-conntrack-table-full-dropping-packet-错误："><a href="#Linux内核抛出ip-conntrack-table-full-dropping-packet-错误：" class="headerlink" title="Linux内核抛出ip_conntrack: table full, dropping packet.错误："></a>Linux内核抛出ip_conntrack: table full, dropping packet.错误：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">May  6 11:15:07 localhost kernel: nf_conntrack:table full, dropping packet.</span><br><span class="line">May  6 11:19:13 localhost kernel: nf_conntrack:table full, dropping packet.</span><br><span class="line">May  6 11:20:34 localhost kernel: nf_conntrack:table full, dropping packet.</span><br><span class="line">May  6 11:23:12 localhost kernel: nf_conntrack:table full, dropping packet.</span><br><span class="line">May  6 11:24:07 localhost kernel: nf_conntrack:table full, dropping packet.</span><br><span class="line">May  6 11:24:13 localhost kernel: nf_conntrack:table full, dropping packet.</span><br><span class="line">May  6 11:25:11 localhost kernel: nf_conntrack:table full, dropping packet.</span><br><span class="line">May  6 11:26:25 localhost kernel: nf_conntrack:table full, dropping packet.</span><br></pre></td></tr></table></figure><p>由于该服务器开启了iptables防火墙，WEB服务器收到了大量的连接，iptables会把所有的连接都做链接跟踪处理，这样iptables就会有一个链接跟踪表，当这个表满的时候，就会出现上面的错误。ip_conntrack是linux NAT的一个跟踪连接条目的模块，ip_conntrack模块会使用一个哈希表记录 tcp 通讯协议的established connection记录。<br>       如果是CentOS6.x系统，需执行：modprobe nf_conntrack命令，然后在内核优化文件中加入如下代码，sysctl –p使其内核文件生效，即可解决该报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.nf_conntrack_max = 655360</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_established = 36000</span><br></pre></td></tr></table></figure><p>如果是CentOS5.x系统，需执行：modprobe ip_conntrack命令，然后在内核优化文件中加入如下代码，sysctl –p使其内核文件生效，即可解决该报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_conntrack_max = 655350</span><br><span class="line">net.ipv4.netfilter.ip_conntrack_tcp_timeout_established = 10800</span><br></pre></td></tr></table></figure><h4 id="影响务器性能因素"><a href="#影响务器性能因素" class="headerlink" title="影响务器性能因素"></a>影响务器性能因素</h4><p>影响企业生产环境Linux服务器性能的因素有很多，一般分为两大类，分别为操作系统层级和应用程序级别。如下为各级别影响性能的具体项及性能评估的标准：</p><ul><li>操作系统级别</li><li>内存；</li><li>CPU；</li><li>磁盘I/O；</li><li>网络I/O带宽。</li><li>应用程序及软件</li><li>Nginx；</li><li>MySQL；</li><li>Tomcat;</li><li>PHP；</li><li>应用程序代码。</li></ul><h4 id="影响性能因素"><a href="#影响性能因素" class="headerlink" title="影响性能因素"></a>影响性能因素</h4><p>评判标准</p><ul><li>好</li><li>坏</li><li>糟糕</li></ul><ul><li>CPU<ul><li>user% + sys%&lt; 70%</li><li>user% + sys%= 85%</li><li>user% + sys% &gt;=90%</li></ul></li><li>内存<ul><li>Swap In（si）＝0</li><li>Swap Out（so）＝0</li><li>Per CPU with 10 page/s</li><li>More Swap In &amp; Swap Out</li></ul></li><li>磁盘<ul><li>iowait % &lt; 20%</li><li>iowait % =35%</li><li>iowait % &gt;= 50%</li></ul></li></ul><h4 id="Linux系统性能分析工具"><a href="#Linux系统性能分析工具" class="headerlink" title="Linux系统性能分析工具"></a>Linux系统性能分析工具</h4><p>常用系统性能分析命令: vmstat、sar、iostat、netstat、free、ps、top、iftop等；</p><p>常用系统性能组合分析命令；</p><ul><li>top、uptime                                  检查系统整体的负载、承受能力；</li><li>vmstat、sar、iostat 、top                    检测是否是CPU瓶颈；</li><li>free、vmstat                                 检测是否是内存瓶颈；</li><li>iostat                                       检测是否是磁盘I/O瓶颈；</li><li>netstat、iftop                               检测是否是网络带宽瓶颈。</li></ul><h4 id="Linux服务器性能评估与优化"><a href="#Linux服务器性能评估与优化" class="headerlink" title="Linux服务器性能评估与优化"></a>Linux服务器性能评估与优化</h4><p>Linux服务器性能评估与优化是一项长期的工作，需要随时关注网站服务器的运行状态，及时作出相应的调整，如下为Linux服务器性能评估及优化方案：</p><h5 id="Linux系统整体性能评估"><a href="#Linux系统整体性能评估" class="headerlink" title="Linux系统整体性能评估"></a>Linux系统整体性能评估</h5><p>uptime命令主要用于查看当前服务器整体性能，例如CPU、负载、内存等值的总览，如下为uptime命令应用案例及详解：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@web1 ~]# uptime</span><br><span class="line">13:38:00 up 112 days,  14:01,  5 users,  load average: 6.22, 1.02, 0.91</span><br></pre></td></tr></table></figure><p>Load average负载有三个值，分别表示：最近1分钟、5分钟、15分钟系统的负载，三个值的大小一般不能大于系统逻辑CPU核数的2倍，例如Linux操作系统有4个逻辑CPU，如果load average的三个值长期大于8时，说明CPU很繁忙，负载很高，可能会影响系统性能，但是偶尔大于8时，可以不用担心，一般不会影响系统性能。<br>如果load average的输出值小于CPU逻辑个数的2倍，则表示CPU还有空闲的时间片，例如案例中CPU负载为6.22，表示CPU或者服务器是比较空闲的。基于此参数不能完全确认服务器的性能瓶颈，需要借助其他工具进一步判断。</p><h5 id="CPU性能评估"><a href="#CPU性能评估" class="headerlink" title="CPU性能评估"></a>CPU性能评估</h5><p>利用vmstat命令监控系统CPU，该命令可以显示关于系统各种资源之间相关性能的简要信息，主要用它来查看CPU负载及队列情况。</p><h6 id="Vmstat输出结果详解"><a href="#Vmstat输出结果详解" class="headerlink" title="Vmstat输出结果详解"></a>Vmstat输出结果详解</h6><ul><li>r             列表示运行和等待cpu时间片的进程数，这个值如果长期大于系统CPU的个数，说明CPU不足，需要增加CPU；</li><li>b             列表示在等待资源的进程数，比如正在等待I/O、或者内存交换等；</li><li>us            列显示了用户进程消耗的CPU 时间百分比。us的值比较高时，说明用户进程消耗的cpu时间多，但是如果长期大于50%，就需要考虑优化程序或算法；</li><li>sy            列显示了内核进程消耗的CPU时间百分比。Sy的值较高时，说明内核消耗的CPU资源很多；<br>us+sy的参考值为80%，如果us+sy大于80%说明可能存在CPU资源不足。<br>利用sar命令监控系统CPU，sar功能很强大，可以对系统的每个方面进行单独的统计，但是使用sar命令会增加系统开销，不过这些开销是可以评估的，对系统的统计结果不会有很大影响。如图15-7所示，为sar命令对某个系统的CPU统计输出：</li></ul><h6 id="Sar输出结果详解如下："><a href="#Sar输出结果详解如下：" class="headerlink" title="Sar输出结果详解如下："></a>Sar输出结果详解如下：</h6><ul><li>%user                                 列显示了用户进程消耗的CPU 时间百分比；</li><li>%nice                                 列显示了运行正常进程所消耗的CPU 时间百分比；</li><li>%system                             列显示了系统进程消耗的CPU时间百分比；</li><li>%iowait                              列显示了IO等待所占用的CPU时间百分比；</li><li>%idle                                  列显示了CPU处在空闲状态的时间百分比；</li><li>%steal                                列显示了在内存相对紧张的环境下page in强制对不同的页面进行的steal操作。</li></ul><h5 id="内存性能评估"><a href="#内存性能评估" class="headerlink" title="内存性能评估"></a>内存性能评估</h5><p>利用free指令监控内存，free是监控linux内存使用状况最常用的指令。</p><p>一般而言，服务器内存可以通过如下方法判断是否空余：</p><ul><li>应用程序可用内存/系统物理内存&gt;70%时，表示系统内存资源非常充足，不影响系统性能。</li><li>应用程序可用内存/系统物理内存&lt;20%时，表示系统内存资源紧缺，需要增加系统内存，20%&lt;应用程序可用内存/系统物理内存&lt;70%时，表示系统内存资源基本能满足应用需求，暂时不影响系统性能。</li></ul><h5 id="磁盘I-O性能评估"><a href="#磁盘I-O性能评估" class="headerlink" title="磁盘I/O性能评估"></a>磁盘I/O性能评估</h5><p>利用iostat评估磁盘性能，监控磁盘IO读写及带宽。</p><h6 id="Iostat输出结果详解如下："><a href="#Iostat输出结果详解如下：" class="headerlink" title="Iostat输出结果详解如下："></a>Iostat输出结果详解如下：</h6><ul><li>Blk_read/s                表示每秒读取的数据块数；</li><li>Blk_wrtn/s                表示每秒写入的数据块数；</li><li>Blk_read                  表示读取的所有块数；</li><li>Blk_wrtn                  表示写入的所有块数。</li></ul><p>可以通过Blk_read/s和Blk_wrtn/s的值对磁盘的读写性能有一个基本的了解，如果Blk_wrtn/s值很大，表示磁盘的写操作很频繁，可以考虑优化磁盘或者优化程序，如果Blk_read/s值很大，表示磁盘直接读取操作很多，可以将读取的数据放入内存中进行操作。</p><p>利用sar评估磁盘性能，通过sar -d组合，可以对系统的磁盘IO做一个基本的统计。</p><h6 id="Sar输出结果详解如下：-1"><a href="#Sar输出结果详解如下：-1" class="headerlink" title="Sar输出结果详解如下："></a>Sar输出结果详解如下：</h6><ul><li>await表示平均每次设备I/O操作的等待时间（以毫秒为单位）；</li><li>svctm表示平均每次设备I/O操作的服务时间（以毫秒为单位）；</li><li>%util表示一秒中有百分之几的时间用于I/O操作；</li></ul><p>磁盘IO性能，评判标准：正常情况下svctm应该是小于await值的，而svctm的大小和磁盘性能有关，CPU、内存的负荷也会对svctm值造成影响，过多的请求也会间接的导致svctm值的增加。<br>await值的大小一般取决与svctm的值和I/O队列长度以及I/O请求模式，如果svctm的值与await很接近，表示几乎没有I/O等待，磁盘性能很好，如果await的值远高于svctm的值，则表示I/O队列等待太长，系统上运行的应用程序将变慢，此时可以通过更换更快的硬盘来解决问题。<br>%util项的值也是衡量磁盘I/O的一个重要指标，如果%util接近100%，表示磁盘产生的I/O请求太多，I/O系统已经满负荷的在工作，该磁盘可能存在瓶颈。长期下去，势必影响系统的性能，可以通过优化程序或者通过更换更高、更快的磁盘来解决此问题。</p><h4 id="网络性能评估"><a href="#网络性能评估" class="headerlink" title="网络性能评估"></a>网络性能评估</h4><ul><li>通过ping命令检测网络的连通性</li><li>通过netstat –i组合检测网络接口状况</li><li>通过netstat –r组合检测系统的路由表信息</li><li>通过sar -n组合显示系统的网络运行状态</li><li>通过iftop -i eth0 查看网卡流量，详细参数如下，</li></ul><p>&lt;=                               客户端流入的流量；</p><p>=&gt;                               服务器端流出的流量；</p><p>TX                              发送流量；</p><p>RX                              接收流量；</p><p>TOTAL                       总流量；</p><p>Cumm                         运行iftop到目前时间的总流量；</p><p>peak                         流量峰值；</p><p>rates                         分别表示过去 2s 10s 40s 的平均流量。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维基本功 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyenv安装</title>
      <link href="/post/651295d4.html"/>
      <url>/post/651295d4.html</url>
      
        <content type="html"><![CDATA[<p>Pyenv是多版本Python管理器,可以同时管理多个Python版本共存, 区别于virtualenv.</p><a id="more"></a><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/yyuu/pyenv.git ~/.pyenv</span><br><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line">export PYENV_ROOT="$HOME/.pyenv"</span><br><span class="line">export PATH="$PYENV_ROOT/bin:$PATH"</span><br><span class="line">eval "$(pyenv init -)"</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>基本过程是官网下载源码包然后安装, 需要安装gcc, 等库的依赖安装.</p><h5 id="查看支持的版本"><a href="#查看支持的版本" class="headerlink" title="查看支持的版本"></a>查看支持的版本</h5><p>pyenv install –list</p><h5 id="centos上装python3需要先安装一些依赖包"><a href="#centos上装python3需要先安装一些依赖包" class="headerlink" title="centos上装python3需要先安装一些依赖包"></a>centos上装python3需要先安装一些依赖包</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum groupinstall <span class="string">"Development tools"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum install zlib-devel bzip2-devel openssl-devel ncurses-devel \</span></span><br><span class="line">sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure><h5 id="开始安装python3-6-4"><a href="#开始安装python3-6-4" class="headerlink" title="开始安装python3.6.4"></a>开始安装python3.6.4</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install -v 3.6.4&lt;/pre&gt;</span><br></pre></td></tr></table></figure><h5 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pyenv global 3.6.4</span><br><span class="line">pyenv versions</span><br><span class="line">  system</span><br><span class="line">* 3.6.4 (set by /root/.pyenv/version)</span><br></pre></td></tr></table></figure><h5 id="查看当前系统包含的版本。-表示当前正在使用的版本"><a href="#查看当前系统包含的版本。-表示当前正在使用的版本" class="headerlink" title="查看当前系统包含的版本。*表示当前正在使用的版本"></a>查看当前系统包含的版本。*表示当前正在使用的版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pyenv versions</span><br><span class="line">* system (set by /root/.pyenv/version)</span><br><span class="line">3.6.4</span><br></pre></td></tr></table></figure><h5 id="相关注意事项"><a href="#相关注意事项" class="headerlink" title="相关注意事项"></a>相关注意事项</h5><p>因各种原因, 下载速度可能只有几KB, 甚至超时, 可将下载地址替换成国内镜像后在下载.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd  ~/.pyenv/plugins/python-build/share/python-build/</span><br><span class="line">vim 3.5.2 (如果你下载别的版本, 你就改别的文件)</span><br><span class="line">将里面下载地址改成sohu的镜像地址：</span><br><span class="line">https://www.python.org/ftp/python/3.5.2/Python-3.5.2.tar.xz</span><br><span class="line">http://mirrors.sohu.com/python/3.5.2/Python-3.5.2.tar.xz</span><br></pre></td></tr></table></figure><p>附搜狐镜像地址：<a href="http://mirrors.sohu.com/python/" target="_blank" rel="noopener">http://mirrors.sohu.com/python/</a><br>pip安装各种库也经常容易timeout.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cat ~/.pip/pip.conf</span><br><span class="line">[global]</span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br><span class="line">trusted-host = pypi.douban.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7网卡名称重命名及root密码重置</title>
      <link href="/post/36934.html"/>
      <url>/post/36934.html</url>
      
        <content type="html"><![CDATA[<p>CentOS7服务器，默认网卡名为ifcfg-eno16777736，怎么修改成ifcfg-eth0, 忘记root密码该怎么办？</p><a id="more"></a><h5 id="编辑-etc-sysconfig-grub文件"><a href="#编辑-etc-sysconfig-grub文件" class="headerlink" title="编辑/etc/sysconfig/grub文件"></a>编辑/etc/sysconfig/grub文件</h5><p>命令为vim /etc/sysconfig/grub，在倒数第二行quiet后加入如下代码，并如图3-14所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ifnames=0 biosdevname=0</span><br></pre></td></tr></table></figure><h5 id="生成新的grub-cfg文件"><a href="#生成新的grub-cfg文件" class="headerlink" title="生成新的grub.cfg文件"></a>生成新的grub.cfg文件</h5><p>执行命令grub2-mkconfig -o /boot/grub2/grub.cfg，生成新的grub.cfg文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure><h5 id="重命名网卡名称"><a href="#重命名网卡名称" class="headerlink" title="重命名网卡名称"></a>重命名网卡名称</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv ifcfg-eno16777736 ifcfg-eth0  </span><br><span class="line">sed -i 's/ifcfg-eno16777736/eth0/g' ifcfg-eth0</span><br></pre></td></tr></table></figure><h5 id="重启服务器验证网卡名称是否已修改"><a href="#重启服务器验证网卡名称是否已修改" class="headerlink" title="重启服务器验证网卡名称是否已修改"></a>重启服务器验证网卡名称是否已修改</h5><h5 id="CentOS7服务器忘记密码："><a href="#CentOS7服务器忘记密码：" class="headerlink" title="CentOS7服务器忘记密码："></a>CentOS7服务器忘记密码：</h5><p>修改CentOS7 ROOT密码非常简单，只需登录系统，执行命令passwd回车即可，但是如果忘记ROOT，无法登录系统，该如何去重置ROOT用户的密码呢？如下为重置ROOT用户的密码的方法：</p><ul><li><p>Reboot重启系统，系统启动进入欢迎界面，加载内核步骤时，按e，然后选中”CentOS Linux （3.10.0-327.e17.x86_64）7 （Core)”</p></li><li><p>继续按e进入编辑模式，找到ro crashkernel=auto xxx项，将ro改成rw init=/sysroot/bin/sh，如图3-19所示：</p></li><li><p>按ctrl+x进入单用户模式</p></li><li><p>执行命令chroot /sysroot访问系统，并使用passwd修改root密码</p></li><li><p>更新系统信息，touch /.autorelabel，执行命令touch /.autorelabel，在/目录下创建一个.autorelabel文件，如果该文件存在，系统在重启时就会对整个文件系统进行relabeling重新标记，可以理解为对文件进行底层权限的控制和标记，如果seLinux属于disabled关闭状态则不需要执行这条命令</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Nginx报错The plain HTTP request was sent to HTTPS port</title>
      <link href="/post/23576.html"/>
      <url>/post/23576.html</url>
      
        <content type="html"><![CDATA[<p>Nginx报错The plain HTTP request was sent to HTTPS port。从报错的字面意思上来看，是因为HTTP请求被发送到HTTPS端口，这种报错多出现在Nginx既处理HTTP请求又处理HTTPS请求的情况。</p><a id="more"></a><h5 id="修改nginx对应虚拟机的配置文件，找到https段"><a href="#修改nginx对应虚拟机的配置文件，找到https段" class="headerlink" title="修改nginx对应虚拟机的配置文件，找到https段"></a>修改nginx对应虚拟机的配置文件，找到https段</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    ssl on;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修改为如下即可实现http和https共存："><a href="#修改为如下即可实现http和https共存：" class="headerlink" title="修改为如下即可实现http和https共存："></a>修改为如下即可实现http和https共存：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Innobackupex——MySQL全备增备及恢复</title>
      <link href="/post/40146.html"/>
      <url>/post/40146.html</url>
      
        <content type="html"><![CDATA[<p>通常使用逻辑备份工具mysqldump备份mysql数据,但是数据库数据量很大时,使用mysqldump备份耗时太长,故采用物理备份,可使用mysqlhotcopy,可惜他只能备份myisam引擎的数据,Percona XtraBackup 是 Percona 公司开发的一个用于 MySQL 数据库物理热备的备份工具，且是开源项目。XtraBackup 工具下有一个 innobackupex 支持 MyISAM 跟 Innodb 的备份</p><a id="more"></a><h5 id="安装xtraBackup-https-www-percona-com-downloads-XtraBackup"><a href="#安装xtraBackup-https-www-percona-com-downloads-XtraBackup" class="headerlink" title="安装xtraBackup https://www.percona.com/downloads/XtraBackup/"></a>安装xtraBackup <a href="https://www.percona.com/downloads/XtraBackup/" target="_blank" rel="noopener">https://www.percona.com/downloads/XtraBackup/</a></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.12/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h5 id="innobackupex全备"><a href="#innobackupex全备" class="headerlink" title="innobackupex全备"></a>innobackupex全备</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --user=user --password=passwd --no-timestamp ./`date +%F`.dbname</span><br></pre></td></tr></table></figure><p>–no-timestamp 如果不加的话会在备份目录下生成一个备份时间的目录，备份数据存在该目录下<br>将整个数据库备份到 ./ 以备份日期加自定义名称的一个目录下<br>虽然可以使用 –stream=tar 加 | gzip &gt; 的方式直接打包并压缩，但是备份速度就下降了，所以我宁愿快速备份，之后再去处理打包、压缩。<br>三、innobackupex全备恢复</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql.server stop  # 首先关闭数据库</span><br><span class="line">cd /data/backup_db  # 切换到备份目录</span><br><span class="line">mv /usr/local/mysql-5.5.52/data data.old  # 将原来的数据目录备份一下</span><br><span class="line">tar zxf alldatabase.11.tar.gz  # 然后将原来的备份解压缩</span><br><span class="line">innobackupex --apply-log alldatabase  # 在备份上应用日志，一般没有看到报错且最后显示 OK 就没有问题 ( --use-memory 使用该参数加快速度 )</span><br><span class="line">  12:07:33 completed OK!</span><br><span class="line">innobackupex --copy-back alldatabase  # 将备份还原到 my.cnf 指定的 datadir 中，不指定 --defaults-file，默认 /etc/my.cnf</span><br><span class="line">  Error: datadir must be specified.  # 报错信息显示，在默认配置文件 /etc/my.cnf 中，没有找到 datadir 配置项</span><br><span class="line">vim /etc/my.cnf  # 加入 datadir 配置项</span><br><span class="line">  datadir         = /usr/local/mysql-5.5.52/data</span><br><span class="line">innobackupex --copy-back alldatabase  # 再次执行 copy 动作，没有报错且显示 OK </span><br><span class="line">  12:17:52 completed OK!</span><br><span class="line">ll -d /usr/local/mysql-5.5.52/data</span><br><span class="line">  drwxr-x--- 6 root root 4096 10月 11 12:17 /usr/local/mysql-5.5.52/data</span><br><span class="line">chown -R mysql.mysql /usr/local/mysql-5.5.52/data  # 修改数据目录权限</span><br><span class="line">/etc/init.d/mysql.server start</span><br></pre></td></tr></table></figure><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>备份已经恢复!回顾整个恢复过程，发现一个问题：之前数据库里的东西全部没有了,也就是说，innobackupex 只适用于该 MySQL 中除系统库外，只有一个库的备份。虽然有选项 –databases 可以指定备份哪个数据库，但是备出来的结果却是 all databases，且恢复的时候也是全部覆盖。</p><ul><li>采用 innobackupex 备份整库，然后恢复到一台新库上，再通过 mysqldump 将需要还原的单库备份一次，之后导入需要恢复的数据库中 ( 要考虑恢复时间 )。</li><li>采用 innobackupex 备份只有一个业务库的 MySQL Server，恢复到只有该业务库的 MySQL Server 中。</li><li>如果一个 MySQL Server 中有多个数据库，又只想备份某个库，且该库体积比较小的情况下，建议使用 mysqldump 备份。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim编辑器常用配置</title>
      <link href="/post/53596.html"/>
      <url>/post/53596.html</url>
      
        <content type="html"><![CDATA[<p>Vim是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器，在Vi的基础上改进和增加了很多特性。</p><a id="more"></a><p>vim编辑器配置，配置文件如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">关闭兼容模式</span></span><br><span class="line">set nocompatible</span><br><span class="line"><span class="meta">#</span><span class="bash">设置历史记录步数</span></span><br><span class="line">set history=100</span><br><span class="line"><span class="meta">#</span><span class="bash">开启相关插件</span></span><br><span class="line">filetype on</span><br><span class="line">filetype plugin on</span><br><span class="line">filetype indent on</span><br><span class="line"><span class="meta">#</span><span class="bash">文件被外部修改时，自动更新文件</span></span><br><span class="line">set autoread</span><br><span class="line"><span class="meta">#</span><span class="bash">激活鼠标使用</span></span><br><span class="line">set mouse=a</span><br><span class="line"><span class="meta">#</span><span class="bash">开启语法</span></span><br><span class="line">syntax enable</span><br><span class="line"><span class="meta">#</span><span class="bash">高亮显示当前行</span></span><br><span class="line">set cursorline</span><br><span class="line">hi cursorline guibg=#00ff00</span><br><span class="line">hi CursorColumn guibg=#00ff00</span><br><span class="line"></span><br><span class="line">set nofen</span><br><span class="line">set fdl=0</span><br><span class="line"><span class="meta">#</span><span class="bash">使用空格来替换Tab</span></span><br><span class="line">set expandtab</span><br><span class="line"><span class="meta">#</span><span class="bash">设置锁头Tab缩进为4</span></span><br><span class="line">set tabstop=4</span><br><span class="line"><span class="meta">#</span><span class="bash">设定&amp;lt;&amp;lt;和&amp;gt;&amp;gt;命令移动宽度为4</span></span><br><span class="line">set shiftwidth=4</span><br><span class="line">set softtabstop=4</span><br><span class="line">set smarttab</span><br><span class="line"><span class="meta">#</span><span class="bash">设置自动缩进=<span class="string">"set autoindent"</span></span></span><br><span class="line">set ai</span><br><span class="line"><span class="meta">#</span><span class="bash">智能缩进</span></span><br><span class="line">set si</span><br><span class="line"><span class="meta">#</span><span class="bash">自动换行</span></span><br><span class="line">set wrap</span><br><span class="line"><span class="meta">#</span><span class="bash">设置软宽度</span></span><br><span class="line">set sw=4</span><br><span class="line"><span class="meta">#</span><span class="bash">显示行号</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> nu</span></span><br><span class="line"><span class="meta">#</span><span class="bash">打开wild menu</span></span><br><span class="line">set wildmenu</span><br><span class="line"><span class="meta">#</span><span class="bash">显示标尺</span></span><br><span class="line">set ruler</span><br><span class="line"><span class="meta">#</span><span class="bash">设置命令行高度</span></span><br><span class="line">set cmdheight=1</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">set lz</span><br><span class="line"><span class="meta">#</span><span class="bash">设置退格</span></span><br><span class="line">set backspace=eol,start,indent</span><br><span class="line">set whichwrap+=&amp;lt;,&amp;gt;,h,l</span><br><span class="line"><span class="meta">#</span><span class="bash">设置魔术</span></span><br><span class="line">set magic</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭错误是声音提示</span></span><br><span class="line">set noerrorbells</span><br><span class="line">set novisualbell</span><br><span class="line"><span class="meta">#</span><span class="bash">&#123;[()]&#125;配对</span></span><br><span class="line">set showmatch</span><br><span class="line">set mat=2</span><br><span class="line"><span class="meta">#</span><span class="bash">高亮显示搜索到的内容</span></span><br><span class="line">set hlsearch</span><br><span class="line"><span class="meta">#</span><span class="bash">忽略大小写,可使用简写</span></span><br><span class="line">set ignorecase</span><br><span class="line"><span class="meta">#</span><span class="bash">设置编码,文件编码,终端编码</span></span><br><span class="line">set encoding=utf-8</span><br><span class="line">set fileencoding=utf-8</span><br><span class="line">set termencoding=utf-8</span><br><span class="line"><span class="meta">#</span><span class="bash">开启新行是智能缩进</span></span><br><span class="line">set smartindent</span><br><span class="line">set cin</span><br><span class="line"><span class="meta">#</span><span class="bash">隐藏工具栏</span></span><br><span class="line">set guioptions-=T</span><br><span class="line"><span class="meta">#</span><span class="bash">隐藏菜单栏</span></span><br><span class="line">set guioptions-=m</span><br><span class="line"><span class="meta">#</span><span class="bash">置空错误铃声终端代码</span></span><br><span class="line">set vb t_vb=</span><br><span class="line"><span class="meta">#</span><span class="bash">显示状态栏,默认为1,不显示</span></span><br><span class="line">set laststatus=2</span><br><span class="line"><span class="meta">#</span><span class="bash">粘贴不换行的解决方法</span></span><br><span class="line">set pastetoggle=&amp;lt;F9&amp;gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">开启粘贴模式</span></span><br><span class="line">set paste</span><br><span class="line"><span class="meta">#</span><span class="bash">设置背景色</span></span><br><span class="line">set background=dark</span><br><span class="line"><span class="meta">#</span><span class="bash">高亮相关</span></span><br><span class="line">highlight Search ctermbg=black ctermfg=white guifg=white guibg=black</span><br><span class="line"><span class="meta">#</span><span class="bash">配置自动添加解释器,作者,版权信息</span></span><br><span class="line">autocmd BufNewFile *.py,*.cc,*.sh,*.java exec ":call SetTitle()"</span><br><span class="line">func SetTitle()</span><br><span class="line">    if expand("%:e") == 'sh'</span><br><span class="line">        call setline(1, "#!/bin/bash")</span><br><span class="line">        call setline(2, "#Author:mint")</span><br><span class="line">        call setline(3, "#Blog:www.dookt.com")</span><br><span class="line">        call setline(4, "#Time:".strftime("%F %T"))</span><br><span class="line">        call setline(5, "#Name".expand("%"))</span><br><span class="line">        call setline(6, "#Verson:v1.0")</span><br><span class="line">        call setline(6, "#Info:This is a script.")</span><br><span class="line">    endif</span><br><span class="line">endfunc</span><br><span class="line">func SetTitle()</span><br><span class="line">    if expand("%:e") == 'py'</span><br><span class="line">        call setline(1, "#!/usr/bin/python")</span><br><span class="line">        call setline(2, "#Author:mint")</span><br><span class="line">        call setline(3, "#Blog:www.dookt.com")</span><br><span class="line">        call setline(4, "#Time:".strftime("%F %T"))</span><br><span class="line">        call setline(5, "#Name".expand("%"))</span><br><span class="line">        call setline(6, "#Verson:v1.0")</span><br><span class="line">        call setline(6, "#Info:This is a script.")</span><br><span class="line">    endif</span><br><span class="line">endfunc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个完成的HTTP请求过程</title>
      <link href="/post/34251.html"/>
      <url>/post/34251.html</url>
      
        <content type="html"><![CDATA[<p>LAMP架构主要用于发布WEB网页，发布HTML静态网页+PHP动态网页，Apache默认只能处理HTML静态网页，PHP动态网页交给PHP解释器（PHP模块）；</p><a id="more"></a><p>注:DNS解析流程可使用dig命令查看<br>dig +trace <a href="http://www.dookt.com">www.dookt.com</a></p><ul><li><p>用户在Chrome浏览器中输入域名：<a href="http://www.dookt.com，按下回车：Chrome浏览器会首先搜索浏览器自身的DNS缓存（缓存时间比较短，大概只有1分钟，且只能容纳1000条缓存），看自身的缓存中是否有www.dookt.com" target="_blank" rel="noopener">www.dookt.com，按下回车：Chrome浏览器会首先搜索浏览器自身的DNS缓存（缓存时间比较短，大概只有1分钟，且只能容纳1000条缓存），看自身的缓存中是否有www.dookt.com</a> 对应的条目，并且没有过期，如果有且没有过期则解析到此结束。Chrome自身的缓存可以使用 chrome://net-internals/#dns 查看</p></li><li><p>如果浏览器自身的缓存里面没有找到对应的条目，那么Chrome会搜索操作系统自身的DNS缓存,如果找到且没有过期则停止搜索解析到此结束.Windows系统,可以在命令行下使用 ipconfig /displaydns 来进行查看系统缓存</p></li><li><p>如果在Windows系统的DNS缓存也没有找到，那么尝试读取hosts文件（位于C:\Windows\System32\drivers\etc）Linux系统为（/etc/hosts），看看这里面有没有该域名对应的IP地址，如果有则系统会向服务器IP：80端口发起TCP三次握手（建立一个完整的数据传输通道），三次握手建立完毕之后，开始请求和发送HTTP数据请求</p></li><li><p>如果读取本地hosts文件，没有<a href="http://www.dookt.com对应的IP的记录，将域名查询请求交给本地DNS服务器（网卡配置文件指定的DNS" target="_blank" rel="noopener">www.dookt.com对应的IP的记录，将域名查询请求交给本地DNS服务器（网卡配置文件指定的DNS</a> 8.8.8.8），如果本地DNS缓存记录中有该域名+IP对应关系，直接返回IP，此种方式称为递归查询</p></li><li><p>如果本地DNS服务器缓存记录中没该域名+IP对应关系，将查询请求发往根DNS，根DNS不知道<a href="http://www.dookt.com.的IP地址，根DNS知道.net的DNS服务器，请求一级一级转发，.com" target="_blank" rel="noopener">www.dookt.com.的IP地址，根DNS知道.net的DNS服务器，请求一级一级转发，.com</a> DNS服务器也不知道<a href="http://www.dookt.com对应的IP，但是它知道dookt.com的DNS服务器，直到最后返回域名+IP对应关系" target="_blank" rel="noopener">www.dookt.com对应的IP，但是它知道dookt.com的DNS服务器，直到最后返回域名+IP对应关系</a></p></li><li><p>由根DNS、迭代DNS最终返回的域名+IP对应关系记录，交给本地DNS，本地DNS将IP信息返回客户端，同时在本地缓存一份，当下一次客户端再发起向该域名 IP请求时，可以直接返回</p></li><li><p>当Apache服务器接收到用户浏览器发起的请求之后，Apache服务器检测用户请求的网页类型，如果判断到用户请求的网页为HTML静态网页，Apache服务器处理该请求并且返回给用户数据，用户浏览器接收到服务器返回的数据之后，调取本地的软件来解析和渲染该数据，最终得到WEB页面</p></li><li><p>当Apache服务器判断用户请求的网页类型为PHP动态网页（Apache配置文件中定义一个AddType类型参数），Apache将动态网页请求交给PHP模块，Apache如何知道PHP模块在哪里？Apache+PHP模块共享内存空间，整合在一起，也可以理解为PHP模块是Apache外挂模块（第三方模块）</p></li><li><p>如果PHP模块接收到Apache发送的PHP动态网页请求，PHP解释器读取PHP网页文件，是否有后端MYSQL数据库信息获取，如果需要从后端获取数据库，PHP解释器基于PHP-MYSQL驱动读取后端MYSQL数据库中内容，最后网页内容+数据信息统一被PHP解释器解析为HTML静态网页</p></li><li><p>PHP解释器将解析之后的HTML静态网页交给Apache WEB服务器，Apache处理HTML静态网页，最终返回给用户浏览器</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看dd命令的进度</title>
      <link href="/post/22610.html"/>
      <url>/post/22610.html</url>
      
        <content type="html"><![CDATA[<p>使用dd命令刻录系统盘时，没有进度条，怎么查看进度呢？</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">watch -n 5 pkill -USR1 ^dd$</span><br><span class="line"></span><br><span class="line">watch -n 5 killall -USR1 dd</span><br><span class="line"></span><br><span class="line">while killall -USR1 dd; do sleep 5; done</span><br><span class="line"></span><br><span class="line">while (ps auxww |grep " dd " |grep -v grep |awk '&#123;print $2&#125;' |while read pid; do kill -USR1 $pid; done) ; do sleep 5; done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell基础</title>
      <link href="/post/52853.html"/>
      <url>/post/52853.html</url>
      
        <content type="html"><![CDATA[<p>shell字符串操作</p><a id="more"></a><h5 id="判断表达式"><a href="#判断表达式" class="headerlink" title="判断表达式"></a>判断表达式</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if test 表达式为真  if [ 表达式 ]</span><br><span class="line">if test !表达式为假 if [ !表达式 ]</span><br><span class="line">test 表达式1 –a 表达式2 if [ 表达式1 -a 表达式2 ] 两个表达式都为真</span><br><span class="line">test 表达式1 –o 表达式2 if [ 表达式1 -o 表达式2 ] 两个表达式有一个为真</span><br></pre></td></tr></table></figure><h5 id="判断字符串"><a href="#判断字符串" class="headerlink" title="判断字符串"></a>判断字符串</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test –n 字符串 if [ &amp;nbsp;-n 字符串 ]  字符串的长度是否非零</span><br><span class="line">test –z 字符串 if [ &amp;nbsp;-z 字符串 ] 字符串的长度是否为零</span><br><span class="line">test 字符串1＝字符串2 if [ &amp;nbsp;字符串１=字符串２ ]  字符串是否相等</span><br><span class="line">test 字符串1!＝字符串2 if [ &amp;nbsp;字符串１!=字符串２ ]  字符串是否不等</span><br></pre></td></tr></table></figure><h5 id="判断整数"><a href="#判断整数" class="headerlink" title="判断整数"></a>判断整数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test 整数1 –eq 整数2 if [ 1 -eq 2 ]   整数是否相等</span><br><span class="line">test 整数1 –ge 整数2 if [ 1 -ge 2 ]   整数1是否大于等于整数2</span><br><span class="line">test 整数1 –gt 整数2 if [ 1 -gt 2 ]  整数1是否大于整数2</span><br><span class="line">test 整数1 –le 整数2   整数1小于等于整数2</span><br><span class="line">test 整数1 –lt 整数2   整数1是否小于整数2</span><br><span class="line">test 整数1 –ne 整数2   整数1是否不等于整数2</span><br></pre></td></tr></table></figure><h5 id="判断文件"><a href="#判断文件" class="headerlink" title="判断文件"></a>判断文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">test File1 –ef File2    两个文件具有同样的设备号和i结点号</span><br><span class="line">test File1 –nt File2   文件1比文件2 新</span><br><span class="line">test File1 –ot File2   文件1比文件2 旧</span><br><span class="line">test –b File    文件存在并且是块设备文件</span><br><span class="line">test –c File    文件存在并且是字符设备文件</span><br><span class="line">test –d File    文件存在并且是目录</span><br><span class="line">test –e File    文件存在</span><br><span class="line">test –f File    文件存在并且是正规文件</span><br><span class="line">test –g File    文件存在并且是设置了组ID</span><br><span class="line">test –G File    文件存在并且属于有效组ID</span><br><span class="line">test –h File    文件存在并且是一个符号链接（同-L）</span><br><span class="line">test –k File    文件存在并且设置了sticky位</span><br><span class="line">test –b File    文件存在并且是块设备文件</span><br><span class="line">test –L File    文件存在并且是一个符号链接（同-h）</span><br><span class="line">test –o File    文件存在并且属于有效用户ID</span><br><span class="line">test –p File    文件存在并且是一个命名管道</span><br><span class="line">test –r File    文件存在并且可读</span><br><span class="line">test –s File    文件存在并且是一个套接字</span><br><span class="line">test –t FD      文件描述符是在一个终端打开的</span><br><span class="line">test –u File    文件存在并且设置了它的set-user-id位</span><br><span class="line">test –w File    文件存在并且可写</span><br><span class="line">test –x File    文件存在并且可执行</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维基本功 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Linux服务器发送邮件</title>
      <link href="/post/40639.html"/>
      <url>/post/40639.html</url>
      
        <content type="html"><![CDATA[<p>Linux服务器如何发送邮件呢</p><a id="more"></a><h5 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mailx</span><br></pre></td></tr></table></figure><h5 id="配置第三方SMTP"><a href="#配置第三方SMTP" class="headerlink" title="配置第三方SMTP"></a>配置第三方SMTP</h5><p>vi /etc/mail.rc<br>在文档末添加如下设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set from="1831xxxx@163.com"    # 发信电子邮件地址</span><br><span class="line">set smtp=smtp.163.com                # 发信服务器地址</span><br><span class="line">set smtp-auth=login                  # 认证方式</span><br><span class="line">set smtp-auth-user=1831xxxx@163.com      # 发信认证账户</span><br><span class="line">set smtp-auth-password=*****      # 发信认证账户密码(授权码)</span><br></pre></td></tr></table></figure><h5 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo "Text"|mail -s Subject 1831xxxx.163.com</span><br><span class="line">mail -s "This is a test mail" 18313178130@163.com &amp;lt; /tmp/test.log    #后接文本内容,邮件正文</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fedora安装网易云音乐</title>
      <link href="/post/7564.html"/>
      <url>/post/7564.html</url>
      
        <content type="html"><![CDATA[<p>Feodra安装网易云音乐</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install --nogpgcheck http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-24.noarch.rpm</span><br><span class="line">sudo config-manager --add-repo=http://repo.fdzh.org/FZUG/FZUG.repo</span><br><span class="line">sudo dnf install gstreamer-plugins-bad gstreamer-plugins-bad-free-extras gstreamer-plugins-ugly gstreamer-ffmpeg gstreamer1-libav gstreamer1-plugins-bad-free-extras gstreamer1-plugins-bad-freeworld gstreamer-plugins-base-tools gstreamer1-plugins-good-extras gstreamer1-plugins-ugly gstreamer1-plugins-bad-free gstreamer1-plugins-good gstreamer1-plugins-base gstreamer1</span><br><span class="line">yum -y install netease-cloud-music-1.0.0-1.x86_64.rpm</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防止linux命令行登录mysql登录密码泄露</title>
      <link href="/post/64911.html"/>
      <url>/post/64911.html</url>
      
        <content type="html"><![CDATA[<p>使用linux命令行登录mysql，会在history中记录下mysql的登录用户名密码.怎样才能隐藏呢?</p><a id="more"></a><h5 id="可以使用环境变量HISTCONTROL"><a href="#可以使用环境变量HISTCONTROL" class="headerlink" title="可以使用环境变量HISTCONTROL"></a>可以使用环境变量HISTCONTROL</h5><p>可以使用环境变量HISTCONTROL=ignorespace首先执行该命令,在需要不记录的命令前添加一个空格</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo "export HISTCONTROL=ignorespace" &gt;&gt; /etc/profile    #使HISTCONTROL=ignorespace全局生效</span><br><span class="line">  source /etc/profile</span><br><span class="line">  mysql -uroot -p123456         #最前方有空格,此时history不会记录</span><br><span class="line">  history -d 3007           #删除第3007条历史记录</span><br></pre></td></tr></table></figure><h5 id="配置用户名、密码在配置文件中"><a href="#配置用户名、密码在配置文件中" class="headerlink" title="配置用户名、密码在配置文件中"></a>配置用户名、密码在配置文件中</h5><p>带密码的启动、备份脚本使用700权限,修改用户组为root把密码写入my.cnf文件,使用700权限,修改用户组为mysql  (在文件[client])断添加user=root password=123456)</p><h5 id="当然使用交互式输入密码则无需以上几种操作"><a href="#当然使用交互式输入密码则无需以上几种操作" class="headerlink" title="当然使用交互式输入密码则无需以上几种操作"></a>当然使用交互式输入密码则无需以上几种操作</h5>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper单节点-伪集群-集群环境部署</title>
      <link href="/post/23319.html"/>
      <url>/post/23319.html</url>
      
        <content type="html"><![CDATA[<p>zookeeper部署有三种方式（单机版、伪集群—多实例、集群模式）</p><a id="more"></a><h5 id="单机版zk部署"><a href="#单机版zk部署" class="headerlink" title="单机版zk部署"></a>单机版zk部署</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://mirrors.dookt.com/zookeeper/zookeeper-3.4.10.tar.gz</span><br><span class="line">tar -xzvf zookeeper-3.4.10.tar.gz</span><br><span class="line">mv zookeeper-3.4.10 /usr/local/zookeeper</span><br><span class="line">grep "^[a-z]" /usr/locl/zookeeper/conf/zoo_sample.cfg &gt;/usr/local/zookeeper/zoo.cfg</span><br><span class="line">sed -i 's/dataDir=@/tmp/zookeeper@/usr/local/zookeeper/data@g' usr/local/zookeeper/conf/zoo.cfg</span><br></pre></td></tr></table></figure><p>tickTime=2000 ##超时配置的基本单位，2000ms，1 <em>tickTime是客户端与zk服务端的心跳时间，20</em> tickTime是客户端会话的超时时间。<br>initLimit=10 ##initLimit配置follower与leader之间建立连接后进行同步的最长时间<br>syncLimit=5 ##配置follower和leader之间发送消息，请求和应答的最大时间长度<br>dataDir=/usr/local/zookeeper/zk/data ##无默认配置，必须配置，用于配置存储快照文件的目录。如果没有配置dataLogDir，那么事务日志也会存储在此目录<br>clientPort=2181 ##zk服务进程监听的TCP端口，默认情况下，服务端会监听2181端口<br>修改dataDir目录为实际目录 增加dataLogDir 路径</p><h5 id="伪集群配置（单台主机172-17-0-1，多实例部署，启用不同端口）"><a href="#伪集群配置（单台主机172-17-0-1，多实例部署，启用不同端口）" class="headerlink" title="伪集群配置（单台主机172.17.0.1，多实例部署，启用不同端口）"></a>伪集群配置（单台主机172.17.0.1，多实例部署，启用不同端口）</h5><p>实例一配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/usr/local/zookeeper01/data</span><br><span class="line">dataLogDir=/usr/local/zookeeper01/data</span><br><span class="line">clientPort=2181</span><br><span class="line">server.1=172.17.0.1:2888:3888</span><br><span class="line">server.2=172.17.0.1:4888:5888</span><br><span class="line">server.3=172.17.0.1:6888:7888</span><br></pre></td></tr></table></figure><h5 id="实例二配置如下："><a href="#实例二配置如下：" class="headerlink" title="实例二配置如下："></a>实例二配置如下：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/usr/local/zookeeper02/data</span><br><span class="line">dataLogDir=/usr/local/zookeeper02/data</span><br><span class="line">clientPort=2182</span><br><span class="line">server.1=172.17.0.1:2888:3888</span><br><span class="line">server.2=172.17.0.1:4888:5888</span><br><span class="line">server.3=172.17.0.1:6888:7888</span><br></pre></td></tr></table></figure><h5 id="实例三配置如下："><a href="#实例三配置如下：" class="headerlink" title="实例三配置如下："></a>实例三配置如下：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000 </span><br><span class="line">initLimit=10 </span><br><span class="line">syncLimit=5 </span><br><span class="line">dataDir=/usr/local/zookeeper03/data </span><br><span class="line">dataLogDir=/usr/local/zookeeper03/data </span><br><span class="line">clientPort=2183 </span><br><span class="line">server.1=172.17.0.1:2888:3888 </span><br><span class="line">server.2=172.17.0.1:4888:5888 </span><br><span class="line">server.3=172.17.0.1:6888:7888</span><br></pre></td></tr></table></figure><h5 id="配置节点ID（在每个zk实例中添加myid）"><a href="#配置节点ID（在每个zk实例中添加myid）" class="headerlink" title="配置节点ID（在每个zk实例中添加myid）"></a>配置节点ID（在每个zk实例中添加myid）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /usr/local/zookeeper01/data/myid</span><br><span class="line">echo 2 &gt; /usr/local/zookeeper02/data/myid</span><br><span class="line">echo 3 &gt; /usr/local/zookeeper03/data/myid</span><br></pre></td></tr></table></figure><p>集群版本部署（集群版本需要复制几份，添加myid），各节点配置如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /usr/<span class="built_in">local</span>/zookeeper/conf/zoo.cfg</span></span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/usr/local/zookeeper/data</span><br><span class="line">clientPort=2181</span><br><span class="line">server.1=172.17.0.2:2888:3888</span><br><span class="line">server.2=172.17.0.3:2888:3888</span><br><span class="line">server.3=172.17.0.4:2888:3888</span><br></pre></td></tr></table></figure><h5 id="分别在不同zk节点上执行一下语句"><a href="#分别在不同zk节点上执行一下语句" class="headerlink" title="分别在不同zk节点上执行一下语句"></a>分别在不同zk节点上执行一下语句</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; usr/local/zookeeper/data/myid</span><br><span class="line">echo 2 &gt; usr/local/zookeeper/data/myid</span><br><span class="line">echo 3 &gt; usr/local/zookeeper/data/myid</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高可用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rocketmq双master集群部署</title>
      <link href="/post/19268.html"/>
      <url>/post/19268.html</url>
      
        <content type="html"><![CDATA[<p>Apache RocketMQ是一个分布式消息传递和流媒体平台，具有低延迟、高性能和可靠性、万亿级别的容量和灵活的可伸缩性。</p><a id="more"></a><h5 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h5><p>172.17.0.17    rocketmqnameserver1,broker-a    Master1<br>172.17.0.18    rocketmqnameserver2,broker-b    Master2</p><p>注：两台机器上安装好jdk1.8，并关闭防火墙</p><h5 id="配置host文件"><a href="#配置host文件" class="headerlink" title="配置host文件"></a>配置host文件</h5><p>分别在这两台机器的hosts文件中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/hosts</span></span><br><span class="line"><span class="meta">#</span><span class="bash">rocketmq </span></span><br><span class="line">172.17.0.17 rocketmq-nameserver1</span><br><span class="line">172.17.0.17 rocketmq-master1</span><br><span class="line">172.17.0.18 rocketmq-nameserver2</span><br><span class="line">172.17.0.18 rocketmq-master2</span><br></pre></td></tr></table></figure><h5 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h5><p>17上执行命令：hostnamectl set-hostname rocketmq-nameserver1<br>18上执行命令：hostnamectl set-hostname rocketmq-nameserver2</p><h5 id="安装rocketmq"><a href="#安装rocketmq" class="headerlink" title="安装rocketmq"></a>安装rocketmq</h5><p>/opt/package/rocketmq-all-4.1.0-incubating-bin-release.zip到/opt/app，并命名为rocketmq</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unzip rocketmq-all-4.1.0-incubating-bin-release.zip /opt/app</span><br><span class="line">mv /opt/app/rocketmq-all-4.1.0-incubating/ /opt/app/rocketmq</span><br></pre></td></tr></table></figure><h5 id="创建rocketmq存储的相关文件及路径"><a href="#创建rocketmq存储的相关文件及路径" class="headerlink" title="创建rocketmq存储的相关文件及路径"></a>创建rocketmq存储的相关文件及路径</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/data/rocketmq</span><br><span class="line">touch /opt/data/rocketmq/commitlog /opt/data/rocketmq/consumequeue /opt/data/rocketmq/index /opt/data/rocketmq/checkpoint /opt/data/rocketmq/abort</span><br></pre></td></tr></table></figure><h5 id="修改broker的配置文件"><a href="#修改broker的配置文件" class="headerlink" title="修改broker的配置文件"></a>修改broker的配置文件</h5><p>17上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /opt/app/rocketmq/conf/2m-noslave/broker-a.properties</span></span><br><span class="line">brokerClusterName=DefaultCluster</span><br><span class="line">brokerName=broker-a</span><br><span class="line">brokerId=0</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=48</span><br><span class="line">brokerRole=ASYNC_MASTER</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br><span class="line">namesrvAddr=mq-nameserver-1:9876;mq-nameserver-2:9876</span><br><span class="line"><span class="meta">#</span><span class="bash">存储路径</span></span><br><span class="line">storePathRootDir=/opt/data/rocketmq/</span><br><span class="line"><span class="meta">#</span><span class="bash">commitLog 存储路径</span></span><br><span class="line">storePathCommitLog=/opt/data/rocketmq/commitlog</span><br><span class="line"><span class="meta">#</span><span class="bash">消费队列存储路径存储路径</span></span><br><span class="line">storePathConsumeQueue=/opt/data/rocketmq/consumequeue</span><br><span class="line"><span class="meta">#</span><span class="bash">消息索引存储路径</span></span><br><span class="line">storePathIndex=/opt/data/rocketmq/index</span><br><span class="line"><span class="meta">#</span><span class="bash">checkpoint 文件存储路径</span></span><br><span class="line">storeCheckpoint=/opt/data/rocketmq/checkpoint</span><br><span class="line"><span class="meta">#</span><span class="bash">abort 文件存储路径</span></span><br><span class="line">abortFile=/opt/data/rocketmq/abort</span><br></pre></td></tr></table></figure><p>17上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /opt/app/rocketmq/conf/2m-noslave/broker-b.properties</span></span><br><span class="line">brokerClusterName=DefaultCluster</span><br><span class="line">brokerName=broker-b</span><br><span class="line">brokerId=0</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=48</span><br><span class="line">brokerRole=ASYNC_MASTER</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br><span class="line">namesrvAddr=mq-nameserver-1:9876;mq-nameserver-2:9876</span><br></pre></td></tr></table></figure><p>18上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /opt/app/rocketmq/conf/2m-noslave/broker-a.properties</span></span><br><span class="line">brokerClusterName=DefaultCluster</span><br><span class="line">brokerName=broker-a</span><br><span class="line">brokerId=0</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=48</span><br><span class="line">brokerRole=ASYNC_MASTER</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br><span class="line">namesrvAddr=mq-nameserver-1:9876;mq-nameserver-2:9876</span><br><span class="line"><span class="meta">#</span><span class="bash">存储路径</span></span><br><span class="line">storePathRootDir=/opt/data/rocketmq/</span><br><span class="line"><span class="meta">#</span><span class="bash">commitLog 存储路径</span></span><br><span class="line">storePathCommitLog=/opt/data/rocketmq/commitlog</span><br><span class="line"><span class="meta">#</span><span class="bash">消费队列存储路径存储路径</span></span><br><span class="line">storePathConsumeQueue=/opt/data/rocketmq/consumequeue</span><br><span class="line"><span class="meta">#</span><span class="bash">消息索引存储路径</span></span><br><span class="line">storePathIndex=/opt/data/rocketmq/index</span><br><span class="line"><span class="meta">#</span><span class="bash">checkpoint 文件存储路径</span></span><br><span class="line">storeCheckpoint=/opt/data/rocketmq/checkpoint</span><br><span class="line"><span class="meta">#</span><span class="bash">abort 文件存储路径</span></span><br><span class="line">abortFile=/opt/data/rocketmq/abort</span><br></pre></td></tr></table></figure><p>18上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /opt/app/rocketmq/conf/2m-noslave/broker-b.properties</span></span><br><span class="line">brokerClusterName=DefaultCluster</span><br><span class="line">brokerName=broker-b</span><br><span class="line">brokerId=0</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=48</span><br><span class="line">brokerRole=ASYNC_MASTER</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br><span class="line">namesrvAddr=mq-nameserver-1:9876;mq-nameserver-2:9876</span><br></pre></td></tr></table></figure><h5 id="修改日志配置文件"><a href="#修改日志配置文件" class="headerlink" title="修改日志配置文件"></a>修改日志配置文件</h5><p>分别修改两台机器的日志配置文件并且把conf目录下所有xml文件中的${user.home}替换为/opt/app/rocketmq</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/logs/rocketmq</span><br><span class="line">cd /opt/app/rocketmq/conf</span><br><span class="line">sed -i 's#$&#123;user.home&#125;#/opt/app/rocketmq#g' *.xml</span><br></pre></td></tr></table></figure><p>分别修改两台机器的rocketmq启动脚本 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /opt/app/rocketmq/bin/runbroker.sh</span></span><br><span class="line">JAVA_OPT="$&#123;JAVA_OPT&#125; -server -Xms8g -Xmx8g -Xmn4g -XX:PermSize=128m -XX:MaxPermSize=320m"</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /opt/app/rocketmq/bin/runserver.sh</span></span><br><span class="line">JAVA_OPT="$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:PermSize=128m -XX:MaxPermSize=320m"</span><br></pre></td></tr></table></figure><p>注：若配置过低，请记得调整jvm参数，Xms为启动时分配的内存，Xmx为运行过程中分配的最大内存，Xmn为<strong><strong>_____</strong></strong>,可做如下配置：Xms512m -Xmx512m -Xmn256m</p><h5 id="分别启动nameserver"><a href="#分别启动nameserver" class="headerlink" title="分别启动nameserver"></a>分别启动nameserver</h5><p>启动NameServer（特别注意：在启动 BrokerServer 之前先关闭防火墙）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/app/rocketmq/bin</span><br><span class="line">nohup sh mqnamesrv &amp;amp;</span><br></pre></td></tr></table></figure><h5 id="启动BrokerServer"><a href="#启动BrokerServer" class="headerlink" title="启动BrokerServer"></a>启动BrokerServer</h5><p>broker-a:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/app/rocketmq/bin&lt;br /&gt;</span><br><span class="line">nohup sh mqbroker -c /opt/app/rocketmq/conf/2m-noslave/broker-a.properties /dev/null 2</span><br><span class="line">netstat -ntlp</span><br><span class="line">jps</span><br><span class="line">tail -f -n 500 /usr/local/software/rocketmq/logs/rocketmqlogs/broker.log</span><br><span class="line">tail -f -n 500 /usr/local/software/rocketmq/logs/rocketmqlogs/namesrv.log</span><br></pre></td></tr></table></figure><p>broker-b:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/app/rocketmq/bin</span><br><span class="line">nohup sh mqbroker -c /opt/app/rocketmq/conf/2m-noslave/broker-b.properties /dev/null 2</span><br><span class="line">netstat -ntlp</span><br><span class="line">jps</span><br><span class="line">tail -f -n 500 /usr/local/software/rocketmq/logs/rocketmqlogs/broker.log</span><br><span class="line">tail -f -n 500 /usr/local/software/rocketmq/logs/rocketmqlogs/namesrv.log</span><br></pre></td></tr></table></figure><h5 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h5><p>先停止broker 在停止 namesrv&lt;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/app/rocketmq/bin</span><br><span class="line">sh mqshutdown broker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高可用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis主从哨兵集群</title>
      <link href="/post/35151.html"/>
      <url>/post/35151.html</url>
      
        <content type="html"><![CDATA[<p>单机redis宕机之后，不能正常提供服务，此时就需要部署Redis哨兵集群(一主两从三哨兵)来实现高可用</p><a id="more"></a><h5 id="系统环境-redis-4-0-9，docker-centos6-3"><a href="#系统环境-redis-4-0-9，docker-centos6-3" class="headerlink" title="系统环境(redis-4.0.9，docker_centos6.3)"></a>系统环境(redis-4.0.9，docker_centos6.3)</h5><table><thead><tr><th>主机名</th><th>IP地址</th><th>软件包</th></tr></thead><tbody><tr><td>redis01</td><td>172.17.0.11</td><td>master,sentinel01</td></tr><tr><td>redis02</td><td>172.17.0.11</td><td>slave01,sentinel01</td></tr><tr><td>redis03</td><td>172.17.0.11</td><td>slave02,sentinel01</td></tr></tbody></table><h5 id="安装部署（每个节点都需安装）"><a href="#安装部署（每个节点都需安装）" class="headerlink" title="安装部署（每个节点都需安装）"></a>安装部署（每个节点都需安装）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf redis-4.0.9.tar.gz -C /usr/local/</span><br><span class="line">mv /usr/local/redis-4.0.9 /usr/local/redis</span><br><span class="line">make PREFIX=/usr/local/redis install</span><br></pre></td></tr></table></figure><h5 id="配置master（172-17-0-11）"><a href="#配置master（172-17-0-11）" class="headerlink" title="配置master（172.17.0.11）"></a>配置master（172.17.0.11）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode no</span><br><span class="line">port 6379</span><br><span class="line">tcp-backlog 511</span><br><span class="line">timeout 0</span><br><span class="line">tcp-keepalive 300</span><br><span class="line">daemonize yes</span><br><span class="line">supervised no</span><br><span class="line">pidfile "/var/run/redis_6379.pid"</span><br><span class="line">loglevel notice</span><br><span class="line">logfile "/var/log/redis_6379.log"</span><br><span class="line">databases 16</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes</span><br><span class="line">dbfilename "dump.rdb"</span><br><span class="line">dir "/var/lib/redis/6379"</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line">slave-read-only yes</span><br><span class="line">repl-diskless-sync no</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line">slave-priority 100</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename "appendonly.aof"</span><br><span class="line">appendfsync everysec</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">aof-load-truncated yes</span><br><span class="line">lua-time-limit 5000</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 128</span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line">notify-keyspace-events ""</span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line">list-compress-depth 0</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line">activerehashing yes</span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit slave 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line">hz 10</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line">slaveof 172.17.0.11 6379</span><br></pre></td></tr></table></figure><h5 id="配置slave（172-17-0-12-172-17-0-13）"><a href="#配置slave（172-17-0-12-172-17-0-13）" class="headerlink" title="配置slave（172.17.0.12,172.17.0.13）"></a>配置slave（172.17.0.12,172.17.0.13）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode no</span><br><span class="line">port 6379</span><br><span class="line">tcp-backlog 511</span><br><span class="line">timeout 0</span><br><span class="line">tcp-keepalive 300</span><br><span class="line">daemonize yes</span><br><span class="line">supervised no</span><br><span class="line">pidfile "/var/run/redis_6379.pid"</span><br><span class="line">loglevel notice</span><br><span class="line">logfile "/var/log/redis_6379.log"</span><br><span class="line">databases 16</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes</span><br><span class="line">dbfilename "dump.rdb"</span><br><span class="line">dir "/var/lib/redis/6379"</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line">slave-read-only yes</span><br><span class="line">repl-diskless-sync no</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line">slave-priority 100</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename "appendonly.aof"</span><br><span class="line">appendfsync everysec</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">aof-load-truncated yes</span><br><span class="line">lua-time-limit 5000</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 128</span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line">notify-keyspace-events ""</span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line">list-compress-depth 0</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line">activerehashing yes</span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit slave 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line">hz 10</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line">slaveof 172.17.0.11 6379</span><br></pre></td></tr></table></figure><h5 id="配置哨兵（172-17-0-11，172-17-0-12-172-17-0-13）"><a href="#配置哨兵（172-17-0-11，172-17-0-12-172-17-0-13）" class="headerlink" title="配置哨兵（172.17.0.11，172.17.0.12,172.17.0.13）"></a>配置哨兵（172.17.0.11，172.17.0.12,172.17.0.13）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">port 26379</span><br><span class="line">daemonize yes</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##定义目录存放</span></span></span><br><span class="line">dir "/var/lib/redis/sentinel"</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##监控mymaster(可自定义-但只能包括A-z 0-9和”._-”)，注意quorum只影响ODOWN的判断，但是不影响failover，发生failover的条件必须是半数sentinel认为老Master已经ODOWN。此参数建议设置为sentinel/2+1的数值，否则可能会产生脑裂。</span></span></span><br><span class="line">sentinel myid 25370cfd146b4a7302f5c40f3c402f7869d53ce7</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##mymaster多久不响应认为SDOWN，设置为3100也就是说3次ping失败后认为SDOWN</span></span></span><br><span class="line">sentinel monitor mymaster 172.17.0.11 6379 2</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##如果在该时间（ms）内未能完成failover操作，则认为该failover失败</span></span></span><br><span class="line">sentinel down-after-milliseconds mymaster 3100</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##在执行故障转移时， 最多可以有多少个从Redis实例在同步新的主实例， 在从Redis实例较多的情况下这个数字越小，同步的时间越长，完成故障转移所需的时间就越长</span></span></span><br><span class="line">sentinel failover-timeout mymaster 15000</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##reconfig的时候执行的脚本（选配）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##sentinel client-reconfig-script mymaster /redis/script/failover.sh</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##出现任何sentinel在warning事件时候执行的脚本（选配）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##sentinel notification-script mymaster  /redis/script/notify.sh</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###日志位置</span></span></span><br><span class="line">logfile "/usr/local/redis/logs/sentinel.log"</span><br></pre></td></tr></table></figure><h5 id="服务启动停止，依次启动master-slave，sentinal"><a href="#服务启动停止，依次启动master-slave，sentinal" class="headerlink" title="服务启动停止，依次启动master,slave，sentinal"></a>服务启动停止，依次启动master,slave，sentinal</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-server redis.conf</span><br><span class="line">ps -ef | grep redis</span><br><span class="line">tail -f /usr/local/redis/logs/redis.conf</span><br><span class="line"></span><br><span class="line">/usr/local/redis/bin/redis-server redis.conf</span><br><span class="line">ps -ef | grep redis</span><br><span class="line">tail -f /usr/local/redis/logs/redis.conf</span><br><span class="line"></span><br><span class="line">/usr/local/redis/bin/redis-server sentinel.conf --protected-mode no &amp;gt; /usr/local/redis/logs/sentinel.log &amp;amp;</span><br><span class="line">ps -ef | grep redis</span><br><span class="line">tail -f /usr/local/redis/logs/sentinel.conf</span><br></pre></td></tr></table></figure><p>当主机宕掉的时候，会由哨兵从备机中推选出一台成为主机，当宕掉的主机再启动的时候就变成了备机。</p><p>当应用启动并连上哨兵后，如果哨兵宕掉，应用可以正常运行。但是，如果应用重启依然需要通过哨兵连接redis缓存（主机/备机），则无法正常</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高可用 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible使用小记</title>
      <link href="/post/28939.html"/>
      <url>/post/28939.html</url>
      
        <content type="html"><![CDATA[<p>ansible是一种自动化运维工具,基于paramiko开发的,并且基于模块化工作，Ansible是一种集成IT系统的配置管理、应用部署、执行特定任务的开源平台，它是基于python语言，由Paramiko和PyYAML两个关键模块构建。集合了众多运维工具的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能.ansible是基于模块工作的,本身没有批量部署的能力.真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架.ansible不需要在远程主机上安装client/agents，因为它们是基于ssh来和远程主机通讯的.</p><a id="more"></a><h5 id="ansible执行过程"><a href="#ansible执行过程" class="headerlink" title="ansible执行过程"></a>ansible执行过程</h5><ol><li>加载默认配置文件/etc/ansible/ansible.cfg</li><li>加载对应的模块文件，如command</li><li>通过ansible将模块或命令生成一个python文件，将其临时</li><li>拷贝至远程服务器的用户$HOME/.ansible/tmp/ansible-temp-数字-/xxx.py文件，并给文件执行权限（ansible执行原理）</li><li>执行并返回结果，删除临时文件，退出</li></ol><h5 id="主机清单"><a href="#主机清单" class="headerlink" title="主机清单"></a>主机清单</h5><p>假如服务器环境分为两类，“生产环境”和“测试环境”，当然生产环境又包括很多模块，所以需要更详细的分组，实例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cat /etc/ansible/hosts</span><br><span class="line"></span><br><span class="line">[procA]</span><br><span class="line">10.3.30.4</span><br><span class="line">10.3.30.5</span><br><span class="line"></span><br><span class="line">[procB]</span><br><span class="line">10.3.30.6</span><br><span class="line">10.3.30.7</span><br><span class="line"></span><br><span class="line">[procC]</span><br><span class="line">10.3.30.8</span><br><span class="line"></span><br><span class="line">[proc:children]</span><br><span class="line">procA</span><br><span class="line">procB</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ansible proc -m ping   #查看procA、procB的状态</span><br></pre></td></tr></table></figure><h5 id="ansible执行状态"><a href="#ansible执行状态" class="headerlink" title="ansible执行状态"></a>ansible执行状态</h5><ul><li>执行成功，并且不需要做改变的操作</li><li>黄色：执行成功，但未更改主机操作</li><li>红色：执行失败</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host_key_checking = False                #连接时不检查新主机，分发公钥是不在需要输入yes</span><br></pre></td></tr></table></figure><p>ansible-doc              #ansible 的帮助手册</p><h5 id="ansible-doc帮助手册"><a href="#ansible-doc帮助手册" class="headerlink" title="ansible-doc帮助手册"></a>ansible-doc帮助手册</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ansible-doc -l    #查看ansible支持的模块</span><br><span class="line"><span class="meta">#</span> ansible-doc -s copy   #简单查看copy模块用法</span><br></pre></td></tr></table></figure><h5 id="hostsname模块"><a href="#hostsname模块" class="headerlink" title="hostsname模块"></a>hostsname模块</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible 172.17.0.2 -m -a 'name=node1'</span><br></pre></td></tr></table></figure><h5 id="ping模块"><a href="#ping模块" class="headerlink" title="ping模块"></a>ping模块</h5><p>确认和远程主机之间是否能正常通信，正常则返回”pong”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m ping              #检测主机是否在线</span><br></pre></td></tr></table></figure><h5 id="setup模块"><a href="#setup模块" class="headerlink" title="setup模块"></a>setup模块</h5><p>该模块用于收集远程主机信息，setup模块给出的信息十分丰富，可使用filter参数进行过滤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m setup -a "filter=ansible-fqdn"     #查看所有主机的主机名</span><br></pre></td></tr></table></figure><h5 id="command-shell-script模块"><a href="#command-shell-script模块" class="headerlink" title="command | shell | script模块"></a>command | shell | script模块</h5><p>shell模块支持管道、变量，命令通过shell进程处理,scripts模块将脚本传到远程主机执行,comand模块不支持管道、变量，命令不通过shell处理，ansible默认command模块<br>chdir：运行命令前，先切换至指定目录<br>creates：创建文件，若文件存在则不执行命令<br>removes：删除文件，文件不存在则不执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m command -a "sh test.sh /chdir=/scripts"        #先进入到/scripts目录下，在执行test.sh脚本</span><br><span class="line">ansible all -m shell -a "ls /script|grep test"    #查找/scripts目录下包含test的文件或目录</span><br><span class="line">ansible all -m script -a "sh test.sh chdir=/scripts"   #先进入到/scripts目录下，在执行test.sh脚本</span><br></pre></td></tr></table></figure><h5 id="file模块"><a href="#file模块" class="headerlink" title="file模块"></a>file模块</h5><p>可完成文件或目录的创建，删除，权限修改<br>path：必选参数，用于指定操作的文件、目录，也可使用name，dest参数兼容低版本<br>state：可使用directory,touch,link,hard,absent值，directort为创建目录，touch为创建文件，link为创建软链接，hard为创建硬链接，absent为删除（目录、文件、链接）<br>src：state=link或hard时，表明是要创建链接，所以必须指定连接的文件，通过src指定链接源<br>force：state=link,可选yes或no，为yes时，若链接文件不存在时，会先创建链接文件，若链接目录中存在与链接文件同名的文件，会覆盖链接文件，若链接目录中存在与链接文件同名的文件，但源文件不存在时，会强制替换同名文件<br>owner：指定创建文件的属主<br>group：指定创建文件的属组<br>recurse：要操作的文件为目录是，recurse=yes,会递归操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m file -a "path=/tmp/test.txt state=touch"   #在/tmp目录下创建test.txt文件</span><br><span class="line">ansible all -m file -a "path=/tmp/test/ state=directory"     #在/tmp目录下创建test目录</span><br><span class="line">ansible all -m file -a "path=/usr/local/mysql/bin/* state=link dest=/usr/bin/ force=yes"       #创建mysql连接到链接到/usr/bin目录下</span><br><span class="line">ansible all -m file -a "path=/tmp/test.txt state=absent"       #删除/tmp目录下的文件test.txt</span><br></pre></td></tr></table></figure><h5 id="copy模块"><a href="#copy模块" class="headerlink" title="copy模块"></a>copy模块</h5><p>copy可以拷贝文件至远程服务器，<br>src：指定源文件<br>dest：指定文件拷贝到远程主机的位置<br>content：指定文件内容，与src必须有其一<br>backup：远程主机目标路径存在同名文件，并且与ansible主机文件不同时，对远程主机文件进行备份（添加一个时间戳），可选yes与no，若为yes，则先执行备份，再拷贝文件至远程主机<br>force：远程主机目标路径存在同名文件，并且与ansible主机文件内容不同时是否覆盖，可选yes或no，yes为覆盖，no不执行覆盖操作，文件内容不改变<br>owner：指定文件拷贝至远程主机后的属主，远程主机须有该用户，否则会报错<br>group：指定文件拷贝至远程主机后的属组，远程主机须有该组，否则会报错<br>mode：指定文件拷贝至远程主机后的权限，可使用mode=0644，mode=u+x等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m copy -a "src=test.txt dest=/tmp/test.txt backup=yes owner=redhat mode=644"      #拷贝test.txt到远程主机的/tmp目录，更改所有者为redhat，权限为644</span><br></pre></td></tr></table></figure><h5 id="yum模块"><a href="#yum模块" class="headerlink" title="yum模块"></a>yum模块</h5><p>用于远程主机上的软件管理<br>name：指定软件名，如nginx<br>state：指定软件包状态，默认为present，可使用installed、latest、absent、removed等值，installed与present为安装，latest为安装最新版，absent和removed为卸载<br>disable-gpg-check：禁用rpm包的gpg验证，默认为no不禁用验证，再yum源没有开启gpg验证时，需要设置此项为yes，否则报错无法进行安装<br>enablerepo：临时启用yum源<br>disablerepo：临时禁用yum源，可与enablerepo同时使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m yum -a "name=nginx state=installed check-gpg-check=yes"       #开启gpg校验安装nginx</span><br><span class="line">ansible zookeeper -m yum -a "name=/opt/package/jdk-8u191-linux-x64.rpm state=present"        #安装jdk这个rpm包</span><br><span class="line">ansible all -m yum -a "name=httpd,redis,php,mysql state=absent"      #卸载httpd,redis,php,mysql包</span><br><span class="line">ansible all -m yum -a "name=dstat upadte_cache=yes"    #清除缓存，再安装dstat</span><br></pre></td></tr></table></figure><h5 id="service模块"><a href="#service模块" class="headerlink" title="service模块"></a>service模块</h5><p>用于管理远程主机上的服务，启动、停止、重载、开机启动<br>name：指定服务名称，如nginx<br>state：指定服务状态，可使用started、stopped、restarted、reloaded<br>enabled：是否开机启动，可使用yes与no，yes表示开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m service -a "name=nginx state=restarted enabled=yes"      #开启nginx服务，并开机启动</span><br></pre></td></tr></table></figure><h5 id="user模块"><a href="#user模块" class="headerlink" title="user模块"></a>user模块</h5><p>用于管理远程主机系统用户<br>name: 指定用户名<br>comment：注释<br>create_home：是否穿件家目录（yes|no）<br>group：指定所属主组<br>groups：指定所属附加组<br>shell：指定shell的类型<br>home：指定用户家目录<br>remove：用于删除，当state=absent时，相当与userdel -r<br>system：指定为系统账号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m user -a 'name=nginx shell=/sbin/nologin system=yes home=/usr/local/nginx groups=root,bin uid=80 comment=Nginx service'   #添加系统用户nginx，并指定shell为/sbin/nologin，家目录为/usr/local/nginx，附加组为root、bin组，指定uid为80，注释为Nginx servie </span><br><span class="line">ansible all  -a "getent passwd nginx"  #查看nginx用户</span><br><span class="line">ansible all -m user -a 'name=nginx state=absent remove=yes'     #删除nginx用户及其家目录</span><br></pre></td></tr></table></figure><h5 id="group模块"><a href="#group模块" class="headerlink" title="group模块"></a>group模块</h5><p>gid：指定组ID<br>name：指定组名<br>state：指定删除还是新建组<br>system：指定系统组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m group -a 'name=nginx system=yes gid=80'    #创建系统组nginx，指定gid为80</span><br><span class="line">ansible all  -a 'getent group nginx'     #查看nginx组</span><br><span class="line">ansible all -m group -a 'name=nginx state=absent'     #删除nginx组</span><br></pre></td></tr></table></figure><h5 id="template模块"><a href="#template模块" class="headerlink" title="template模块"></a>template模块</h5><p>template模块与copy模块使用方法以及参数与copy模块一致，但template可以传递变量，以下例子zabbix_agentd.conf配置文件需要传递agent和server的IP地址，各个agent的IP地址不一样，此时IP地址即可作为变量传递。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m template -a "src=zabbix_agentd.conf dest=/etc/zabbix/zabbix_agentd.conf"       #拷贝带变量的zabbix_agentd.conf 文件到远程主机</span><br></pre></td></tr></table></figure><p>使用template模块分发zabbix-agent配置文件，</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">Push</span> <span class="string">config</span> <span class="string">file</span></span><br><span class="line"><span class="attr">    template:</span> <span class="string">src=zabbix_agentd.conf</span> <span class="string">dest=/etc/zabbix_agentd.conf</span> <span class="string">backup=yes</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">Restart</span> <span class="string">zabbix-agent</span> <span class="string">enable</span> <span class="string">boot</span> <span class="string">zabbix-agent</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">name=zabbix-agent</span> <span class="string">state=restarted</span> <span class="string">enabled=yes</span></span><br></pre></td></tr></table></figure><h5 id="cron模块"><a href="#cron模块" class="headerlink" title="cron模块"></a>cron模块</h5><p>可以再远程主机上添加计划任务，相当于crontab命令<br>minute：设置分钟，默认值为&#42;，minute=5<br>hour：设置小时，默认值为&#42;，hour=1,凌晨一点<br>day：设置天数，默认为&#42;，<br>month：设置月份<br>weekday：设置周<br>user：设置执行该计划任务的用户，需要远程主机上有该用户<br>jobs：指定计划任务中要执行的命令或脚本<br>name：该计划任务的名字<br>state：设置计划任务的状态，若该计划任务有名字，删除时，可使用state=absent<br>disabled：使计划任务失效，使用时必须指定名称，jobs以及执行任务的时间，还要保证完全相同，否则在注视任务的同时，任务时间会被修改<br>backup：修改或删除计划任务时，是否备份，可使用yes或no，yes时备份文件至tmp目录，备份文件名称可在返回信息的bakcup_file字段中看到，推荐设置此参数为yes</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m cron -a 'name="test ansible cron " hour=5 minute=10 jobs="echo test"'    #每天5:10输出字符串test，该计划任务的名字为test ansible cron</span><br><span class="line">ansible  all -m cron -a 'minute=* weekday=1,3,5 job="/usr/bin/wall FBI warning" name=Warning'    #周一周三周五每分钟执行一次广播</span><br><span class="line">ansible all -m cron -a 'disabled=true job="/usr/bin/wall FBI warning" name=Warning'     #关闭上一步骤的cron, disabled=(true|false|yes|no)</span><br><span class="line">ansible all -m cron -a 'disabled=no job="/usr/bin/wall FBI warning" name=Warning'     #启用上一步骤的cron, disabled=(true|false|yes|no)</span><br><span class="line">ansible all -m cron -a 'job="/usr/bin/wall FBI warning" name=Warning  state=absent'     #删除上一步骤的cron</span><br></pre></td></tr></table></figure><h5 id="authorized-key"><a href="#authorized-key" class="headerlink" title="authorized_key"></a>authorized_key</h5><p>新增公钥内容到服务器家目录.ssh下的authorized_keys文件，没有则创建authorized_keys文件<br>操作=（参数），参数必须<br>-exclusive：是否移除authorized_keys文件中其他非指定key<br>=key：公钥可以是字符串或url<br>-key_options：附加到key中的字符串，该串回家至key的开头，默认没有<br>-path：指定authorized_keys的存放位置，默认的家目录下.ssh/authorized_keys<br>state：添加移除，可使用present或absent<br>user：操作远程主机上的哪个用户的authorized_keys</p><h5 id="ansible-galaxy"><a href="#ansible-galaxy" class="headerlink" title="ansible-galaxy"></a>ansible-galaxy</h5><p>连接[ansible](<a href="https://galaxy.ansible.com" target="_blank" rel="noopener">https://galaxy.ansible.com</a>  ansible网站)网站下载相应的roles</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ansible-galaxy list    #列出所有已安装的galaxy</span><br><span class="line">anisble-galaxy install geerlingguy.redis           #安装galaxy</span><br><span class="line">ansible-galaxy remove geelingguy.redis          #删除galaxy</span><br></pre></td></tr></table></figure><h5 id="ansible-pull"><a href="#ansible-pull" class="headerlink" title="ansible-pull"></a>ansible-pull</h5><p>推送命令至远程，效率无限提升</p><h5 id="ansible-vault"><a href="#ansible-vault" class="headerlink" title="ansible-vault"></a>ansible-vault</h5><p>加密playbook文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ansible-vault encrypt hello.yml      #加密</span><br><span class="line">ansible-vault decrypt hello.yml      #解密</span><br><span class="line">ansible-vault view hello.yml            #查看加密的playbook内容</span><br><span class="line">ansible-vault edit hello.yml             #编辑加密的ansible-vault rekey hello.yml            #修改playbook的加密密码</span><br><span class="line">ansible-vault create hello.yml            #创建加密的playbook文件</span><br></pre></td></tr></table></figure><h5 id="ansible-console"><a href="#ansible-console" class="headerlink" title="ansible-console"></a>ansible-console</h5><p>可交互式执行命令，支持tab</p><h5 id="ansible-playbook"><a href="#ansible-playbook" class="headerlink" title="ansible-playbook"></a>ansible-playbook</h5><p>playbook是由一个或多个play组成的列表<br>play的主要功能是将事先定义好的主机通过ansible中的task定义好的角色。将多个play组织在一个playbook中，可以联合起来按照事先写好的剧本排演，taks可理解为调用ansible的一个模块playbook通过yaml语言编写</p><h5 id="palybook变量"><a href="#palybook变量" class="headerlink" title="palybook变量"></a>palybook变量</h5><p>变量来源：</p><ol><li>ansible setup模块中的所有变量都可使用</li><li>在/etc/ansible/hosts中定义</li><li>在主机组中单独定义，优先级高于公共变量</li><li>通过命令行指定变量，优先级最高，ansible-playbook -e varname=value</li><li>在playbook中定义</li><li>在role中定义</li></ol><h5 id="palybook核心元素"><a href="#palybook核心元素" class="headerlink" title="palybook核心元素"></a>palybook核心元素</h5><p>Hosts：执行远程任务的主机列表<br>Tasks：任务集<br>Varniables：内置变量或自定义变量在playbook中调用<br>Template：模板，可替换模板文件中的变量并实现一些简单逻辑操作的文件<br>Handers和Notify结合使用，由特定的条件触发，满足条件则执行，否则不执行<br>Tag标签：指定某条任务运行时，用于选择运行playbook的部分代码，ansible具有幂等性，因此会跳过没有变化的部分，但是，有些代码未测试其确没有发生变化的时间过长，此时，若确切没有发生变化，就可以通过tags跳过此代码片段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -t tagsname useradd.yml       #通过tags跳过此片段</span><br><span class="line">ansible-playbook -C file.yml       #检测可能发生的改变，不是真正的执行</span><br><span class="line">ansible-playbook file.yml  --limit 172.17.0.3       #只针对主机列表中的主机执行命令</span><br><span class="line">ansible-playbook file.yml --list-tasks    #查看任务列表</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  gather_facts:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">create</span> <span class="string">user</span></span><br><span class="line"><span class="attr">    user:</span> <span class="string">name=mint</span> <span class="string">home=/opt/mint</span> <span class="string">groups=wheel</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">create</span> <span class="string">dir</span></span><br><span class="line"><span class="attr">    file:</span> <span class="string">name=/data/</span> <span class="string">state=directory</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">create</span> <span class="string">file</span></span><br><span class="line"><span class="attr">    file:</span> <span class="string">name=/data/test_file.sh</span> <span class="string">mode=755</span> <span class="string">state=touch</span> <span class="string">owner=mint</span> <span class="string">group=mint</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">install</span> <span class="string">httpd</span></span><br><span class="line"><span class="attr">    yum:</span> <span class="string">name=httpd</span> <span class="string">state=present</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">startup</span> <span class="string">httpd</span> <span class="string">service</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">name=httpd</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br></pre></td></tr></table></figure><h5 id="Handers和Notify"><a href="#Handers和Notify" class="headerlink" title="Handers和Notify"></a>Handers和Notify</h5><p>handers是一个触发器，与tasks并列 ，监控其中一个action动作，如果一个action动作执行成功了，会触发handers后面定义的命令，配和Notify使用</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  gather_facts:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">install</span> <span class="string">httpd</span></span><br><span class="line"><span class="attr">    yum:</span> <span class="string">name=httpd</span> <span class="string">state=present</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">copy</span> <span class="string">config</span></span><br><span class="line"><span class="attr">    copy:</span> <span class="string">src=httpd.conf</span> <span class="string">dest=/etc/httpd/conf/httpd.conf</span> <span class="string">backup=yes</span></span><br><span class="line"><span class="attr">    notify:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">restart</span> <span class="string">service</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">startup</span> <span class="string">httpd</span> <span class="string">service</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">name=httpd</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  handlers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">restart</span> <span class="string">service</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">name=httpd</span> <span class="string">state=restarted</span></span><br></pre></td></tr></table></figure><p>可以指定标签执行,多个动作可共用一个标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cat httpd.yml</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  gather_facts:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">install</span> <span class="string">httpd</span></span><br><span class="line"><span class="attr">    yum:</span> <span class="string">name=httpd</span> <span class="string">state=present</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="string">inshttpd</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">copy</span> <span class="string">config</span></span><br><span class="line"><span class="attr">    copy:</span> <span class="string">src=httpd.conf</span> <span class="string">dest=/etc/httpd/conf/httpd.conf</span> <span class="string">backup=yes</span></span><br><span class="line"><span class="attr">    notify:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">restart</span> <span class="string">service</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">startup</span> <span class="string">httpd</span> <span class="string">service</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">name=httpd</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="string">rshttpd</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  handlers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">restart</span> <span class="string">service</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">name=httpd</span> <span class="string">state=restarted</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -t rshttpd httpd.yml</span><br></pre></td></tr></table></figure><h5 id="批量分发ssh公钥的playbook文件"><a href="#批量分发ssh公钥的playbook文件" class="headerlink" title="批量分发ssh公钥的playbook文件"></a>批量分发ssh公钥的playbook文件</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">gather_facts:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">become:</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">become_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">Push</span> <span class="string">ssh</span> <span class="string">pub</span> <span class="string">key</span> <span class="string">authorized_keys</span></span><br><span class="line"><span class="attr">    authorized_keys:</span></span><br><span class="line"><span class="attr">      user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      key:</span> <span class="string">"<span class="template-variable">&#123;&#123;lookup('file','/root/.ssh/id_rsa.pub')&#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">      state:</span> <span class="string">present</span></span><br><span class="line"><span class="attr">      exclusive:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><h5 id="主机清单-1"><a href="#主机清单-1" class="headerlink" title="主机清单"></a>主机清单</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>cat /etc/ansible/hosts</span><br><span class="line">[centos6]</span><br><span class="line">172.17.0.2  http_port=81</span><br><span class="line">172.17.0.3  http_port=82</span><br><span class="line">[centos7]</span><br><span class="line">172.17.0.6      http_port=81</span><br><span class="line">172.17.0.7      http_port=82</span><br><span class="line">[centos7:vars]</span><br><span class="line">http_port=80</span><br></pre></td></tr></table></figure><h5 id="模板Template"><a href="#模板Template" class="headerlink" title="模板Template"></a>模板Template</h5><p>*文本文件，嵌套脚本（使用模板编程语言编写）<br>*Jinja2语言，使用字面量（字母数字组合起来的），有如下形式</p><ul><li>字符串：使用单、双引号</li><li>数字：整数、浮点数</li><li>列表：[item1,item2,…]</li><li>元组：(item1,item2,…)</li><li>字典：{key1:value2,key2:value2,…}</li><li>布尔值：true/false</li><li>算数运算：+，-，<em>，/，//，%，*</em></li><li>比较操作：= =，!=，&gt;=，&lt;，&lt;=</li><li>逻辑运算：and，or，not</li><li>流表达式：For，If，When</li></ul><p>变量生效优先级：命令行直接定义（-e选项）&gt;  playbook &gt;  主机清单中普通变量 &gt;  主机清单中公共变量</p><h5 id="When语句"><a href="#When语句" class="headerlink" title="When语句"></a>When语句</h5><p>条件测试：如果需要根据变量，facts或此前任务的执行结果来作为task执行与否的前提时，要用到条件测试，通过when语句实现，在tasks中使用，jinja2的语法格式在task后添加when子句即可使用条件测试，when语句支持jinja2表达式语法</p><p>使用when语法，如果是redhat系统则执行/sbin/shutdown -h now命令</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">"shutdown Redhat system"</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">/sbin/shutdown</span> <span class="bullet">-h</span> <span class="string">now</span></span><br><span class="line"><span class="attr">  when:</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">"RedHat"</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat template.yml</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  vars:</span></span><br><span class="line"><span class="attr">  - http_port:</span> <span class="number">88</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">Install</span> <span class="string">nginx</span> <span class="string">server</span></span><br><span class="line"><span class="attr">    yum:</span> <span class="string">name=nginx</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">copy</span> <span class="string">template</span> <span class="string">for</span> <span class="number">7</span></span><br><span class="line"><span class="attr">    template:</span> <span class="string">src=nginx.conf7.j2</span> <span class="string">dest=/etc/nginx/nginx.conf</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">ansible_distribution_major_version</span> <span class="string">==</span> <span class="string">"7"</span>      <span class="comment">#使用When语法，当系统主版本是7，则拷贝nginx.conf7.j2</span></span><br><span class="line"><span class="attr">    notify:</span> <span class="string">restart</span> <span class="string">nginx</span>               <span class="comment">#当nginx配置文件改变时，执行Handers,此处与Handers名字一致</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">copy</span> <span class="string">template</span> <span class="string">for</span> <span class="number">6</span></span><br><span class="line"><span class="attr">    template:</span> <span class="string">src=nginx.conf6.j2</span> <span class="string">dest=/etc/nginx/nginx.conf</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">ansible_distribution_major_version</span> <span class="string">==</span> <span class="string">"6"</span>       <span class="comment">#使用When语法，当系统主版本是7，则拷贝nginx.conf7.j2</span></span><br><span class="line"><span class="attr">    notify:</span> <span class="string">restart</span> <span class="string">nginx</span>               <span class="comment">#当nginx配置文件改变时，执行Handers,此处与Handers名字一致</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">start</span> <span class="string">service</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">name=nginx</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br><span class="line"><span class="attr">  handlers:</span>                                   <span class="comment">#定义handlers重启nginx服务</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">restart</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">      service:</span> <span class="string">name=nginx</span> <span class="string">state=restarted</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook template.yml</span><br></pre></td></tr></table></figure><p>执行结果如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">PLAY [all] ********************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ********************************************************************************</span><br><span class="line">ok: [172.17.0.6]</span><br><span class="line">ok: [172.17.0.7]</span><br><span class="line">ok: [172.17.0.2]</span><br><span class="line">ok: [172.17.0.3]</span><br><span class="line"></span><br><span class="line">TASK [Install nginx server] ***************************************************************************</span><br><span class="line">ok: [172.17.0.3]</span><br><span class="line">ok: [172.17.0.2]</span><br><span class="line">ok: [172.17.0.6]</span><br><span class="line">ok: [172.17.0.7]</span><br><span class="line"></span><br><span class="line">TASK [copy template for 7] ****************************************************************************</span><br><span class="line">skipping: [172.17.0.2]</span><br><span class="line">skipping: [172.17.0.3]</span><br><span class="line">changed: [172.17.0.6]</span><br><span class="line">changed: [172.17.0.7]</span><br><span class="line"></span><br><span class="line">TASK [copy template for 6] ****************************************************************************</span><br><span class="line">skipping: [172.17.0.6]</span><br><span class="line">skipping: [172.17.0.7]</span><br><span class="line">changed: [172.17.0.2]</span><br><span class="line">changed: [172.17.0.3]</span><br><span class="line"></span><br><span class="line">TASK [start service] **********************************************************************************</span><br><span class="line">ok: [172.17.0.6]</span><br><span class="line">ok: [172.17.0.2]</span><br><span class="line">ok: [172.17.0.3]</span><br><span class="line">ok: [172.17.0.7]</span><br><span class="line"></span><br><span class="line">RUNNING HANDLER [restart nginx] ***********************************************************************</span><br><span class="line">changed: [172.17.0.3]</span><br><span class="line">changed: [172.17.0.6]</span><br><span class="line">changed: [172.17.0.7]</span><br><span class="line">changed: [172.17.0.2]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ********************************************************************************************</span><br><span class="line">172.17.0.2                 : ok=5    changed=2    unreachable=0    failed=0</span><br><span class="line">172.17.0.3                 : ok=5    changed=2    unreachable=0    failed=0</span><br><span class="line">172.17.0.6                 : ok=5    changed=2    unreachable=0    failed=0</span><br><span class="line">172.17.0.7                 : ok=5    changed=2    unreachable=0    failed=0</span><br></pre></td></tr></table></figure><p>结果分析：第一个skipping表示拷贝centos7的nginx配置文件,跳过centos6，第二个skipping表示拷贝centos6的nginx配置文件，跳过centos7，此时playbook 已经按要求分发nginx配置文件</p><h5 id="迭代：with-items"><a href="#迭代：with-items" class="headerlink" title="迭代：with_items()"></a>迭代：with_items()</h5><p>迭代：当有需要重复执行任务时，可以使用迭代机制<br>对迭代项目的引用，固定变量名为”item”<br>要在task中使用with_items 给定要迭代的元素列表<br>列表格式：字符串、字典</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">create</span> <span class="string">some</span> <span class="string">file</span></span><br><span class="line"><span class="attr">    file:</span> <span class="string">name=/opt/&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> <span class="string">state=touch</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">ansible_distribution_major_version</span> <span class="string">==</span> <span class="string">"7"</span></span><br><span class="line"><span class="attr">    with_items:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">file1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">file2</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">file3</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">install</span> <span class="string">some</span> <span class="string">package</span></span><br><span class="line"><span class="attr">    yum:</span> <span class="string">name=&#123;&#123;item&#125;&#125;</span></span><br><span class="line"><span class="attr">    when:</span> <span class="string">ansible_distribution_major_version</span> <span class="string">==</span> <span class="string">"6"</span></span><br><span class="line"><span class="attr">    with_items:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">hping3</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">htop</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">sl</span></span><br></pre></td></tr></table></figure><p>上述命令执行后，远程主机上会centos7上会创建文件file1、file2、file3，但不会安装hping3、htop、sl，centos6会安装hping3、htop、sl，但不会创建file1、file2、file3。</p><h5 id="迭代嵌套子变量"><a href="#迭代嵌套子变量" class="headerlink" title="迭代嵌套子变量"></a>迭代嵌套子变量</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">create</span> <span class="string">some</span> <span class="string">group</span></span><br><span class="line"><span class="attr">    group:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    with_items:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">g1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">g2</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">g3</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">create</span> <span class="string">some</span> <span class="string">user</span></span><br><span class="line"><span class="attr">    user:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item.name</span> <span class="string">&#125;&#125;</span> <span class="string">group=&#123;&#123;</span> <span class="string">item.group</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    with_items:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">&#123;</span> <span class="attr">name:</span> <span class="string">'u1'</span><span class="string">,</span> <span class="attr">group:</span> <span class="string">'g1'</span> <span class="string">&#125;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">&#123;</span> <span class="attr">name:</span> <span class="string">'u2'</span><span class="string">,</span> <span class="attr">group:</span> <span class="string">'g2'</span> <span class="string">&#125;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">&#123;</span> <span class="attr">name:</span> <span class="string">'u3'</span><span class="string">,</span> <span class="attr">group:</span> <span class="string">'g3'</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>执行该playbook后，会在远程主机上创建三个组g1、g2、g3、三个用户u1、u2、u3，并且u1在g1中，u2在g2中，u3在g3中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m sehll -a "id u1;id u2;id u3"     #查看创建情况</span><br></pre></td></tr></table></figure><h5 id="Playbook中的template-for-if"><a href="#Playbook中的template-for-if" class="headerlink" title="Playbook中的template for if"></a>Playbook中的template for if</h5><p>重复执行一段代码</p><p>创建nginx虚拟主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;&lt;code class="line-numbers"&gt;&#123;% for vhost in nginx_vhost %&#125;</span><br><span class="line"></span><br><span class="line">&#123;%  endfor %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维基本功 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ansible部署ELK+Filebeat+kafka+Zookeeper</title>
      <link href="/post/22227.html"/>
      <url>/post/22227.html</url>
      
        <content type="html"><![CDATA[<p>日志主要包括系统日志、应用程序日志和安全日志。系统运维和开发人员可以通过日志了解服务器软硬件信息、检查配置过程中的错误及错误发生的原因。经常分析日志可以了解服务器的负荷，性能安全性，从而及时采取措施纠正错误。通常，日志被分散的储存不同的设备上。如果你管理数十上百台服务器，你还在使用依次登录每台机器的传统方法查阅日志。这样是不是感觉很繁琐和效率低下。当务之急我们使用集中化的日志管理，例如：开源的syslog，将所有服务器上的日志收集汇总。集中化管理日志后，日志的统计和检索又成为一件比较麻烦的事情，一般我们使用grep、awk和wc等Linux命令能实现检索和统计，但是对于要求更高的查询、排序和统计等要求和庞大的机器数量依然使用这样的方法难免有点力不从心。</p><a id="more"></a><h5 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h5><table><thead><tr><th>主机名</th><th>IP地址</th><th>软件环境</th></tr></thead><tbody><tr><td>elk01</td><td>172.17.0.1</td><td>zookeeper,kafka</td></tr><tr><td>elk02</td><td>172.17.0.2</td><td>zookeeper,kafka</td></tr><tr><td>elk03</td><td>172.17.0.3</td><td>zookeeper,kafka</td></tr><tr><td>elk04</td><td>172.17.0.4</td><td>elasticsearch，logstash, kibana</td></tr><tr><td>elk05</td><td>172.17.0.5</td><td>elasticsearch，logstash</td></tr><tr><td>elk06</td><td>172.17.0.6</td><td>elasticsearch，logstash</td></tr><tr><td>elk07</td><td>172.17.0.7</td><td>elasticsearch，logstash</td></tr><tr><td>elk08</td><td>172.17.0.8</td><td>elasticsearch，logstash</td></tr><tr><td>elk09</td><td>172.17.0.9</td><td>elasticsearch，logstash</td></tr><tr><td>elk010</td><td>172.17.0.10</td><td>elasticsearch，logstash</td></tr></tbody></table><h5 id="修改ansible的hosts文件"><a href="#修改ansible的hosts文件" class="headerlink" title="修改ansible的hosts文件"></a>修改ansible的hosts文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cat /etc/ansible/hosts</span><br><span class="line">[kafka]</span><br><span class="line">172.17.0.1</span><br><span class="line">172.17.0.2</span><br><span class="line">172.17.0.3</span><br><span class="line"></span><br><span class="line">[elk]</span><br><span class="line">172.17.0.4</span><br><span class="line">172.17.0.5</span><br><span class="line">172.17.0.6</span><br><span class="line">172.17.0.7</span><br><span class="line">172.17.0.8</span><br><span class="line">172.17.0.9</span><br><span class="line">172.17.0.10</span><br></pre></td></tr></table></figure><h5 id="安装elasticsearch"><a href="#安装elasticsearch" class="headerlink" title="安装elasticsearch"></a>安装elasticsearch</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible elk -m yum -a "name=/opt/package/elasticsearch-6.2.4.rpm"</span><br></pre></td></tr></table></figure><h5 id="修改elasticsearch配置文件："><a href="#修改elasticsearch配置文件：" class="headerlink" title="修改elasticsearch配置文件："></a>修改elasticsearch配置文件：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cat /etc/elasticsearch/elasticsearch.yml</span><br><span class="line">cluster.name: test</span><br><span class="line">node.name: test-node-1</span><br><span class="line">path.data: /opt/data/elasticsearch</span><br><span class="line">path.logs: /opt/logs/elasticsearch</span><br><span class="line">bootstrap.memory_lock: false</span><br><span class="line">network.host: 172.17.0.2</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.zen.ping.unicast.hosts: ["172.16.0.4","172.16.0.5","172.16.0.6","172.16.0.7","172.16.0.8","172.16.0.9"，"172.16.0.10"]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/data/elasticsearch</span><br><span class="line">mkdir /opt/logs/elasticsearch</span><br><span class="line">chow -R elasticsearch. /opt/&#123;data,logs&#125;/elasticsearch</span><br><span class="line">service elasticsearch restart</span><br></pre></td></tr></table></figure><h5 id="安装kibana-只需要在一台机器上安装就行"><a href="#安装kibana-只需要在一台机器上安装就行" class="headerlink" title="安装kibana(只需要在一台机器上安装就行)"></a>安装kibana(只需要在一台机器上安装就行)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh kibana-6.2.4.rpm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> cat /etc/kibana/kibana.yml</span><br><span class="line">server.port: 5601</span><br><span class="line">server.host: "0.0.0.0"</span><br><span class="line">elasticsearch.url: "http://172.17.0.4:9200"</span><br><span class="line"></span><br><span class="line">service restart kibana</span><br></pre></td></tr></table></figure><h5 id="安装zookeeper集群"><a href="#安装zookeeper集群" class="headerlink" title="安装zookeeper集群"></a>安装zookeeper集群</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf zookeeper-3.4.10.tar.gz -C /opt/app</span><br><span class="line">mv zookeeper-3.4.10 zookeeper</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> cat /opt/app/zookeeper/conf/zoo.cfg</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/opt/data/zookeeper</span><br><span class="line">dataLogDir=/opt/logs/zookeeper</span><br><span class="line">clientPort=2181</span><br><span class="line">server.1=172.17.0.1:2889:3889</span><br><span class="line">server.2=172.17.0.2:2889:3889</span><br><span class="line">server.3=172.17.0.3:2889:3889</span><br></pre></td></tr></table></figure><p>分别在三台服务器上执行以下命令，需要配置hosts文件,不然找不到主机名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /opt/data/zookeeper/myid         #在1上执行</span><br><span class="line">echo 2&gt; /opt/data/zookeeper/myid          #在2上执行 </span><br><span class="line">echo 3 &gt; /opt/data/zookeeper/myid         #在3上执行</span><br><span class="line">/opt/app/zookeeper/bin/zkServer.sh start              #启动zookeeper节点</span><br></pre></td></tr></table></figure><h5 id="安装kafka集群"><a href="#安装kafka集群" class="headerlink" title="安装kafka集群"></a>安装kafka集群</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf kafka_2.11-2.0.1.tgz -C /opt/app</span><br><span class="line">mv kafka_2.11-2.0.1 kafka</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>cat /opt/app/kafka/config/server.properties</span><br><span class="line">broker.id=1                   #集群ID，集群中每台各不一样,需要修改每个节点,保证不一致</span><br><span class="line">hostname=172.17.0.1           #三个节点各自的IP地址</span><br><span class="line">port=9092</span><br><span class="line">num.network.threads=3</span><br><span class="line">num.io.threads=8</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line">log.dirs=/opt/logs/kafka            #kafka日志目录</span><br><span class="line">num.partitions=3            #单个broker上partations的个数，高并发可多配置。默认为１</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line">offsets.topic.replication.factor=1</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line">log.retention.hours=168                   #kafka日志保留时间</span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line">zookeeper.connect=172.17.0.1:2181,172.17.0.2:2181,172.17.0.3:2181</span><br><span class="line">zookeeper.connection.timeout.ms=6000          #连接zookeeper的超时时间</span><br><span class="line">group.initial.rebalance.delay.ms=0</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup  /opt/app/kafka/bin/kafka-server-start.sh /opt/app/kafka/config/server.properties &gt; /opt/logs/kafka/kafka.log &amp;amp;</span><br></pre></td></tr></table></figure><h5 id="安装filebeat"><a href="#安装filebeat" class="headerlink" title="安装filebeat"></a>安装filebeat</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh filebeat-6.2.4.rpm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>cat /etc/filebeat/filebeat.yml</span><br><span class="line"></span><br><span class="line">filebeat.prospectors:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line">    -  /opt/logs/*.log</span><br><span class="line"><span class="meta">  #</span>exclude_lines: ['^DBG']</span><br><span class="line"><span class="meta">  #</span>include_lines: ['^ERR', '^WARN']</span><br><span class="line"><span class="meta">  #</span>exclude_files: ['.gz$']</span><br><span class="line">  fields:</span><br><span class="line">    appname: tdtp-transport</span><br><span class="line">  multiline.pattern: '^\d&#123;4&#125;\-\d&#123;2&#125;\-\d&#123;2&#125;\s+\d&#123;2&#125;'</span><br><span class="line">  multiline.negate: true</span><br><span class="line">  multiline.match: after</span><br><span class="line"><span class="meta">#</span>============================= Filebeat modules ===============================</span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: $&#123;path.config&#125;/modules.d/*.yml</span><br><span class="line">  reload.enabled: false</span><br><span class="line"><span class="meta">  #</span>reload.period: 10s</span><br><span class="line"><span class="meta">#</span>==================== Elasticsearch template setting ==========================</span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 3</span><br><span class="line"><span class="meta">  #</span>index.codec: best_compression</span><br><span class="line"><span class="meta">  #</span>_source.enabled: false</span><br><span class="line"><span class="meta">#</span>================================ General =====================================</span><br><span class="line"><span class="meta">#</span>tags: ["service-X", "web-tier"]</span><br><span class="line"><span class="meta">#</span> output.</span><br><span class="line"><span class="meta">#</span>fields:</span><br><span class="line"><span class="meta">#</span>  env: staging</span><br><span class="line"><span class="meta">#</span>============================== Dashboards =====================================</span><br><span class="line"><span class="meta">#</span>setup.dashboards.enabled: false</span><br><span class="line"><span class="meta">#</span>setup.dashboards.url:</span><br><span class="line"><span class="meta">#</span>============================== Kibana =====================================</span><br><span class="line">setup.kibana:</span><br><span class="line"><span class="meta">  #</span> Kibana Host</span><br><span class="line"><span class="meta">  #</span> Scheme and port can be left out and will be set to the default (http and 5601)</span><br><span class="line"><span class="meta">  #</span> In case you specify and additional path, the scheme is required: http://localhost:5601/path</span><br><span class="line"><span class="meta">  #</span> IPv6 addresses should always be defined as: https://[2001:db8::1]:5601</span><br><span class="line"><span class="meta">  #</span>host: "localhost:5601"</span><br><span class="line"><span class="meta">#</span>================================ Outputs =====================================</span><br><span class="line">output.kafka:</span><br><span class="line">    hosts: ["172.17.0.1:9092","172.17.0.2:9092","172.17.0.3:9092"]</span><br><span class="line">    topic: '%&#123;[fields.appname]&#125;'</span><br><span class="line">    partition.round_robin:</span><br><span class="line">      reachable_only: false</span><br><span class="line">    required_acks: 1</span><br><span class="line">    compression: gzip</span><br><span class="line">    max_message_bytes: 1000000</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service filebeat restart</span><br></pre></td></tr></table></figure><h5 id="Kafka常用命令"><a href="#Kafka常用命令" class="headerlink" title="Kafka常用命令"></a>Kafka常用命令</h5><ol><li>查看kafka中的topic</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/app/kafka/bin/kafka-topics.sh --zookeeper 172.17.0.1:2181,172.17.0.2:2181,172.17.0.3:2181 --list            #该命令显示kafka中的topic，即为filebeat中定义的appname的值</span><br></pre></td></tr></table></figure><ol start="2"><li>创建topic</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/app/kafka/bin/kafka-topics.sh --create --zookeeper 10.1.1.41:2181 --replication-factor 1 --partitions 1 --topic test-01</span><br></pre></td></tr></table></figure><h5 id="安装logstash"><a href="#安装logstash" class="headerlink" title="安装logstash"></a>安装logstash</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh logstash-6.2.4.rpm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>cat /etc/logstash/conf.d/test.conf</span><br><span class="line"></span><br><span class="line">input&#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">        bootstrap_servers = "172.17.0.1:9092,172.17.0.2:9092,172.17.0.3:9092,"</span><br><span class="line">        topics = "tdtp-transport"   #该值为filebeat配置文件中定义的值，可以通过kafka-topic查看</span><br><span class="line">        codec = json</span><br><span class="line">        consumer_threads = 1</span><br><span class="line">        decorate_events = false</span><br><span class="line">        type = "tdtp-transport"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts = ["172.17.0.4:9200","172.17.0.5:9200","172.17.0.6:9200","172.17.0.7:9200","172.17.0.8:9200","172.17.0.9:9200","172.17.0.10:9200",]</span><br><span class="line">        index = "%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service logstash restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维基本功 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在deepin15.7系统上配置SS客户端</title>
      <link href="/post/7348.html"/>
      <url>/post/7348.html</url>
      
        <content type="html"><![CDATA[<p>自搭梯子在deepin15.7系统上如何配置SS 客户端</p><a id="more"></a><h3 id="在deepin15-7系统上配置SS-客户端"><a href="#在deepin15-7系统上配置SS-客户端" class="headerlink" title="在deepin15.7系统上配置SS 客户端"></a>在deepin15.7系统上配置SS 客户端</h3><h4 id="安装SS"><a href="#安装SS" class="headerlink" title="安装SS"></a>安装SS</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt -y update</span><br><span class="line">apt -y install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><h4 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">cat /etc/shadowsocks/config.json</span></span><br><span class="line">&#123;</span><br><span class="line">    "server":"my_server_ip", </span><br><span class="line">    "server_port":8388,</span><br><span class="line">    "local_address": "127.0.0.1",</span><br><span class="line">    "local_port":1080,</span><br><span class="line">    "password":"my_passwd",</span><br><span class="line">    "timeout":600,</span><br><span class="line">    "method":"aes-256-cfb",</span><br><span class="line">    "fast_open": false,</span><br><span class="line">    "workers": 1,</span><br><span class="line">    "prefer_ipv6": false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动ss客户端"><a href="#启动ss客户端" class="headerlink" title="启动ss客户端"></a>启动ss客户端</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sslocal -c /etc/shadowsocks/config.json</span><br><span class="line">2018-11-15 23:30:18 INFO     loading libcrypto from libcrypto.so.1.1</span><br><span class="line">&lt;code&gt;2018-11-15 23:30:18 INFO     starting local at 127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>当然深度商店已提供shadowsocks-Qt5,直接到深度商店安装即可</p><h4 id="配置浏览器代理"><a href="#配置浏览器代理" class="headerlink" title="配置浏览器代理"></a>配置浏览器代理</h4><p>filefox：设置→首选项→高级→网络→链接→设置→手动配置代理→socks主机：127.0.0.1 端口：1080→确定<br>chrome：关闭已经打开的chrome，用终端命令开启chrome、chromium-browser –proxy-server=socks5://127.0.0.1:1080，进入后便可以下载插件，安装SwitchySharp，然后配置此插件： 情景模式→删除原有的情景模式，新建情景模式（原有的情景模式无socks代理）→手动配置→SOCKS代理：127.0.0.1 端口1080→保存 →ok</p><p>问题：关闭代理之后，发现<a href="https://www.baidu.com" title="百度一下" target="_blank" rel="noopener">百度</a>访问不了了，纳尼，赶紧逛一下深度论坛，还好论坛已有解决方法，因为现在是全局代理，及时访问<a href="https://www.baidu.com　'百度一下'" target="_blank" rel="noopener">百度</a>走的也是proxy-server，所以，需要设置pac模式。可以用pac文件实现自动代理。pac文件可以在github找也可以自己生成，安装genpac就可以自己生成了。</p><h4 id="配置系统代理"><a href="#配置系统代理" class="headerlink" title="配置系统代理"></a>配置系统代理</h4><p>pip安装genpac,并是生成pac文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install genpac</span><br><span class="line">genpac --pac-compress --pac-proxy 'SOCKS5 127.0.0.1:1080' --format pac  -o ~/.autoproxy.pac</span><br></pre></td></tr></table></figure><p>配置deepin系统代理，在deepin的 [设置]-[网络]-[系统代理]-[自动] 填入pac文件地址file:///home/mint/.autoproxy.pac</p><p>注：配置系统代理之后，需要把浏览器代理设置为系统代理</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>断开ss-clicent,访问百度访问成功了,<br>连接ss-client，访问一下Youtube也通了</p><h4 id="大功告成！！！"><a href="#大功告成！！！" class="headerlink" title="大功告成！！！"></a>大功告成！！！</h4>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRBD+NFS+Keepalived高可用集群搭建</title>
      <link href="/post/32014.html"/>
      <url>/post/32014.html</url>
      
        <content type="html"><![CDATA[<p>使用NFS挂载文件时如何保证高可用？</p><a id="more"></a><h4 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h4><p>VIP：10.3.31.103</p><table><thead><tr><th align="center">服务器</th><th align="center">主机名</th><th align="center">IP地址</th></tr></thead><tbody><tr><td align="center">主nfs</td><td align="center">nfs-master</td><td align="center">10.3.31.101</td></tr><tr><td align="center">从nfs</td><td align="center">nfs-slave</td><td align="center">10.3.31.102</td></tr></tbody></table><h4 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e "10.3.31.101 nfs01.prod\n10.3.31.102 nfs02.prod" &gt;&gt;/etc/hosts</span><br></pre></td></tr></table></figure><h4 id="配置drbd"><a href="#配置drbd" class="headerlink" title="配置drbd"></a>配置drbd</h4><p>安装drdb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm -Uvh https://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br><span class="line">yum install drbd84 kmod-drbd84 -y</span><br><span class="line">systemctl enable drbd</span><br></pre></td></tr></table></figure><h4 id="导入drbd模块"><a href="#导入drbd模块" class="headerlink" title="导入drbd模块"></a>导入drbd模块</h4><p>内核模块需要大于3.10.0-514.6.1.el7.x86_64，否则会报错，如果报错了，先查看系统上的所有可用内核版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk -F\' '$1=="menuentry " &#123;print i++ " : " $2&#125;' /etc/grub2.cfg</span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml     #升级内核</span><br><span class="line">modprobe drbd</span><br></pre></td></tr></table></figure><h4 id="添加新硬盘sdb，并初始化"><a href="#添加新硬盘sdb，并初始化" class="headerlink" title="添加新硬盘sdb，并初始化"></a>添加新硬盘sdb，并初始化</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sdb           #新建一个分区sdb1</span><br><span class="line">mkfs.ext4 /dev/sdb1</span><br><span class="line">dd if=/dev/zero of=/dev/sdb1 bs=1M count=100</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/drbd.d/global_common.conf</span></span><br><span class="line">global &#123;</span><br><span class="line">    usage-count no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">common &#123;</span><br><span class="line">    protocol C;</span><br><span class="line">    disk &#123;</span><br><span class="line">        on-io-error detach;</span><br><span class="line">    &#125;</span><br><span class="line">    syncer &#123;</span><br><span class="line">        rate 100M;                    ##设置主备节点同步时的网络速率最大值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">resource data &#123;</span><br><span class="line">    on nfs01.prod &#123;                    #主机名称</span><br><span class="line">        device /dev/drbd1;                     #drbd网络磁盘</span><br><span class="line">        disk /dev/sdb1;                        #本地需要挂载的磁盘</span><br><span class="line">        address 10.3.31.101:7899;              #主ip地址加drbd端口</span><br><span class="line">        meta-disk internal;</span><br><span class="line">    &#125;</span><br><span class="line">    on nfs02.prod &#123;</span><br><span class="line">        device /dev/drbd1;</span><br><span class="line">        disk /dev/sdb1;</span><br><span class="line">        address 10.3.31.102:7899;</span><br><span class="line">        meta-disk internal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动drbd"><a href="#启动drbd" class="headerlink" title="启动drbd"></a>启动drbd</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">drbdadm create-md data     #创建数据目录</span><br><span class="line">systemctl start drbd    #启动drbd服务</span><br><span class="line">systemctl enable drbd    #开机启动</span><br></pre></td></tr></table></figure><h4 id="初始化主节点（只在主节点上操作）"><a href="#初始化主节点（只在主节点上操作）" class="headerlink" title="初始化主节点（只在主节点上操作）"></a>初始化主节点（只在主节点上操作）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drbdadm primary --force data</span><br><span class="line">drbdsetup /dev/drbd1 primary</span><br></pre></td></tr></table></figure><h4 id="在master节点挂载drbd1"><a href="#在master节点挂载drbd1" class="headerlink" title="在master节点挂载drbd1"></a>在master节点挂载drbd1</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/drbd1</span><br><span class="line">mount /dev/drbd1 /opt/</span><br></pre></td></tr></table></figure><h4 id="测试drbd是否可用"><a href="#测试drbd是否可用" class="headerlink" title="测试drbd是否可用"></a>测试drbd是否可用</h4><p>在master(10.3.31.101)的opt中创建一个文件，然后卸载/opt，将当前主节点降级为次</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/test</span><br><span class="line">umount /opt</span><br><span class="line">drbdadm secondary data</span><br></pre></td></tr></table></figure><p>将secondary(10.3.31.102)节点升级为主节点，然后挂载/opt，可用看到在10.2.31.51上创建的文件test存在，说明drbd起作用了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drbdadm primary data</span><br><span class="line">mount /dev/drbd1 /opt/</span><br></pre></td></tr></table></figure><h4 id="配置nfs服务端，两个节点都要执行"><a href="#配置nfs服务端，两个节点都要执行" class="headerlink" title="配置nfs服务端，两个节点都要执行"></a>配置nfs服务端，两个节点都要执行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install rpcbind nfs-utils</span><br><span class="line">mkdir -p /opt/logs/upload  /opt/data/pfxfiles /opt/upload</span><br><span class="line">echo -e "/opt/logs/itsp-uploadlog  10.3.31.0/24(rw,no_root_squash,sync)\n/opt/upload 10.3.31.0/24(rw,no_root_squash,sync)\n/opt/data/pfxfiles 10.3.31.0/24(rw,no_root_squash,sync)" &amp;gt;&amp;gt; /etc/exports</span><br></pre></td></tr></table></figure><h4 id="安装配置keepalived"><a href="#安装配置keepalived" class="headerlink" title="安装配置keepalived"></a>安装配置keepalived</h4><p>安装keepalived</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install keepalived</span><br><span class="line">systemctl enable keepalived</span><br><span class="line">mkdir /et/keepalived/logs     #创建日志目录</span><br></pre></td></tr></table></figure><h4 id="配置主drbd节点（10-3-31-101）"><a href="#配置主drbd节点（10-3-31-101）" class="headerlink" title="配置主drbd节点（10.3.31.101）"></a>配置主drbd节点（10.3.31.101）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File for keepadlived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_nfs &#123;</span><br><span class="line">    script "/etc/keepalived/check_nfs.sh"</span><br><span class="line">    interval 5</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 151</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">    auth_type PASS</span><br><span class="line">    auth_pass 1111</span><br><span class="line">&#125;</span><br><span class="line">track_script &#123;</span><br><span class="line">    chk_nfs</span><br><span class="line">&#125;</span><br><span class="line">notify_stop /etc/keepalived/notify_stop.sh</span><br><span class="line">notify_master /etc/keepalived/notify_master.sh</span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">    10.3.31.103/24</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置备drbd节点（10-3-31-102）"><a href="#配置备drbd节点（10-3-31-102）" class="headerlink" title="配置备drbd节点（10.3.31.102）"></a>配置备drbd节点（10.3.31.102）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File for keepadlived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_nfs &#123;</span><br><span class="line">    script "/etc/keepalived/check_nfs.sh"</span><br><span class="line">    interval 5</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 151</span><br><span class="line">    priority 90</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">    auth_type PASS</span><br><span class="line">    auth_pass 1111</span><br><span class="line">&#125;</span><br><span class="line">track_script &#123;</span><br><span class="line">    chk_nfs</span><br><span class="line">&#125;</span><br><span class="line">notify_master /etc/keepalived/notify_master.sh</span><br><span class="line">notify_backup /etc/keepalived/notify_backup.sh</span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">    10.3.31.103/24</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置文件中用到的脚本"><a href="#配置文件中用到的脚本" class="headerlink" title="配置文件中用到的脚本"></a>配置文件中用到的脚本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/keepalived/check_nfs.sh        <span class="comment">#给脚本主备服务都需要有</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##检查nfs可用性：进程和是否能够挂载</span></span></span><br><span class="line">/sbin/service nfs status &amp;amp;&amp;gt;/dev/null</span><br><span class="line">if [ $? -ne 0 ];then</span><br><span class="line">    ###如果服务状态不正常，先尝试重启服务</span><br><span class="line">    systemctl restart nfs</span><br><span class="line">    systemctl status nfs &amp;amp;&amp;gt;/dev/null</span><br><span class="line">    if [ $? -ne 0 ];then</span><br><span class="line">        ###若重启nfs服务后，仍不正常</span><br><span class="line">        ###卸载drbd设备</span><br><span class="line">        umount /dev/drbd1</span><br><span class="line">        ###将drbd主降级为备</span><br><span class="line">        drbdadm secondary data</span><br><span class="line">        #关闭keepalived</span><br><span class="line">        /sbin/service keepalived stop</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/keepalived/notify_master.sh      <span class="comment">#主备服务器都有，用于设置主drdb</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">time=`date "+%F  %H:%M:%S"`</span><br><span class="line">echo -e "$time    ------notify_master------\n" /etc/keepalived/logs/notify_master.log</span><br><span class="line">/sbin/drbdadm primary data; /etc/keepalived/logs/notify_master.log</span><br><span class="line">/bin/mount /dev/drbd1 /opt; /etc/keepalived/logs/notify_master.log</span><br><span class="line">/sbin/service nfs restart; /etc/keepalived/logs/notify_master.log</span><br><span class="line">echo -e "\n" /etc/keepalived/logs/notify_master.log</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/keepalived/notify_stop.sh        <span class="comment">#只在主服务器上,用于停止主nfs</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">time=`date "+%F  %H:%M:%S"`</span><br><span class="line">echo -e "$time  ------notify_stop------\n"; /etc/keepalived/logs/notify_stop.log</span><br><span class="line">/sbin/service nfs stop; /etc/keepalived/logs/notify_stop.log</span><br><span class="line">/bin/umount /opt; /etc/keepalived/logs/notify_stop.log</span><br><span class="line">/sbin/drbdadm secondary data; /etc/keepalived/logs/notify_stop.log</span><br><span class="line">echo -e "\n"; /etc/keepalived/logs/notify_stop.log</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/keepalived/notify_backup.sh     <span class="comment">#用于设置主服务为备drbd</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">time=`date "+%F  %H:%M:%S"`</span><br><span class="line">echo -e "$time    ------notify_backup------\n" /etc/keepalived/logs/notify_backup.log</span><br><span class="line">/sbin/service nfs stop</span><br><span class="line">/etc/keepalived/logs/notify_backup.log</span><br><span class="line">/bin/umount /dev/drbd1</span><br><span class="line">/etc/keepalived/logs/notify_backup.log</span><br><span class="line">/sbin/drbdadm secondary data</span><br><span class="line">/etc/keepalived/logs/notify_backup.log</span><br><span class="line">echo -e "\n" /etc/keepalived/logs/notify_backup.log</span><br></pre></td></tr></table></figure><h4 id="自动切换测试"><a href="#自动切换测试" class="headerlink" title="自动切换测试"></a>自动切换测试</h4><p>关闭主上keepalived，会按照预期流程走。关闭主上nfs—-卸载资源设备—-主drbd降级—-备drdb升级—-备挂载资源设备—-备启动nfs服务。</p><p>连续写测试，在客户端创建挂载点，然后挂载nfs,最后写入文件测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir test</span><br><span class="line">mount -t nfs 10.3.31.103:/opt/upload test</span><br><span class="line">for i in &#123;1..500&#125;;do dd if=/dev/zero of=test/$i.file bs=1M count=1;done</span><br></pre></td></tr></table></figure><p>执行循环的过程中在master上关闭keepalived，验证写入过程是否会中断，经验证(不能进入master的opt目录，否则master不能卸载opt)，写入过程没有中断，但中间会有一段时间的延时，在开启原主keepalived，写入过程也没有中断，同样中间有一段时间的延时,将测试文件删除，并卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -fr test/*</span><br><span class="line">umount test</span><br></pre></td></tr></table></figure><h4 id="正式挂载nfs，客户端需要安装rpcbind服务"><a href="#正式挂载nfs，客户端需要安装rpcbind服务" class="headerlink" title="正式挂载nfs，客户端需要安装rpcbind服务"></a>正式挂载nfs，客户端需要安装rpcbind服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ansible nfs -m yum -a 'name=rpcbind,nfs-utils state=present'</span><br><span class="line">ansible nfs -m service -a 'name=rpcbind state=restarted enabled=yes'</span><br><span class="line">ansible nfs -m file -a 'path=/opt/data state=directory'</span><br><span class="line">ansible nfs -m shell -a 'echo -e "10.3.31.103:/opt/data/\t /opt/upload\t\t\tnfs\trw\t0 0" /etc/fstab'</span><br><span class="line">ansible nfs -m shell -a 'mount -a;mount'</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高可用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos6.5搭建sftp服务器</title>
      <link href="/post/40005.html"/>
      <url>/post/40005.html</url>
      
        <content type="html"><![CDATA[<p>SFTP，即 SSH 文件传输协议（ SSH File Transfer Protocol ），或者说是安全文件传输协议（ Secure File Transfer Protocol ）。SFTP 是一个独立的 SSH 封装协议包，通过安全连接以相似的方式工作。它的优势在于可以利用安全的连接传输文件，还能浏览本地和远程系统上的文件系统。</p><a id="more"></a><p>在很多情况下，使用SFTP都比FTP更可取，因为它具有最基本的安全特性和能利用 SSH 连接的能力，FTP是一种不安全的协议，只能在有限的情况下或在您信任的网络上使用。<br>服务器 OpenSSH-Server 版本最低4.8p1，因为低版本不支持新配置项 ChrootDirectory ，而此处需要ChrootDirectory来配置权限<br>当然配置时请关闭防火墙和selinux</p><h4 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h4><table><thead><tr><th align="center">主机名</th><th align="center">服务器</th></tr></thead><tbody><tr><td align="center">sftp</td><td align="center">172.17.0.2</td></tr></tbody></table><h5 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openssl openssh-server openssh-clients</span><br></pre></td></tr></table></figure><h5 id="配置用户组"><a href="#配置用户组" class="headerlink" title="配置用户组"></a>配置用户组</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> groupadd sftp</span><br><span class="line"><span class="meta">#</span> useradd -g sftp -s /sbin/nologin mysftp</span><br><span class="line"><span class="meta">#</span> echo mypass | passwd --stdin mysftp</span><br><span class="line"><span class="meta">#</span> mkdir -p /data/sftp/mysftp</span><br><span class="line"><span class="meta">#</span> usermod -d /data/sftp/mysftp mysftp</span><br></pre></td></tr></table></figure><h5 id="配置sshd服务，编辑-etc-ssh-sshd-config"><a href="#配置sshd服务，编辑-etc-ssh-sshd-config" class="headerlink" title="配置sshd服务，编辑 /etc/ssh/sshd_config"></a>配置sshd服务，编辑 /etc/ssh/sshd_config</h5><p>注释此行,在此行下面添加如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>Subsystem sftp /usr/libexec/openssh/sftp-server</span><br><span class="line">Subsystem sftp internal-sftp       # 指定使用sftp服务使用系统自带的internal-sftp</span><br><span class="line">Match Group sftp                   # 匹配sftp组的用户,若要匹配多个组,可用逗号分开</span><br><span class="line">ChrootDirectory /data/sftp/        # 限制用户的根目录</span><br><span class="line">ForceCommand internal-sftp         # 只能用于sftp登录</span><br><span class="line">AllowTcpForwarding no              # 禁止用户使用端口转发</span><br><span class="line">X11Forwarding no                   # 禁止用户使用端口转发</span><br></pre></td></tr></table></figure><h5 id="设定Chroot目录权限及sftp用户登陆后可写入的目录"><a href="#设定Chroot目录权限及sftp用户登陆后可写入的目录" class="headerlink" title="设定Chroot目录权限及sftp用户登陆后可写入的目录"></a>设定Chroot目录权限及sftp用户登陆后可写入的目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> chown root.sftp /data/sftp/mysftp           #文件夹所有者必须是root，用户组可以不是root。</span><br><span class="line"><span class="meta">#</span> chmod 755 /data/sftp/mysftp                 #权限不能超过755但不包括755，否则会导致登录报错。</span><br><span class="line"><span class="meta">#</span> mkdir /data/sftp/mysftp/upload              #创建用户上传目录</span><br><span class="line"><span class="meta">#</span> chown mysftp.sftp /data/sftp/mysftp/upload</span><br><span class="line"><span class="meta">#</span> chmod 755 /data/sftp/mysftp/upload</span><br></pre></td></tr></table></figure><h5 id="测试sftp服务器能否登录、上传、下载"><a href="#测试sftp服务器能否登录、上传、下载" class="headerlink" title="测试sftp服务器能否登录、上传、下载"></a>测试sftp服务器能否登录、上传、下载</h5><p>测试登录,若测试结果如下，则sftp服务正常登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sftp -p22 mysftp@172.17.0.2</span><br><span class="line">  m1ysftp@172.17.0.2's password: </span><br><span class="line">  Connected to mysftp@172.17.0.2.</span><br><span class="line"><span class="meta">  sftp&gt;</span></span><br></pre></td></tr></table></figure><p>若出现以下情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sftp -p22 mysftp@172.17.0.2 </span><br><span class="line">  packet_write_wait: Connection to 172.17.0.2 port 22: Broken pipe</span><br><span class="line">  Couldn't read packet: Connection reset by peer</span><br></pre></td></tr></table></figure><p>出现以上情况的原因是：/data/sftp/mysftp 目录权限分配不当所致，将此目录的所有者更改为root即可，用户组可为root/sftp。</p><p>测试上传，登录服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">sftp&gt;</span> put vars.yml</span><br><span class="line">  Uploading vars.yml to /upload/vars.yml</span><br><span class="line">  vars.yml</span><br></pre></td></tr></table></figure><p>测试下载,登录服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">sftp&gt;</span> get vars.yml /tmp</span><br><span class="line">  Fetching /upload/vars.yml to /tmp/vars.yml</span><br><span class="line">  /upload/vars.yml</span><br></pre></td></tr></table></figure><p>测试删除,登录服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">sftp&gt;</span> rm vars.yml </span><br><span class="line">  Removing /upload/vars.yml</span><br></pre></td></tr></table></figure><h5 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h5><p>登录sftp服务器后，可以使用部分shell命令，在shell命令前添加l，可以对本地主机操作。例如ls、lls、pwd、lpwd、cd、lcd等命令</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7.2安装部署KVM虚拟化</title>
      <link href="/post/12121.html"/>
      <url>/post/12121.html</url>
      
        <content type="html"><![CDATA[<p>Centos7.2安装部署KVM虚拟化</p><a id="more"></a><h5 id="检查服务器是否支持虚拟化"><a href="#检查服务器是否支持虚拟化" class="headerlink" title="检查服务器是否支持虚拟化"></a>检查服务器是否支持虚拟化</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo | egrep --color "vmx|smv"</span><br></pre></td></tr></table></figure><h5 id="关闭防火墙和selinux"><a href="#关闭防火墙和selinux" class="headerlink" title="关闭防火墙和selinux"></a>关闭防火墙和selinux</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firwalld</span><br><span class="line">systemctl disable firwalld</span><br><span class="line">sed -i '/SELINUX/s/enforcing/disabled/g' /etc/selinux/config</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><p>#####安装KVM及其虚拟化安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install qemu-kvm qemu-img virt-manager libvirt libvirt-python python-virtinst libvirt-client virt-install virt-viewer</span><br></pre></td></tr></table></figure><p>#####配置桥接网络</p><p>创建 ifcfg-br0 文件，内容如下：NM_CONTROLLED=no(不实时生效)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cat ifcfg-br0</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEVICE=br0</span><br><span class="line">TYPE=Bridge</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">IPADDR=192.168.1.95</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.1.1</span><br><span class="line">DNS1=114.114.114.114</span><br></pre></td></tr></table></figure><p>修改ifcfg-em1文件，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cat ifcfg-em1</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">DEVICE=em1</span><br><span class="line">NM_CONTROLLED=no</span><br><span class="line">ONBOOT=yes</span><br><span class="line">BRIDGE=br0</span><br></pre></td></tr></table></figure><p>重启网络服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p>#####KVM安装虚拟机</p><p>创建存储池</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /kvm/&#123;store,iso&#125; -pv</span><br><span class="line">virt-install -n test-nginx.pord -r 4096 --disk=/kvm/store/nginx.prod.img --network bridge=br0 --os-type=linux --os-variant=el7 --cdrom /kvm/iso/Centos-7-x86_64-DVD-1511.iso --vnc --vncport=5910 --vncclisten=0.0.0.0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7.2网卡bond</title>
      <link href="/post/26042.html"/>
      <url>/post/26042.html</url>
      
        <content type="html"><![CDATA[<p>网卡bond是通过多张网卡绑定成一个逻辑网卡实现本地网卡的冗余，带宽扩容和负载平衡，一共有7种模式</p><a id="more"></a><h5 id="什么是bond"><a href="#什么是bond" class="headerlink" title="什么是bond"></a>什么是bond</h5><p>网卡bond是通过多张网卡绑定成一个逻辑网卡，实现本地网卡的冗余，带宽扩容和负载平衡</p><h5 id="常用的bond模式"><a href="#常用的bond模式" class="headerlink" title="常用的bond模式"></a>常用的bond模式</h5><p>mode=0:(balance-rr)负载分担round-robin，轮询方式有高可用 (容错) 和负载均衡的功能, 需要交换机的配置，每块网卡轮询发包 (流量分发比较均衡)。优点：流量提高一倍；缺点：需要接入交换机做端口聚合，否则可能无法使用。<br>mode=1:(active-backup)主备模式，只有高可用 (容错) 功能, 不需要交换机配置, 这种模式只有一块网卡工作, 对外只有一个mac地址。优点：冗余性高；缺点：链路利用率低，两块网卡只有1块在工作。缺点是端口利用率比较低</p><h5 id="网卡绑定"><a href="#网卡绑定" class="headerlink" title="网卡绑定"></a>网卡绑定</h5><p>通过网口bond，可以实现网口冗余，负载均衡，从而达到高可用。物理网卡eno16777736，eno33554960,绑定后的虚拟网口是bond0，服务器IP：172.16.1.199</p><h5 id="修改网卡配置文件"><a href="#修改网卡配置文件" class="headerlink" title="修改网卡配置文件"></a>修改网卡配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cat /etc/sysconfig/network-scripts/ifcfg-eno16777736 </span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">DEVICE=eno16777736</span><br><span class="line">NAME=eno16777736</span><br><span class="line">MASTER=bond0</span><br><span class="line">SLAVE=yes</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cat /etc/sysconfig/network-scripts/ifcfg-eno33554960 </span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">DEVICE=eno33554960</span><br><span class="line">NAME=eno33554960</span><br><span class="line">MASTER=bond0</span><br><span class="line">SLAVE=yes</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cat /etc/sysconfig/network-scripts/ifcfg-bond0 </span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">DEVICE=bond0</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=172.16.1.199</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=172.16.1.250</span><br></pre></td></tr></table></figure><h5 id="修改并加载模块"><a href="#修改并加载模块" class="headerlink" title="修改并加载模块"></a>修改并加载模块</h5><p>1.创建bonding模块文件为/etc/modprobe.d/bond.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cat /etc/modprobe.d/bond.conf</span><br><span class="line">alias bond0 bonding</span><br><span class="line">options bond0 mode=1 miimon=200</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">modprobe bonding      #加载bonding模块，可直接重启</span><br><span class="line">lsmod|grep bonding    #查看bonding模块是否加载成功</span><br><span class="line">systemctl restart network    #重启网络</span><br><span class="line">cat /proc/net/bonding/bond0   #查看bond信息</span><br></pre></td></tr></table></figure><p>#####查看bond状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/net/bonding/bond0 </span><br><span class="line">Ethernet Channel Bonding Driver: v3.7.1 (April 27, 2011)</span><br><span class="line"></span><br><span class="line">Bonding Mode: load balancing (round-robin)</span><br><span class="line">MII Status: up</span><br><span class="line">MII Polling Interval (ms): 0</span><br><span class="line">Up Delay (ms): 0</span><br><span class="line">Down Delay (ms): 0</span><br><span class="line"></span><br><span class="line">Slave Interface: eno16777736</span><br><span class="line">MII Status: up</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:0c:29:55:9d:bf</span><br><span class="line">Slave queue ID: 0</span><br><span class="line"></span><br><span class="line">Slave Interface: eno33554960</span><br><span class="line">MII Status: up</span><br><span class="line">Speed: 1000 Mbps</span><br><span class="line">Duplex: full</span><br><span class="line">Link Failure Count: 0</span><br><span class="line">Permanent HW addr: 00:0c:29:55:9d:c9</span><br><span class="line">Slave queue ID: 0</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>可以看出：<br>bond模式为：round-robin<br>激活的网口为：eno33554960<br>eno16777736，eno33554960,bond0三个网卡的物理地址相同，为了避免上层交换机发生混乱</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>在本地主机执行ping 172.16.1.199 -t来检查网络连通性，然后突然在虚拟机硬件配置中随机移除一块网卡设备，能够非常清晰的看到网卡切换的过程（最多有1个数据丢包）。<br>若是在虚拟机环境下测试，秩序断开其中一块网卡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ping 172.16.1.199 -t</span><br><span class="line">正在 Ping 172.16.1.199 具有 32 字节的数据:</span><br><span class="line">来自 172.16.1.199 的回复: 字节=32 时间&amp;lt;1ms TTL=64</span><br><span class="line">来自 172.16.1.199 的回复: 字节=32 时间&amp;lt;1ms TTL=64</span><br><span class="line">来自 172.16.1.199 的回复: 字节=32 时间&amp;lt;1ms TTL=64</span><br><span class="line">来自 172.16.1.199 的回复: 字节=32 时间=1ms TTL=64</span><br><span class="line">来自 172.16.1.199 的回复: 字节=32 时间=1ms TTL=64</span><br><span class="line">来自 172.16.1.199 的回复: 字节=32 时间&amp;lt;1ms TTL=64</span><br><span class="line">来自 172.16.1.199 的回复: 字节=32 时间&amp;lt;1ms TTL=64</span><br><span class="line">来自 172.16.1.199 的回复: 字节=32 时间&amp;lt;1ms TTL=64</span><br><span class="line">来自 172.16.1.199 的回复: 字节=32 时间&amp;lt;1ms TTL=64</span><br><span class="line">来自 172.16.1.199 的回复: 字节=32 时间&amp;lt;1ms TTL=64</span><br><span class="line">来自 172.16.1.199 的回复: 字节=32 时间&amp;lt;1ms TTL=64</span><br><span class="line">请求超时。</span><br><span class="line">来自 172.16.1.199 的回复: 字节=32 时间=1ms TTL=64</span><br><span class="line">来自 172.16.1.199 的回复: 字节=32 时间=1ms TTL=64</span><br><span class="line">来自 172.16.1.199 的回复: 字节=32 时间=1ms TTL=64</span><br><span class="line">来自 172.16.1.199 的回复: 字节=32 时间&amp;lt;1ms TTL=64</span><br><span class="line">来自 172.16.1.199 的回复: 字节=32 时间&amp;lt;1ms TTL=64</span><br></pre></td></tr></table></figure><h5 id="修改bond模式"><a href="#修改bond模式" class="headerlink" title="修改bond模式"></a>修改bond模式</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">modprobe -r bonding    #卸载bonding内核模块</span><br><span class="line">lsmod | grep bonding   #查看bonding模块</span><br><span class="line">sed 's/mode=6/mode=1/g' /etc/modprobe.d/bond.conf   #修改bond模式</span><br><span class="line">modprobe bonding        #重新加载bonding模块</span><br></pre></td></tr></table></figure><h5 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h5><p>在虚拟机上配置mode=0，ping其他机器会出现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ping 172.16.1.159</span><br><span class="line">PING 172.16.1.159 (172.16.1.159) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.16.1.159: icmp_seq=1 ttl=64 time=0.335 ms</span><br><span class="line">64 bytes from 172.16.1.159: icmp_seq=1 ttl=64 time=0.353 ms (DUP!)</span><br><span class="line">64 bytes from 172.16.1.159: icmp_seq=2 ttl=64 time=0.399 ms</span><br><span class="line">64 bytes from 172.16.1.159: icmp_seq=2 ttl=64 time=0.413 ms (DUP!)</span><br><span class="line">64 bytes from 172.16.1.159: icmp_seq=3 ttl=64 time=0.905 ms</span><br><span class="line">64 bytes from 172.16.1.159: icmp_seq=3 ttl=64 time=0.931 ms (DUP!)</span><br><span class="line">64 bytes from 172.16.1.159: icmp_seq=4 ttl=64 time=1.21 ms</span><br><span class="line">64 bytes from 172.16.1.159: icmp_seq=4 ttl=64 time=1.27 ms (DUP!)</span><br><span class="line">64 bytes from 172.16.1.159: icmp_seq=5 ttl=64 time=1.48 ms</span><br><span class="line">64 bytes from 172.16.1.159: icmp_seq=5 ttl=64 time=1.54 ms (DUP!)</span><br><span class="line">64 bytes from 172.16.1.159: icmp_seq=6 ttl=64 time=1.19 ms</span><br><span class="line">64 bytes from 172.16.1.159: icmp_seq=6 ttl=64 time=1.24 ms (DUP!)</span><br><span class="line">64 bytes from 172.16.1.159: icmp_seq=7 ttl=64 time=1.14 ms</span><br><span class="line">64 bytes from 172.16.1.159: icmp_seq=7 ttl=64 time=1.18 ms (DUP!)</span><br><span class="line">64 bytes from 172.16.1.159: icmp_seq=8 ttl=64 time=1.42 ms</span><br><span class="line">64 bytes from 172.16.1.159: icmp_seq=8 ttl=64 time=1.46 ms (DUP!)</span><br></pre></td></tr></table></figure><p>网上搜到的答案是：</p><blockquote><p>应该是重复DUPLICATE，同一个序号的ICMP包却收到了多个回应。一般在PING网段广播地址才会出现这种情况。</p></blockquote><p>改成mode1未出现以上情况<br>个人猜想：</p><blockquote><p>相当于交换机未做端口聚合</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux网路命令的妙用</title>
      <link href="/post/26598.html"/>
      <url>/post/26598.html</url>
      
        <content type="html"><![CDATA[<p>学会使用Linux命令可以在日常生活中解决很多问题。</p><a id="more"></a><h4 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h4><h5 id="ping-i-快速测试1000个网络包"><a href="#ping-i-快速测试1000个网络包" class="headerlink" title="ping -i:快速测试1000个网络包"></a>ping -i:快速测试1000个网络包</h5><p>一般用于主机测试，网络设备可能会丢包</p><p>快速10秒测试1000个icmp包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ping 111.230.96.65 -i 0.001 -w 10 -c 1000</span><br></pre></td></tr></table></figure><h5 id="ping-f：肉眼查看丢包状态是否增多"><a href="#ping-f：肉眼查看丢包状态是否增多" class="headerlink" title="ping -f：肉眼查看丢包状态是否增多"></a>ping -f：肉眼查看丢包状态是否增多</h5><p>如果不通则点数增多，常常用于切换网络时。</p><p>网络不丢包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ping 172.16.1.145 -f</span><br><span class="line">PING 172.16.1.145 (172.16.1.145) 56(84) bytes of data.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>网络不通</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ping 172.16.1.15 -f</span><br><span class="line">PING 172.16.1.15 (172.16.1.15) 56(84) bytes of data.</span><br><span class="line">...........E............E..........E....</span><br></pre></td></tr></table></figure><h4 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h4><h5 id="nmap-主机"><a href="#nmap-主机" class="headerlink" title="nmap 主机"></a>nmap 主机</h5><p>该命令可以确定目标主机的在线情况和端口监听状态,如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># nmap  172.16.1.159</span><br><span class="line"></span><br><span class="line">Starting Nmap 6.40 ( http://nmap.org ) at 2019-01-10 05:47 CST</span><br><span class="line">Nmap scan report for 172.16.1.159</span><br><span class="line">Host is up (0.0016s latency).</span><br><span class="line">Not shown: 994 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">22/tcp   open  ssh</span><br><span class="line">80/tcp   open  http</span><br><span class="line">111/tcp  open  rpcbind</span><br><span class="line">3306/tcp open  mysql</span><br><span class="line">8009/tcp open  ajp13</span><br><span class="line">8080/tcp open  http-proxy</span><br><span class="line">MAC Address: 00:0C:29:EA:75:0E (VMware)</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 0.50 seconds</span><br></pre></td></tr></table></figure><h4 id="nmap-T4-A-v-主机"><a href="#nmap-T4-A-v-主机" class="headerlink" title="nmap -T4 -A -v 主机"></a>nmap -T4 -A -v 主机</h4><p>-A：用于开启全面扫描，-T4指定扫描过程中使用的时序模板（6个级别：0-5），等级越高，扫描速度越快，但越容易被防火墙或入侵检测设备发现并屏蔽，这里推荐使用”-T4”，-v用于显示详细扫描细节。如下是对主机172.16.1.159进行全面的扫描过程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"># nmap -T4 -A 172.16.1.159</span><br><span class="line"></span><br><span class="line">Starting Nmap 6.40 ( http://nmap.org ) at 2019-01-10 05:51 CST</span><br><span class="line">Nmap scan report for 172.16.1.159</span><br><span class="line">Host is up (0.0010s latency).</span><br><span class="line">Not shown: 994 closed ports</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22/tcp   open  ssh     OpenSSH 6.6.1 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: 2048 af:d8:46:f2:18:0b:b2:7e:cf:98:62:b9:c6:3f:52:f8 (RSA)</span><br><span class="line">|_256 6b:06:5c:c9:44:82:bc:d5:6d:a5:23:84:de:c1:76:4b (ECDSA)</span><br><span class="line">80/tcp   open  http    nginx 1.12.2</span><br><span class="line">|_http-methods: No Allow or Public header in OPTIONS response (status code 405)</span><br><span class="line">|_http-title: Test Page for the Nginx HTTP Server on Fedora</span><br><span class="line">111/tcp  open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version   port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp  rpcbind</span><br><span class="line">|_  100000  2,3,4        111/udp  rpcbind</span><br><span class="line">3306/tcp open  mysql?</span><br><span class="line">| mysql-info: MySQL Error detected!</span><br><span class="line">| Error Code was: 1130</span><br><span class="line">|_Host &apos;172.16.1.145&apos; is not allowed to connect to this MariaDB server</span><br><span class="line">8009/tcp open  ajp13   Apache Jserv (Protocol v1.3)</span><br><span class="line">|_ajp-methods: Failed to get a valid response for the OPTION request</span><br><span class="line">8080/tcp open  http    Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">|_http-methods: No Allow or Public header in OPTIONS response (status code 404)</span><br><span class="line">|_http-title: Site doesn&apos;t have a title.</span><br><span class="line">1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at http://www.insecure.org/cgi-bin/servicefp-submit.cgi :</span><br><span class="line">SF-Port3306-TCP:V=6.40%I=7%D=1/10%Time=5C366CD1%P=x86_64-redhat-linux-gnu%</span><br><span class="line">SF:r(NULL,4B,&quot;G\0\0\0\xffj\x04Host\x20&apos;172\.16\.1\.145&apos;\x20is\x20not\x20al</span><br><span class="line">SF:lowed\x20to\x20connect\x20to\x20this\x20MariaDB\x20server&quot;)%r(GenericLi</span><br><span class="line">SF:nes,4B,&quot;G\0\0\0\xffj\x04Host\x20&apos;172\.16\.1\.145&apos;\x20is\x20not\x20allow</span><br><span class="line">SF:ed\x20to\x20connect\x20to\x20this\x20MariaDB\x20server&quot;)%r(GetRequest,4</span><br><span class="line">SF:B,&quot;G\0\0\0\xffj\x04Host\x20&apos;172\.16\.1\.145&apos;\x20is\x20not\x20allowed\x2</span><br><span class="line">SF:0to\x20connect\x20to\x20this\x20MariaDB\x20server&quot;)%r(HTTPOptions,4B,&quot;G</span><br><span class="line">SF:\0\0\0\xffj\x04Host\x20&apos;172\.16\.1\.145&apos;\x20is\x20not\x20allowed\x20to\</span><br><span class="line">SF:x20connect\x20to\x20this\x20MariaDB\x20server&quot;)%r(RTSPRequest,4B,&quot;G\0\0</span><br><span class="line">SF:\0\xffj\x04Host\x20&apos;172\.16\.1\.145&apos;\x20is\x20not\x20allowed\x20to\x20c</span><br><span class="line">SF:onnect\x20to\x20this\x20MariaDB\x20server&quot;)%r(RPCCheck,4B,&quot;G\0\0\0\xffj</span><br><span class="line">SF:\x04Host\x20&apos;172\.16\.1\.145&apos;\x20is\x20not\x20allowed\x20to\x20connect\</span><br><span class="line">SF:x20to\x20this\x20MariaDB\x20server&quot;)%r(DNSVersionBindReq,4B,&quot;G\0\0\0\xf</span><br><span class="line">SF:fj\x04Host\x20&apos;172\.16\.1\.145&apos;\x20is\x20not\x20allowed\x20to\x20connec</span><br><span class="line">SF:t\x20to\x20this\x20MariaDB\x20server&quot;)%r(DNSStatusRequest,4B,&quot;G\0\0\0\x</span><br><span class="line">SF:ffj\x04Host\x20&apos;172\.16\.1\.145&apos;\x20is\x20not\x20allowed\x20to\x20conne</span><br><span class="line">SF:ct\x20to\x20this\x20MariaDB\x20server&quot;)%r(Help,4B,&quot;G\0\0\0\xffj\x04Host</span><br><span class="line">SF:\x20&apos;172\.16\.1\.145&apos;\x20is\x20not\x20allowed\x20to\x20connect\x20to\x2</span><br><span class="line">SF:0this\x20MariaDB\x20server&quot;)%r(SSLSessionReq,4B,&quot;G\0\0\0\xffj\x04Host\x</span><br><span class="line">SF:20&apos;172\.16\.1\.145&apos;\x20is\x20not\x20allowed\x20to\x20connect\x20to\x20t</span><br><span class="line">SF:his\x20MariaDB\x20server&quot;)%r(Kerberos,4B,&quot;G\0\0\0\xffj\x04Host\x20&apos;172\</span><br><span class="line">SF:.16\.1\.145&apos;\x20is\x20not\x20allowed\x20to\x20connect\x20to\x20this\x20</span><br><span class="line">SF:MariaDB\x20server&quot;)%r(SMBProgNeg,4B,&quot;G\0\0\0\xffj\x04Host\x20&apos;172\.16\.</span><br><span class="line">SF:1\.145&apos;\x20is\x20not\x20allowed\x20to\x20connect\x20to\x20this\x20Maria</span><br><span class="line">SF:DB\x20server&quot;)%r(X11Probe,4B,&quot;G\0\0\0\xffj\x04Host\x20&apos;172\.16\.1\.145&apos;</span><br><span class="line">SF:\x20is\x20not\x20allowed\x20to\x20connect\x20to\x20this\x20MariaDB\x20s</span><br><span class="line">SF:erver&quot;)%r(FourOhFourRequest,4B,&quot;G\0\0\0\xffj\x04Host\x20&apos;172\.16\.1\.14</span><br><span class="line">SF:5&apos;\x20is\x20not\x20allowed\x20to\x20connect\x20to\x20this\x20MariaDB\x2</span><br><span class="line">SF:0server&quot;)%r(LPDString,4B,&quot;G\0\0\0\xffj\x04Host\x20&apos;172\.16\.1\.145&apos;\x20</span><br><span class="line">SF:is\x20not\x20allowed\x20to\x20connect\x20to\x20this\x20MariaDB\x20serve</span><br><span class="line">SF:r&quot;);</span><br><span class="line">MAC Address: 00:0C:29:EA:75:0E (VMware)</span><br><span class="line">No exact OS matches for host (If you know what OS is running on it, see http://nmap.org/submit/ ).</span><br><span class="line">TCP/IP fingerprint:</span><br><span class="line">OS:SCAN(V=6.40%E=4%D=1/10%OT=22%CT=1%CU=40132%PV=Y%DS=1%DC=D%G=Y%M=000C29%T</span><br><span class="line">OS:M=5C366CE4%P=x86_64-redhat-linux-gnu)SEQ(SP=FF%GCD=1%ISR=10D%TI=Z%CI=I%I</span><br><span class="line">OS:I=I%TS=A)OPS(O1=M5B4ST11NW7%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW</span><br><span class="line">OS:7%O5=M5B4ST11NW7%O6=M5B4ST11)WIN(W1=7120%W2=7120%W3=7120%W4=7120%W5=7120</span><br><span class="line">OS:%W6=7120)ECN(R=Y%DF=Y%T=40%W=7210%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%</span><br><span class="line">OS:S=O%A=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%</span><br><span class="line">OS:RD=0%Q=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W</span><br><span class="line">OS:=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)</span><br><span class="line">OS:U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%D</span><br><span class="line">OS:FI=N%T=40%CD=S)</span><br><span class="line"></span><br><span class="line">Network Distance: 1 hop</span><br><span class="line"></span><br><span class="line">TRACEROUTE</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   1.04 ms 172.16.1.159</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 19.54 seconds</span><br></pre></td></tr></table></figure><p>第一部分完成主机是否在线扫描<br>第二部分完成端口扫描，nmap默认扫描1000个最可能开放的端口，由于只识别到22,80,111,3306,8009,8080端口处于打开状态，所以在输出中会有”Not shown: 994 closed ports”的描述，<br>第三部分是对端口上运行的应用程序以及版本号进行统计<br>第四部分显示操作类型和版本<br>最后一部分显示目标主机的路由跟踪信息</p><h4 id="mtr命令使用"><a href="#mtr命令使用" class="headerlink" title="mtr命令使用"></a>mtr命令使用</h4><p>mtr会持续发包，并显示每一跳ping所用的时间。也会显示过程中的任何问题，在下面的示例中，可以看到在第8、9跳分别丢了超过20%、40%的包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># mtr dookt.com</span><br><span class="line"></span><br><span class="line">My traceroute  [v0.85]</span><br><span class="line">localhost.localdomain (0.0.0.0)                                                 Thu Jan 10 07:33:51 2019</span><br><span class="line">Keys:  Help   Display mode   Restart statistics   Order of fields   quit</span><br><span class="line">                                                                Packets               Pings</span><br><span class="line"> Host                                                         Loss%   Snt   Last   Avg  Best  Wrst StDev</span><br><span class="line"> 1. 172.16.1.250                                               0.0%    57    0.5   0.6   0.5   0.9   0.0</span><br><span class="line"> 2. 192.168.8.1                                                0.0%    57    2.7   9.2   2.4  99.9  14.2</span><br><span class="line"> 3. ???</span><br><span class="line"> 4. 192.168.20.29                                              0.0%    57   65.7  90.0  65.7 153.8  18.2</span><br><span class="line"> 5. 10.242.131.161                                             0.0%    57   86.0 125.2  62.9 339.1  57.4</span><br><span class="line"> 6. ???</span><br><span class="line"> 7. 218.204.251.17                                             0.0%    57   98.6  88.2  65.2 148.2  17.9</span><br><span class="line"> 8. 221.179.15.85                                             28.6%    57   84.4 103.4  73.3 168.9  21.1</span><br><span class="line"> 9. 211.136.242.38                                            43.6%    56  124.9 105.5  76.6 140.9  17.2</span><br><span class="line">10. 120.241.50.2                                               0.0%    56   97.4 104.7  77.0 180.6  21.1</span><br><span class="line">11. 10.196.2.98                                                0.0%    56  104.9 115.3  80.7 222.7  27.0</span><br><span class="line">12. 182.254.127.61                                             0.0%    56  105.9 101.3  79.0 175.2  16.6</span><br><span class="line">13. ???</span><br><span class="line">14. ???</span><br><span class="line">15. 111.230.96.65                                              0.0%    56  124.5 101.1  78.8 166.4  18.1</span><br></pre></td></tr></table></figure><h4 id="nc命令"><a href="#nc命令" class="headerlink" title="nc命令"></a>nc命令</h4><p>在远程主机（172.16.1.159）上开启2398端口监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># nc -l 2398</span><br></pre></td></tr></table></figure><p>在终端输入一下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># nc 172.16.1.159 </span><br><span class="line">&quot;你要说的话&quot;</span><br></pre></td></tr></table></figure><p>此时在与远程主机上可以看到刚刚输入的内容</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何重载haproxy配置文件</title>
      <link href="/post/55978.html"/>
      <url>/post/55978.html</url>
      
        <content type="html"><![CDATA[<p>怎么在不重新启动haproxy是时候重载haprxoy的配置呢，通过查看进程PID，使用-sf选项即可是实现</p><a id="more"></a><p>####重载haprxoy的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -sf $(cat /run/haproxy.pid)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维基本功 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开机rc.local不生效</title>
      <link href="/post/58392.html"/>
      <url>/post/58392.html</url>
      
        <content type="html"><![CDATA[<p>添加了开机启动任务cron，但是未能成功执行，需要注意一下几点</p><a id="more"></a><h4 id="etc-rc-local不生效可能的原因"><a href="#etc-rc-local不生效可能的原因" class="headerlink" title="/etc/rc.local不生效可能的原因"></a>/etc/rc.local不生效可能的原因</h4><ol><li>启动脚本中未找到正确的可执行路径，可以使用绝对路径</li><li>/etc/rc.local和/etc/rc.d/rc.local没有执行权限</li><li>/etc/rc.local是文件，不是链接</li></ol><p>#####注：/etc/rc.local是/etc/rc.d/rc.local的软链接，可以直接在该文件中添加启动脚本</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FTP被动模式安装部署</title>
      <link href="/post/41762.html"/>
      <url>/post/41762.html</url>
      
        <content type="html"><![CDATA[<p>由于生产环境两端都有防火墙，故vsftp需要使用被动模式。</p><a id="more"></a><h5 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h5><p>服务器IP地址：111.230.96.65</p><h5 id="安装vsftpd"><a href="#安装vsftpd" class="headerlink" title="安装vsftpd"></a>安装vsftpd</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vsftpd</span><br></pre></td></tr></table></figure><h5 id="配置vsFTP"><a href="#配置vsFTP" class="headerlink" title="配置vsFTP"></a>配置vsFTP</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=000</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_file=/var/log/xferlog</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">chroot_local_user=YES</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line">ls_recurse_enable=YES</span><br><span class="line">listen=YES</span><br><span class="line">listen_port=6021</span><br><span class="line">pasv_enable=YES</span><br><span class="line">pasv_min_port=30000</span><br><span class="line">pasv_max_port=30001</span><br><span class="line">pasv_address=144.120.64.191   #公网IP</span><br><span class="line">pasv_promiscuous=YES</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br></pre></td></tr></table></figure><h5 id="创建ftp用户并设置目录"><a href="#创建ftp用户并设置目录" class="headerlink" title="创建ftp用户并设置目录"></a>创建ftp用户并设置目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /opt/data</span><br><span class="line">useradd -d /opt/data/ftp -s /sbin/nologin testftp</span><br><span class="line">echo testftp | passwd --stdin testftp</span><br></pre></td></tr></table></figure><h5 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h5><ul><li>可以登录ftp服务器，却查看不了卡在227 Entering Passive Mode (10,8,181,11,117,48)。后面就报超时，原因很简单。服务器告诉我们,可以去连接10.8.181.11的117*256+48=30000端口以便传输数据,可是2个都不是局域网，肯定无法访问10.8.181.11的30000端口的。<br>故需要开通防火墙上30000及300001及端口的访问权限</li></ul><p>可查看连接地址：<a href="http://www.voidcn.com/article/p-vhyoixyg-boa.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-vhyoixyg-boa.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx使用stream模块转发ssh请求</title>
      <link href="/post/10505.html"/>
      <url>/post/10505.html</url>
      
        <content type="html"><![CDATA[<p>nginx从1.9.0开始，新增加了一个stream模块，用来实现四层协议的转发、代理或者负载均衡等。比如在内网有一个mysql服务，想暴露到公网上去使用，就可以通过nginx代理的方式通过nginx来进行内网mysql的访问。</p><a id="more"></a><h4 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h4><p>nginx服务器IP：192.168.99.113<br>ssh服务器IP：192.168.99.9，端口2222</p><h4 id="配置文件如下"><a href="#配置文件如下" class="headerlink" title="配置文件如下"></a>配置文件如下</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    upstream jumpserver2222 &#123;</span><br><span class="line">        server 192.168.99.9:2222 max_fails=3 fail_timeout=30s;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8089;</span><br><span class="line">        proxy_pass jumpserver2222;</span><br><span class="line">        proxy_connect_timeout 1h;</span><br><span class="line">        proxy_timeout 1h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>stream模块写入配置文件位置与就跟http模块一样，写在最外层</li><li>server里面不要使用location / 这种语句，否则报错</li></ol>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘分区挂载parted及LVM操作</title>
      <link href="/post/30018.html"/>
      <url>/post/30018.html</url>
      
        <content type="html"><![CDATA[<p>LVM是Linux环境下对磁盘分区进行管理的一种机制，LVM是建立在硬盘和分区之上的一个逻辑层，来提高磁盘分区管理的灵活性。通过LVM系统管理员可以轻松管理磁盘分区，如：将若干个磁盘分区连接为一个整块的卷组（volume group），形成一个存储池。管理员可以在卷组上随意创建逻辑卷组（logical volumes），并进一步在逻辑卷组上创建文件系统。管理员通过LVM可以方便的调整存储卷组的大小，并且可以对磁盘存储按照组的方式进行命名、管理和分配。当系统添加了新的磁盘，通过LVM管理员就不必将磁盘的文件移动到新的磁盘上以充分利用新的存储空间，而是直接扩展文件系统跨越磁盘即可。</p><a id="more"></a><h4 id="新磁盘设置为LVM"><a href="#新磁盘设置为LVM" class="headerlink" title="新磁盘设置为LVM"></a>新磁盘设置为LVM</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">创建分区：fdisk /dev/sdb    ----&gt; /dev/sdb1</span><br><span class="line">创建pv：pvcreate /dev/sdb1</span><br><span class="line">查看pv：pvdispaly</span><br><span class="line">创建vg：vgcreate vg01 /dev/sdb1</span><br><span class="line">查看vg：vgdisplay</span><br><span class="line">创建LV：lvcreate -L 19G -n lvdata vg01</span><br><span class="line">查看lv：lvdisplay</span><br><span class="line">格式化为xfs：mkfs.xfs /dev/vg01/lvdata</span><br><span class="line">挂载：mount /dev/vg01/lvdata /opt/</span><br><span class="line">查看blkid：blkid /dev/vg01/lvdata </span><br><span class="line">/dev/vg01/lvdata: UUID="dd0cc062-eaff-4e75-a4fe-ea8d7c5de66c" TYPE="xfs" </span><br><span class="line">开机挂载：把UUID文件xf按格式写入/etc/fatab文件</span><br></pre></td></tr></table></figure><h4 id="删除LVM逻辑卷"><a href="#删除LVM逻辑卷" class="headerlink" title="删除LVM逻辑卷"></a>删除LVM逻辑卷</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">取消挂载：umount /dev/vg01/lvdata</span><br><span class="line">取消逻辑卷lv：lvremove /dev/vg01/lvdata</span><br><span class="line">取消卷组：vgremove vg01</span><br><span class="line">取消物理卷：pvremove /dev/sdb1</span><br><span class="line">删除/etc/fstab文件相应的开机挂载信息</span><br></pre></td></tr></table></figure><h4 id="使用LVM逻辑卷技术挂载新硬盘到LVM分区"><a href="#使用LVM逻辑卷技术挂载新硬盘到LVM分区" class="headerlink" title="使用LVM逻辑卷技术挂载新硬盘到LVM分区"></a>使用LVM逻辑卷技术挂载新硬盘到LVM分区</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">创建分区：fdisk /dev/sdb    ----&gt; /dev/sdb1</span><br><span class="line">创建pv：pvcreate /dev/sdb1</span><br><span class="line">查看卷组：vgdisplay   --&gt; VG Name: centos</span><br><span class="line">扩展卷组：vgextend /dev/centos /dev/sdb1</span><br><span class="line">在查看卷组大小已经修改</span><br><span class="line">扩展逻辑卷：lvextend -L +10G /dev/centos/root</span><br><span class="line">重新定义文件系统大小： xfs_growfs /dev/centos/root（xfs文件系统专用，ext文件系统使用resize2fs）</span><br><span class="line">查看分区大小：df -h</span><br></pre></td></tr></table></figure><h4 id="parted结合shell脚本快速分区"><a href="#parted结合shell脚本快速分区" class="headerlink" title="parted结合shell脚本快速分区"></a>parted结合shell脚本快速分区</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">parted /dev/$1 mklabel gpt</span><br><span class="line">parted /dev/$1 print</span><br><span class="line">echo "Ignore" | parted /dev/$1 "mkpart primary ext4 0 -1"</span><br><span class="line">mkfs.ext4 /dev/"$1"1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 磁盘管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx-HTTP模块详解</title>
      <link href="/post/60161.html"/>
      <url>/post/60161.html</url>
      
        <content type="html"><![CDATA[<p>http模块从外到内有http块、server块、location块，同时各个模块有各自的属性元素。</p><a id="more"></a><h2 id="openresty使用content-by-lua打印出用户浏览器信息"><a href="#openresty使用content-by-lua打印出用户浏览器信息" class="headerlink" title="openresty使用content_by_lua打印出用户浏览器信息"></a>openresty使用content_by_lua打印出用户浏览器信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /lua &#123;</span><br><span class="line">    default_type text/html;</span><br><span class="line">    content_by_lua <span class="string">'ngx.say("User-Agent:", ngx.req.get_headers()["User-Agent"])'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx-HTTP模块详解"><a href="#Nginx-HTTP模块详解" class="headerlink" title="Nginx HTTP模块详解"></a>Nginx HTTP模块详解</h2><h3 id="配置块的嵌套"><a href="#配置块的嵌套" class="headerlink" title="配置块的嵌套"></a>配置块的嵌套</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">main</span><br><span class="line">http &#123;</span><br><span class="line">    upstream &#123;...&#125;</span><br><span class="line">    split_clients &#123;...&#125;</span><br><span class="line">    map &#123;...&#125;</span><br><span class="line">    geo &#123;...&#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        if () &#123;...&#125;</span><br><span class="line">        location &#123;</span><br><span class="line">            limit_except &#123;...&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        location &#123;</span><br><span class="line">            location &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指令的context"><a href="#指令的context" class="headerlink" title="指令的context"></a>指令的context</h3><ul><li>指令的能够出现的配置块，配置范围<ul><li>log_format：http</li><li>access_log：http,server,location,if in location, limit_except</li><li>listen：server</li><li>root：server,location</li></ul></li></ul><h3 id="指令的合并"><a href="#指令的合并" class="headerlink" title="指令的合并"></a>指令的合并</h3><ul><li>指令在多个块下同时出现，</li><li>并不是所有指令都能合并</li></ul><p>合并规则：子配置不存在时，直接使用父配置块；子配置存在时，覆盖父配置</p><ul><li>值指令：解析配置时，存储当时配置的值<ul><li>root</li><li>access_log</li><li>gzip</li></ul></li><li>动作指令<ul><li>rewrite</li><li>proxy_pass</li><li>server_rewrite阶段</li><li>rewrite阶段</li><li>content阶段</li></ul></li></ul><h3 id="需要理解的问题"><a href="#需要理解的问题" class="headerlink" title="需要理解的问题"></a>需要理解的问题</h3><ol><li>指令在哪个块下生效？</li><li>指令允许出现在那些块下？</li><li>在server块生效，从http向server合并指令</li><li>配置缓存在内存</li></ol><h3 id="listen指令"><a href="#listen指令" class="headerlink" title="listen指令"></a>listen指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">listen unix:/var/run/nginx.sock;      #监听unix socket地址</span><br><span class="line">listen 127.0.0.1:8000;#监听端口加地址</span><br><span class="line">listen 127.0.0.1;#只监听IP,默认会监听80端口</span><br><span class="line">listen 8000;</span><br><span class="line">listen *:8000;</span><br><span class="line">listen localhost:8000 bind;</span><br><span class="line">listen [::]:8000 ipv6only=on;        #只支持IPV6</span><br><span class="line">listen [::]</span><br></pre></td></tr></table></figure><h3 id="Nginx正则表达式"><a href="#Nginx正则表达式" class="headerlink" title="Nginx正则表达式"></a>Nginx正则表达式</h3><ul><li>元字符<ul><li>. ：匹配换行符之外的任意字符</li><li>\w：匹配字母数字或下划线或汉字</li><li>\d：匹配数字</li><li>\s：匹配任意的空白字符</li><li>\b：匹配单词的开始或结束</li><li>^：匹配字符串的开始</li><li>$：匹配字符串的结束</li></ul></li><li>重复<ul><li>*：重复零次或多次</li><li>+：重复一次或多次</li><li>?：重复零次或一次</li><li>{n}：重复n次</li><li>{n，}：重复n次或更多次</li><li>{n，m}：重复n到m次</li></ul></li></ul><h3 id="server-name指令块"><a href="#server-name指令块" class="headerlink" title="server_name指令块"></a>server_name指令块</h3><ul><li>server_name：可以跟多个域名，第一个是主域名，支持泛域名（仅支持最前和最后），正则表达式（加~前缀）</li><li>server_name_in_redirect：控制主域名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       8099;</span><br><span class="line">    server_name  primary.dookt.com.cn second.dookt.com.cn;</span><br><span class="line">    server_name_in_redirect off;</span><br><span class="line">    return 302 /redirect;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用curl命令查看结果，发现主域名未生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]# curl -I  http://second.dookt.com.cn:8099/redirect</span><br><span class="line">HTTP/1.1 302 Moved Temporarily</span><br><span class="line">Server: openresty/1.13.6.2</span><br><span class="line">Date: Thu, 11 Jul 2019 19:20:04 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 167</span><br><span class="line">Location: http://second.dookt.com.cn:8099/redirect</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启server_name_in_redirect后的配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       8099;</span><br><span class="line">    server_name  primary.dookt.com.cn second.dookt.com.cn;</span><br><span class="line">    server_name_in_redirect on;</span><br><span class="line">    return 302 /redirect;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用curl命令查看结果，发现使用非主域名访问，会自动跳转至主域名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]# curl -I  http://second.dookt.com.cn:8099/redirect</span><br><span class="line">HTTP/1.1 302 Moved Temporarily</span><br><span class="line">Server: openresty/1.13.6.2</span><br><span class="line">Date: Thu, 11 Jul 2019 19:19:55 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 167</span><br><span class="line">Location: http://primary.dookt.com.cn:8099/redirect</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><h3 id="用正则表达式创建变量"><a href="#用正则表达式创建变量" class="headerlink" title="用正则表达式创建变量"></a>用正则表达式创建变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 案例一：位置变量，例如此处取到www.dookt.com,则<span class="variable">$2</span> = <span class="string">'dookt.com'</span>，即root /site/dookt.com;</span></span><br><span class="line">server &#123;</span><br><span class="line">    server_name ~^(www\.)?(.+)$;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /sites/$2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">案例二：命名变量</span></span><br><span class="line">server  &#123;</span><br><span class="line">    server_name ~^(www\.)?(?&lt;domain&gt;.+)$;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /sites/$domain;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h3><ul><li>.dookt.com可以匹配dookt.com和*.dookt.com</li><li>_匹配所有</li><li>“”匹配没有传递Host头部</li></ul><h3 id="server-name匹配顺序"><a href="#server-name匹配顺序" class="headerlink" title="server_name匹配顺序"></a>server_name匹配顺序</h3><ol><li>精确匹配</li><li>*在前的泛域名</li><li>*在后的泛域名</li><li>按文件中的顺序匹配正则表达式域名</li><li>default server<ol><li>第一个</li><li>listen指定default</li></ol></li></ol><h2 id="HTTP请求的11个阶段"><a href="#HTTP请求的11个阶段" class="headerlink" title="HTTP请求的11个阶段"></a>HTTP请求的11个阶段</h2><p>除http过滤模块以及只提供变量的nginx模块，所有的http模块必须从nginx定义好的11个阶段进行请求处理</p><ol><li>POST_READ：realip     #读取到http头部时</li><li>SERVER_REWRITE：rewrite</li><li>FIND_CONFIG：find_config</li><li>REWRITE：rewrite</li><li>POST_REWRITE：rewrite     #刚刚rewrite之后</li><li>PREACCESS：limit_conn, limit_req</li><li>ACCESS：access, auth_basic, auth_request</li><li>POST_ACCESS</li><li>PRECONNECT：try_file, mirrors</li><li>CONNECT：concat, random_index, index, auto_index, static</li><li>LOG：log</li></ol><h3 id="postread阶段—realip模块"><a href="#postread阶段—realip模块" class="headerlink" title="postread阶段—realip模块"></a>postread阶段—realip模块</h3><h4 id="如何拿到用户的真实IP地址？"><a href="#如何拿到用户的真实IP地址？" class="headerlink" title="如何拿到用户的真实IP地址？"></a>如何拿到用户的真实IP地址？</h4><ol><li>TCP连接4元组(src ip, src port, dst ip, dst port)</li><li>HTTP头部X_Forwarded_for用于传递IP</li><li>HTTP头部X-Real-IP用于传递用户IP</li><li>网络中存在许多反向代理</li></ol><p>用户 –&gt; ADSL –&gt; CDN –&gt; 反向代理1 –&gt; Nginx</p><p>用户内网IP：172.16.100.x</p><p>运营商IP：115.204.33.1</p><p>CDN IP地址：1.1.1.1</p><p>反向代理IP：2.2.2.2</p><p>CDN添加：X-Forward_For：115.204.33.1    X-Real-IP：115.204.33.1</p><p>反向代理添加的：X-Forward_For：115.204.33.1，1.1.1.1    X-Real-IP：115.204.33.1</p><p>此时Nginx就知道用户地址为：115.204.33.1，远端地址(remote_addr)为：2.2.2.2</p><h4 id="拿到用户真实IP地址如何使用"><a href="#拿到用户真实IP地址如何使用" class="headerlink" title="拿到用户真实IP地址如何使用?"></a>拿到用户真实IP地址如何使用?</h4><p>基于变量使用，如：binary_remote_addr，remote_addr。其值为真实的IP,这样做连接限制(limit_conn模块)才有意义。</p><h4 id="realip模块的指令"><a href="#realip模块的指令" class="headerlink" title="realip模块的指令"></a>realip模块的指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认不带realip模块，编译添加该模块至nginx中</span></span><br><span class="line">./configure --with-http_realip_module --add-module=../tengine-2.2.2/modules/ngx_slab_stat/ </span><br><span class="line">gmake &amp;&amp; gmake install</span><br></pre></td></tr></table></figure><ul><li>set_real_ip_from（是指接受从哪个信任前代理处获得真实用户ip，哪些地址里的x-forwareed-for才替换remote_addr变量）</li></ul><table><thead><tr><th align="left">Syntax:</th><th>set_real_ip_from address | CIDR | unix:;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><ul><li>real_ip_header（是指从接收到报文的哪个http首部去获取前代理传送的用户ip）</li></ul><table><thead><tr><th align="left">Syntax:</th><th>real_ip_header field | X-Real-IP | X-Forwarded-For | proxy_protocol;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>real_ip_header X-Real-IP;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><ul><li>real_ip_recursive（环回地址，打开时，把x_forwarded_for最后的地址如果和客户端地址相同的话，取下一个地址）</li></ul><table><thead><tr><th align="left">Syntax:</th><th>real_ip_recursive on | off;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>real_ip_recursive off;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭环回地址real_ip_recursive时</span></span><br><span class="line">server &#123;</span><br><span class="line">    server_name     realip.dookt.com.cn;</span><br><span class="line">    error_log logs/realip-error.log debug;</span><br><span class="line">    set_real_ip_from    172.16.100.11;     #把本机设置为可信地址</span><br><span class="line">    #real_ip_header X-Real-IP;</span><br><span class="line">    real_ip_recursive off;</span><br><span class="line">    real_ip_header X-Forwarded-For;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        return 200 "Client real ip: $remote_addr\n";</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用curl -H在请求中添加head</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]# curl -H 'X-Forwarded-For: 1.1.1.1, 172.16.100.11' realip.dookt.com.cn</span><br><span class="line">Client real ip: 172.16.100.11</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">开启环回地址real_ip_recursive时</span></span><br><span class="line">server &#123;</span><br><span class="line">    server_name     realip.dookt.com.cn;</span><br><span class="line">    error_log logs/realip-error.log debug;</span><br><span class="line">    set_real_ip_from    172.16.100.11;</span><br><span class="line">    #real_ip_header X-Real-IP;</span><br><span class="line">    real_ip_recursive on;</span><br><span class="line">    real_ip_header X-Forwarded-For;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        return 200 "Client real ip: $remote_addr\n";</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启环回地址后。这个变量remote_addr（1.1.1.1）就可以用来限速处理了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]# curl -H 'X-Forwarded-For: 1.1.1.1, 172.16.100.11' realip.dookt.com.cn</span><br><span class="line">Client real ip: 1.1.1.1</span><br></pre></td></tr></table></figure><h3 id="Rewrite模块：return指令"><a href="#Rewrite模块：return指令" class="headerlink" title="Rewrite模块：return指令"></a>Rewrite模块：return指令</h3><table><thead><tr><th align="left">Syntax:</th><th>return code [text];<code></code>return code URL;<code></code>return URL;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>server</code>, <code>location</code>, <code>if</code></td></tr></tbody></table><h4 id="Nginx返回状态码"><a href="#Nginx返回状态码" class="headerlink" title="Nginx返回状态码"></a>Nginx返回状态码</h4><ul><li>Nginx自定义<ul><li>444：Nginx自定义的（Nginx立即关闭连接，不再向用户发送任何信息）</li></ul></li><li>HTTP1.0标准<ul><li>301：http1.0永久重定向</li><li>302：临时重定向，禁止被缓存</li></ul></li><li>HTTP1.1标准<ul><li>303：临时重定向，允许改变方法，禁止被缓存</li><li>307：临时重定向，不允许改变方法，禁止被缓存</li><li>308：永久重定向，不允许改变方法</li></ul></li></ul><h3 id="Rewrite模块：return指令和error-page"><a href="#Rewrite模块：return指令和error-page" class="headerlink" title="Rewrite模块：return指令和error_page"></a>Rewrite模块：return指令和error_page</h3><table><thead><tr><th align="left">Syntax:</th><th>error_page code … [=[response]] uri;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">例子</span></span><br><span class="line">1. error_page 404 /404.html;</span><br><span class="line">2. error_page 500 502 503 504 /50x/html;</span><br><span class="line">3. error_page 404 = 200 /empty.gif;</span><br><span class="line">4. error_page 404 = /404.php;</span><br><span class="line">5. location / &#123;</span><br><span class="line">       error_page 404 = @fallback;</span><br><span class="line">   &#125;</span><br><span class="line">   location @fallback &#123;</span><br><span class="line">       proxy_pass http://backend;</span><br><span class="line">   &#125;</span><br><span class="line">6. error_page 403 http://example.com/forbidden,html;</span><br><span class="line">7. error_page 404 = 301 http://example.com/notfound.html;</span><br></pre></td></tr></table></figure><h3 id="return指令和error-page例子"><a href="#return指令和error-page例子" class="headerlink" title="return指令和error_page例子"></a>return指令和error_page例子</h3><p>Q：server块下与location块下的return指令关系？</p><p>A：server块下return与location块下return分别属于server rewrite阶段和rewrite阶段，前者server rewrite先于后者rewrite执行。return是动作类指令，没有合并关系</p><p>Q：return与error_page指令的关系？</p><p>A：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 使用error_page把404页面重定向到403.html</span><br><span class="line">server &#123;</span><br><span class="line">    listen  8080;</span><br><span class="line">    server_name return.dookt.com.cn;</span><br><span class="line">    root html/;</span><br><span class="line">    error_page 404 /403.html;</span><br><span class="line">    #return 405;</span><br><span class="line">    location / &#123;</span><br><span class="line">        #return 404 &quot;Find nothing!\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用curl访问测试结果如下，结果为自定义的403.html文件的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]# curl return.dookt.com.cn:8080/sdfgsag.txt</span><br><span class="line">&lt;h1&gt;test 403 Forbirdden&lt;/h1&gt;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> location块下<span class="built_in">return</span>与server块下error_page的关系</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen  8080;</span><br><span class="line">    server_name return.dookt.com.cn;</span><br><span class="line">    root html/;</span><br><span class="line">    error_page 404 /403.html;</span><br><span class="line">    #return 405;</span><br><span class="line">    location / &#123;</span><br><span class="line">        return 404 "Find nothing!\n";</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用curl访问测试结果如下，结果返回Find nothing！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]# curl return.dookt.com.cn:8080/sdfgsag.txt</span><br><span class="line">Find nothing!</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> server与location块下的<span class="built_in">return</span>指令关系</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen  8080;</span><br><span class="line">    server_name return.dookt.com.cn;</span><br><span class="line">    root html/;</span><br><span class="line">    error_page 404 /403.html;</span><br><span class="line">    return 405;#server rewrite阶段</span><br><span class="line">    location / &#123;</span><br><span class="line">        return 404 "Find nothing!\n";#rewrite阶段</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用curl访问测试结果如下，返回结果405</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 extra]# curl return.dookt.com.cn:8080/sdfgsag.txt</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;405 Not Allowed&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor="white"&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;405 Not Allowed&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;openresty/1.13.6.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>结果表明：server阶段的return 先于location阶段的return执行</p><h3 id="Rewrite模块：重写URL"><a href="#Rewrite模块：重写URL" class="headerlink" title="Rewrite模块：重写URL"></a>Rewrite模块：重写URL</h3><table><thead><tr><th align="left">Syntax:</th><th>rewrite regex replacement [flag];</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>server</code>, <code>location</code>, <code>if</code></td></tr></tbody></table><h4 id="rewrite功能"><a href="#rewrite功能" class="headerlink" title="rewrite功能"></a>rewrite功能</h4><ul><li>将regex指定的url替换成replacement这个新的URL<ul><li>可以使用正则表达式及变量提取</li></ul></li><li>当replacement以http://或者https://或者$schema开头，则直接返回302重定向</li><li>替换后的url根据flag指定的方式进行处理<ul><li>last：用replacement这个URL进行新的location匹配</li><li>break：break指令停止当前脚本指令的执行，等价于独立的break指令</li><li>redirect：返回302重定向</li><li>permanent：返回301重定向</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 目录结构如下</span></span><br><span class="line">tree html</span><br><span class="line">├── first</span><br><span class="line">│   └── 1.txt</span><br><span class="line">├── index.html</span><br><span class="line">├── second</span><br><span class="line">│   └── 2.txt</span><br><span class="line">└── third</span><br><span class="line">    └── 3.txt</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置文件，未使用<span class="built_in">break</span></span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8057;</span><br><span class="line">    server_name rewrite.dookt.com.cn;</span><br><span class="line">    rewrite_log on;</span><br><span class="line">    error_log logs/rewrite_error.log notice;</span><br><span class="line"></span><br><span class="line">    root html/;</span><br><span class="line">    location /first &#123;</span><br><span class="line">        rewrite /first(.*) /second$1 last;</span><br><span class="line">        return 200 'first!\n';</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /second &#123;</span><br><span class="line">        rewrite /second(.*) /third$1;     #此处没有break,执行完之后，执行return 200 'second!\n';</span><br><span class="line">        return 200 'second!\n';</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /third &#123;</span><br><span class="line">        return 200 'third!\n';</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用curl访问 first/3.txt，此时先匹配location /first，在重定向到location /second.然后返回 second!</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]# curl rewrite.dookt.com.cn:8057/first/3.txt</span><br><span class="line">second!</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 此时使用<span class="built_in">break</span></span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8057;</span><br><span class="line">    server_name rewrite.dookt.com.cn;</span><br><span class="line">    rewrite_log on;</span><br><span class="line">    error_log logs/rewrite_error.log notice;</span><br><span class="line"></span><br><span class="line">    root html/;</span><br><span class="line">    location /first &#123;</span><br><span class="line">        rewrite /first(.*) /second$1 last;</span><br><span class="line">        return 200 'first!\n';</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /second &#123;</span><br><span class="line">        rewrite /second(.*) /third$1 break;        #此处使用break时，直接跳出location /second，同时也跳出了return 200 'second!\n'</span><br><span class="line">        return 200 'second!\n';</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /third &#123;</span><br><span class="line">        return 200 'third!\n';</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用curl访问 first/3.txt，此时先匹配location /first，在重定向到location /second（使用breakt跳出，未执行return），然后转到location /third。返回 third！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]# curl rewrite.dookt.com.cn:8057/first/3.txt</span><br><span class="line">test3</span><br></pre></td></tr></table></figure><h3 id="Rewrite模块：条件判断if"><a href="#Rewrite模块：条件判断if" class="headerlink" title="Rewrite模块：条件判断if"></a>Rewrite模块：条件判断if</h3><p>根据请求中变量的值，判断变量的值是否满足某个条件，在执行if块下的配置指令，根据这些匹配指令在调用相应模块执行请求</p><table><thead><tr><th align="left">Syntax:</th><th>if (condition) { … }</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>server</code>, <code>location</code></td></tr></tbody></table><p>如果条件（condition）为真，则执行大括号内的指令，遵循值指令的继承规则</p><h4 id="if指令的条件表达式"><a href="#if指令的条件表达式" class="headerlink" title="if指令的条件表达式"></a>if指令的条件表达式</h4><ol><li>检查变量为空或值是否为0，直接使用</li><li>将变量与字符串做匹配，或者使用 = 或者 !=</li><li>将变量与正则表达式做匹配<ol><li>大小写敏感：~  或者 !~</li><li>大小写不敏感：<del>* 或者 !</del>*</li></ol></li><li>检查文件是否存在，使用 -f 或者 !-f</li><li>检查目录是否存在，使用 -d 或者 !-d</li><li>检查文件，目录，软链是否存在，使用 -e 或者 !-e</li><li>检查是否为可执行文件，使用 -x 或者 !-x</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例1,如果用户访问代理是IE浏览器就执行以下操作</span></span><br><span class="line">if ($http_user_agent ~ MSIE) &#123;</span><br><span class="line">    rewrite ^(.*)$ /msie/$1 break;         </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 案例2，</span></span><br><span class="line">if ($http_cookie ~* "id=([^;]+)(?::|$)") &#123;</span><br><span class="line">    set $id $1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 案例3，post方法返回405</span></span><br><span class="line">if ($request_mothod = POST) &#123;</span><br><span class="line">    return 405</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 案例4，满足需要是限速10k</span></span><br><span class="line">if ($slow) &#123;</span><br><span class="line">limit_rate 10k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 案例5,如果是盗链，则返回403</span></span><br><span class="line">if ($invalid_referer) &#123;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="find-config阶段：找到处理请求的location指令块"><a href="#find-config阶段：找到处理请求的location指令块" class="headerlink" title="find_config阶段：找到处理请求的location指令块"></a>find_config阶段：找到处理请求的location指令块</h3><table><thead><tr><th align="left">Syntax:</th><th>location [ = | ~ | <del>* | ^</del> ] uri { … }<code></code>location @name { … }</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>server</code>, <code>location</code></td></tr></tbody></table><p>merge_shashes：可以合并url中的斜杠</p><table><thead><tr><th align="left">Syntax:</th><th>merge_slashes on | off;</th></tr></thead><tbody><tr><td align="left">Default:</td><td><code>merge_slashes on;</code></td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code></td></tr></tbody></table><h4 id="location匹配规则：仅匹配URI-忽略参数"><a href="#location匹配规则：仅匹配URI-忽略参数" class="headerlink" title="location匹配规则：仅匹配URI,忽略参数"></a>location匹配规则：仅匹配URI,忽略参数</h4><ul><li>合并连续的 ‘/‘ 符号<ul><li>merge_shashes on</li></ul></li><li>前缀字符串<ul><li>常规（）</li><li>= ：精确匹配</li><li>^~：匹配上后不再进行正则表达式匹配</li></ul></li><li>用于内部跳转命名的location ：@</li><li>正则表达式<ul><li>~ ：大小写敏感的正则匹配</li><li>~* ：忽略大小写的正则匹配</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 案例</span></span><br><span class="line">server &#123;</span><br><span class="line">    server_name     location.dookt.com.cn;</span><br><span class="line"></span><br><span class="line">    location ~/Test1/$ &#123;</span><br><span class="line">        return 200 'First regular expresssions match!\n';</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* /Test1(\w+)$ &#123;</span><br><span class="line">        return 200 'Longest regular expresssions match!\n';</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ^~/Test1/ &#123;</span><br><span class="line">        return 200 'Stop regular expresssions match!\n';</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /Test1/Test2 &#123;</span><br><span class="line">        return 200 'Longest prefix string match!\n';</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /Test1 &#123;</span><br><span class="line">        return 200 'Prefix string match!\n';</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location = /Test1 &#123;</span><br><span class="line">        return 200 'Exact match!\n';</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用curl命令测试结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 访问 /Test1 --- 匹配到5，6，精确匹配</span></span><br><span class="line">[root@openresty01 ~]# curl location.dookt.com.cn/Test1</span><br><span class="line">Exact match!</span><br><span class="line"><span class="meta">#</span><span class="bash"> 访问 /Test1/ ---匹配上1，</span></span><br><span class="line">[root@openresty01 ~]# curl location.dookt.com.cn/Test1/</span><br><span class="line">Stop regular expresssions match!</span><br><span class="line"><span class="meta">#</span><span class="bash"> 访问 /Test1/Test2 --- 前缀匹配</span></span><br><span class="line">[root@openresty01 ~]# curl location.dookt.com.cn/Test1/Test2</span><br><span class="line">Longest regular expresssions match!</span><br><span class="line"><span class="meta">#</span><span class="bash"> 访问 /Test1/Test2/ ---</span></span><br><span class="line">[root@openresty01 ~]# curl location.dookt.com.cn/Test1/Test2/</span><br><span class="line">Longest prefix string match!</span><br><span class="line"><span class="meta">#</span><span class="bash"> 访问 /<span class="built_in">test</span>/Test2 ---</span></span><br><span class="line">[root@openresty01 ~]# curl location.dookt.com.cn/test1/Test2/</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor="white"&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;openresty/1.13.6.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="location匹配顺序"><a href="#location匹配顺序" class="headerlink" title="location匹配顺序"></a>location匹配顺序</h4><ul><li>遍历匹配全部前缀字符串location<ul><li>如果匹配上 “=” 字符串，则使用匹配上的”=”精确匹配location</li><li>如果匹配上 “^<del>“ 字符串，则使用匹配上的 “^</del>“ 字符串location</li><li>如果没有匹配上，则记住最长匹配的前缀字符串location<ul><li>按nginx.conf中的顺序依次匹配正则表达式location<ul><li>如果匹配上，则使用匹配上的正则表达式</li><li>如果没有匹配上，则继续按nginx.conf中的顺序依次匹配正则表达式location</li><li>如果所有的正则表达式都不匹配，则使用最长匹配的前缀字符串location</li></ul></li></ul></li></ul></li></ul><h3 id="preaccess阶段：对连接做限制的limit-conn模块"><a href="#preaccess阶段：对连接做限制的limit-conn模块" class="headerlink" title="preaccess阶段：对连接做限制的limit_conn模块"></a>preaccess阶段：对连接做限制的limit_conn模块</h3><ul><li>生效阶段：NGX_HTTP_PREACCESS_PHASH阶段</li><li>模块：http_limit_conn_module</li><li>默认编译进nginx，通过–wthout-http_limit_conn_module禁用该模块</li><li>生效范围<ul><li>全部的worker进程（基于共享内存）</li><li>进入preaccess阶段前不生效</li><li>限制的有效性取决于key的设计：依赖于postread阶段的realip模块总中取到的真实IP</li></ul></li></ul><h4 id="limit-conn指令"><a href="#limit-conn指令" class="headerlink" title="limit_conn指令"></a>limit_conn指令</h4><ul><li>定义共享内存（包括大小），以及key关键字</li></ul><table><thead><tr><th align="left">Syntax:</th><th>limit_conn_zone key zone=name:size;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code></td></tr></tbody></table><ul><li>限制并发连接数</li></ul><table><thead><tr><th align="left">Syntax:</th><th>limit_conn zone number;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><ul><li>限制发生时的日志级别</li></ul><table><thead><tr><th align="left">Syntax:</th><th>limit_conn_log_level info | notice | warn | error;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>limit_conn_log_level error;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><ul><li>限制发生时向客户端返回的错误码</li></ul><table><thead><tr><th align="left">Syntax:</th><th>limit_conn_status code;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>limit_conn_status 503;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置一个叫addr的共享内存，用来限制客户端访问，还限制访问速率50字节，并给出限制访问客户端返回错误码500</span></span><br><span class="line">limit_conn_zone $binary_remote_addr zone=addr:10M;</span><br><span class="line">server &#123;</span><br><span class="line">    server_name limit.dookt.com.cn;</span><br><span class="line">    root html;</span><br><span class="line">    error_log logs/limit-error.log info;</span><br><span class="line">    location / &#123;</span><br><span class="line">        limit_conn_status 500;</span><br><span class="line">        limit_conn_log_level warn;</span><br><span class="line">        limit_rate 50;</span><br><span class="line">        limit_conn addr 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 依次使用curl命令访问limit.dookt.com.cn,可以看出第二个返回了500</span></span><br><span class="line"> [root@openresty01 ~]#  curl limit.dookt.com.cn</span><br><span class="line">test index</span><br><span class="line">[root@openresty01 ~]#  curl limit.dookt.com.cn</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;500 Internal Server Error&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor="white"&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;500 Internal Server Error&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;openresty/1.13.6.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="preaccess阶段对连接做限制的limit-req模块"><a href="#preaccess阶段对连接做限制的limit-req模块" class="headerlink" title="preaccess阶段对连接做限制的limit_req模块"></a>preaccess阶段对连接做限制的limit_req模块</h3><ul><li><p>生效阶段：NGX_HTTP_PREACCESS_PHASE阶段</p></li><li><p>模块：http_limit_req_module</p></li><li><p>默认编辑进nginx，使用–without-http_limit_req_module禁用该模块</p></li><li><p>生效算法：leaky bucket算法</p></li><li><p>生效范围</p><ul><li>全部worker进程（基于共享内存）</li><li>进入preaccess阶段前不生效</li></ul></li><li><p>定义共享内存（包括大小），以及key关键字和限制速率， rate单位为r/s或者r/m</p></li></ul><table><thead><tr><th align="left">Syntax:</th><th>limit_req_zone key zone=name:size rate=rate [sync];</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code></td></tr></tbody></table><ul><li>限制并发连接数，burst默认为0，nodelay，对burst请求不再采用延时处理的做法，而是立刻处理</li></ul><table><thead><tr><th align="left">Syntax:</th><th>limit_req zone=name [burst=number] [nodelay | delay=number];</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><ul><li>限制发生时的日志级别</li></ul><table><thead><tr><th align="left">Syntax:</th><th>limit_req_log_level info | notice | warn | error;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>limit_req_log_level error;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><ul><li>限制发生时现客户端返回的错误码</li></ul><table><thead><tr><th align="left">Syntax:</th><th>limit_req_status code;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>limit_req_status 503;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><p>Q：limit_req与limit_conn配置同时生效时，哪个有效？</p><p>A：limit_req</p><p>Q：nodelay添加与否，有什么不同？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置一个叫one的共享内存，用来限制客户端访问，未使用brust，默认的限制访问错误码503</span></span><br><span class="line">limit_conn_zone $binary_remote_addr zone=addr:10M;</span><br><span class="line">limit_req_zone $binary_remote_addr zone=one:10m rate=2r/m;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    server_name limit.dookt.com.cn;</span><br><span class="line">    root html;</span><br><span class="line">    error_log logs/limit-error.log info;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        limit_conn_status 500;</span><br><span class="line">        limit_conn_log_level warn;</span><br><span class="line">        #limit_rate 50;</span><br><span class="line">        #limit_conn addr 1;</span><br><span class="line">        #limit_req zone=one burst=3 nodelay;</span><br><span class="line">        limit_req zone=one;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用curl测试访问，结果如下：访问第二次就不能继续访问了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]#  curl limit.dookt.com.cn</span><br><span class="line">&lt;h1&gt;Welcome to OpenResty!&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">[root@openresty01 ~]#  curl limit.dookt.com.cn</span><br><span class="line">&lt;h1&gt;503 Service Temporarily Unavailable&lt;/h1&gt;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置一个叫one的共享内存，用来限制客户端访问，使用brust，默认的限制访问错误码503</span></span><br><span class="line">limit_conn_zone $binary_remote_addr zone=addr:10M;</span><br><span class="line">limit_req_zone $binary_remote_addr zone=one:10m rate=2r/m;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    server_name limit.dookt.com.cn;</span><br><span class="line">    root html;</span><br><span class="line">    error_log logs/limit-error.log info;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        limit_conn_status 500;</span><br><span class="line">        limit_conn_log_level warn;</span><br><span class="line">        #limit_rate 50;</span><br><span class="line">        #limit_conn addr 1;</span><br><span class="line">        limit_req zone=one burst=3 nodelay;</span><br><span class="line">        #limit_req zone=one;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用curl测试访问，结果如下：因为使用了burst，会立即处理，所以可以直接访问成功两次</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]#  curl limit.dookt.com.cn</span><br><span class="line">&lt;h1&gt;Welcome to OpenResty!&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">[root@openresty01 ~]#  curl limit.dookt.com.cn</span><br><span class="line">&lt;h1&gt;Welcome to OpenResty!&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">[root@openresty01 ~]#  curl limit.dookt.com.cn</span><br><span class="line">&lt;h1&gt;503 Service Temporarily Unavailable&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>结果表明使用burst处理会立即处理，不会延时处理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">同时启用限制连接和限制请求（limit_con、limit_req），若返回503则是限制请求生效，若返回500则限制连接生效</span></span><br><span class="line">limit_conn_zone $binary_remote_addr zone=addr:10M;</span><br><span class="line">limit_req_zone $binary_remote_addr zone=one:10m rate=2r/m;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    server_name limit.dookt.com.cn;</span><br><span class="line">    root html;</span><br><span class="line">    error_log logs/limit-error.log info;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        limit_conn_status 500;</span><br><span class="line">        limit_conn_log_level warn;</span><br><span class="line">        limit_rate 50;</span><br><span class="line">        limit_conn addr 1;</span><br><span class="line">        #limit_req zone=one burst=3 nodelay;</span><br><span class="line">        limit_req zone=one;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：limit_req在limit_conn之前</p><h3 id="access阶段的模块"><a href="#access阶段的模块" class="headerlink" title="access阶段的模块"></a>access阶段的模块</h3><ul><li>access模块</li><li>auth_basic模块</li><li>auth_request模块</li><li>其他模块</li></ul><h3 id="access阶段：对IP做限制的access模块"><a href="#access阶段：对IP做限制的access模块" class="headerlink" title="access阶段：对IP做限制的access模块"></a>access阶段：对IP做限制的access模块</h3><ul><li>生效阶段：NGX_HTTP_ACCESS_PHASH阶段</li><li>模块：http_access_module</li><li>默认编译进nginx，通过–without-http_access_module禁用功能</li><li>生效范围<ul><li>进入access阶段前不生效</li></ul></li></ul><table><thead><tr><th align="left">Syntax:</th><th>allow address | CIDR | unix: | all;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>deny address | CIDR | unix: | all;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        deny 172.16.100.1;</span><br><span class="line">        allow 172.16.100.0/24;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="access阶段：对用户名和密码做限制的auth-basic模块"><a href="#access阶段：对用户名和密码做限制的auth-basic模块" class="headerlink" title="access阶段：对用户名和密码做限制的auth_basic模块"></a>access阶段：对用户名和密码做限制的auth_basic模块</h3><h4 id="auth-basic模块的功能"><a href="#auth-basic模块的功能" class="headerlink" title="auth_basic模块的功能"></a>auth_basic模块的功能</h4><ul><li>基于HTTP Basic Authutication协议进行用户名密码认证</li><li>默认编译进Nginx，通过–without-http_auth_basic_module禁用该模块</li></ul><h4 id="auth-basic模块指令"><a href="#auth-basic模块指令" class="headerlink" title="auth_basic模块指令"></a>auth_basic模块指令</h4><table><thead><tr><th align="left">Syntax:</th><th>auth_basic string | off;    #显示的titile</th></tr></thead><tbody><tr><td align="left">Default:</td><td>auth_basic off;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>auth_basic_user_file file;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code></td></tr></tbody></table><h4 id="生成密码文件"><a href="#生成密码文件" class="headerlink" title="生成密码文件"></a>生成密码文件</h4><ul><li>安装依赖包：httpd-tools</li><li>生成文件：htpasswd -c file -b user pass 。-c生成一个新文件，不加-c为追加</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name access.dookt.com.cn;</span><br><span class="line">    location / &#123;</span><br><span class="line">        satisfy any;</span><br><span class="line">        auth_basic "Test auth_basic";</span><br><span class="line">        auth_basic_user_file /usr/local/openresty/nginx/passwd.db;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用elinks或者在浏览器中访问提示输入用户名、密码。必须有输入正确的用户名密码才能访问</p><h3 id="access阶段：使用第三方做授权控制的auth-request模块"><a href="#access阶段：使用第三方做授权控制的auth-request模块" class="headerlink" title="access阶段：使用第三方做授权控制的auth_request模块"></a>access阶段：使用第三方做授权控制的auth_request模块</h3><ul><li><p>功能</p><ul><li>向上游服务器转发请求，有上游服务返回响应码2xx，则继续执行；若返回401或403，则将响应发给客户端</li></ul></li><li><p>原理</p><ul><li>收到请求后，生成子请求，通过反向代理技术把请求传递给上游服务</li></ul></li><li><p>默认未编译进nginx，需要使用–with-http_auth_request_module</p></li><li><p>指令</p></li></ul><table><thead><tr><th align="left">Syntax:</th><th>auth_request uri | off;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>auth_request off;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>auth_request_set $variable value;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 172.16.100.11:80</span></span><br><span class="line">server &#123;</span><br><span class="line">    server_name access.dookt.com.cn;</span><br><span class="line">    error_log logs/access-error.log debug;</span><br><span class="line">    location /auth_request &#123;</span><br><span class="line">        auth_request /test_auth;</span><br><span class="line">    &#125;</span><br><span class="line">    location = / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8090/auth_upstream;</span><br><span class="line">        proxy_pass_request_body off;</span><br><span class="line">        proxy_set_header Centenyt-Length "";</span><br><span class="line">        proxy_set_header X-Original-URI $request_uri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 172.16.100.11:8090</span></span><br><span class="line">    server &#123;</span><br><span class="line">    listen 8090;</span><br><span class="line">    location /auth_upstream &#123;</span><br><span class="line">        return 403 'auth success!\n';</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">此时访问172.16.100.16.11:80</span></span><br><span class="line">[root@openresty01 ~]# curl access.dookt.com.cn -I</span><br><span class="line">HTTP/1.1 403 Forbidden</span><br><span class="line">Server: openresty/1.13.6.2</span><br><span class="line">Date: Fri, 12 Jul 2019 06:07:47 GMT</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line">Content-Length: 13</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改172.16.100.11:8090 配置文件中<span class="built_in">return</span> 200 <span class="string">'auth success!\n'</span>;</span></span><br><span class="line">[root@openresty01 extra]# curl access.dookt.com.cn -I</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: openresty/1.13.6.2</span><br><span class="line">Date: Fri, 12 Jul 2019 06:08:25 GMT</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line">Content-Length: 13</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><h3 id="access阶段：satisfy指令"><a href="#access阶段：satisfy指令" class="headerlink" title="access阶段：satisfy指令"></a>access阶段：satisfy指令</h3><table><thead><tr><th align="left">Syntax:</th><th>satisfy all | any;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>satisfy all;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><ul><li>执行一个access模块</li><li>如果允许放行，判断satisfy开关<ul><li>如果时候all，则执行下一个access模块</li><li>如果是any，则access阶段放行</li></ul></li><li>如果被拒绝，判断satisfy开关<ul><li>如果是any，则执行下一个access模块</li><li>如果是all，则执行拒绝请求</li></ul></li></ul><h4 id="Q-amp-A环节"><a href="#Q-amp-A环节" class="headerlink" title="Q&amp;A环节"></a>Q&amp;A环节</h4><p>Q：如果有return指令，access阶段会生效吗？</p><p>A：肯定不会，因为return指令在server rewrite或者rewrite阶段，都在access阶段之前</p><p>Q：多个access模块的顺序有影响吗？</p><p>查看nginx_module.c</p><ul><li>&amp;ngx_http_auth_request_module,</li><li>&amp;ngx_http_auth_basic_module,</li><li>&amp;ngx_http_access_module,</li></ul><p>A：肯定是有影响的</p><p>Q：输对密码，下面可以访问到文件吗？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">satisfy any;</span><br><span class="line">auth_basic &quot;test auth_basic&quot;</span><br><span class="line">auth_basic_user_file /usr/local/openresty/nginx/passwd.db;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A：配置satisfy any，只要输对用户名密码就可以访问</p><p>Q：如果把deny all提到auth_basic之前呢？</p><p>A：还是可以访问的，因为和配置指令的顺序无关</p><p>Q：如果改为allow all，有机会输入密码吗？</p><p>A：改为allow all，则没有机会输入密码，因为allow all直接同意了</p><h3 id="precontent阶段：按序访问资源的try-file模块"><a href="#precontent阶段：按序访问资源的try-file模块" class="headerlink" title="precontent阶段：按序访问资源的try_file模块"></a>precontent阶段：按序访问资源的try_file模块</h3><table><thead><tr><th align="left">Syntax:</th><th>try_files  file…uri; try_files file…=code;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>server</code>, <code>location</code></td></tr></tbody></table><ul><li>功能</li><li>依次访问多个url对应的文件（由root或者alias指令指定），当文件存在是直接返回文件内容，如果所有文件都不存在，则按最后一个URL结果或者code返回</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name tryfiles.dookt.com.cn;</span><br><span class="line">    error_log logs/tryfiles_error.log info;</span><br><span class="line">    root html;</span><br><span class="line">    default_type text/html;</span><br><span class="line"></span><br><span class="line">    location /first &#123;</span><br><span class="line">        try_files /system/maintenance.html</span><br><span class="line">            $uri $uri/index.html $uri.html</span><br><span class="line">            @lasturl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location @lasturl &#123;</span><br><span class="line">        return 200 'lasturl!\n';</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /second &#123;</span><br><span class="line">        try_files $uri/index.html $uri.html = 404;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用curl测试访问 /first 和 /second。结果如下与预期一致：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]# curl tryfiles.dookt.com.cn/first</span><br><span class="line">lasturl!</span><br><span class="line">[root@openresty01 ~]# curl tryfiles.dookt.com.cn/second</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor="white"&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;openresty/1.13.6.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="precoppntent阶段：实时拷贝流量的mirror模块"><a href="#precoppntent阶段：实时拷贝流量的mirror模块" class="headerlink" title="precoppntent阶段：实时拷贝流量的mirror模块"></a>precoppntent阶段：实时拷贝流量的mirror模块</h3><p>处理请求时，生成子请求访问其他服务，对子请求的返回值不作处理</p><table><thead><tr><th align="left">Syntax:</th><th>mirror uri | off;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>mirror off;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>mirror_request_body on | off;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>mirror_request_body on;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><h3 id="content阶段：root和alias指令"><a href="#content阶段：root和alias指令" class="headerlink" title="content阶段：root和alias指令"></a>content阶段：root和alias指令</h3><table><thead><tr><th align="left">Syntax:</th><th>root path</th></tr></thead><tbody><tr><td align="left">Default:</td><td>root html;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>alias path;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>location</code></td></tr></tbody></table><h4 id="alias和root功能及差别："><a href="#alias和root功能及差别：" class="headerlink" title="alias和root功能及差别："></a>alias和root功能及差别：</h4><ul><li>功能：两者都是将url映射为文件路径，以返回静态文件的内容</li><li>差别：<ul><li>root：会将完整的url映射进文件路径中</li><li>alias：只会将location后的URL映射到文件路径</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  8822;</span><br><span class="line">    server_name static.dookt.com.cn;</span><br><span class="line">    location /root &#123;</span><br><span class="line">        root html;</span><br><span class="line">    &#125;</span><br><span class="line">    location /alias &#123;</span><br><span class="line">        alias html;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ /root/(\w+\.txt) &#123;</span><br><span class="line">        root html/first/$1;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ /alias/(\w+\.txt) &#123;</span><br><span class="line">        alias html/first/$1;</span><br><span class="line">    &#125;</span><br><span class="line">    location /RealPath/ &#123;           #需要在html目录下做一个软链接，ln -sv first realpath</span><br><span class="line">        alias html/realpath/;</span><br><span class="line">        return 200 '$request_filename:$document_root:$realpath_root\n';</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过curl访问 /root, /root/1.txt, /alias/, /alias/1.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 访问/root</span></span><br><span class="line">[root@openresty01 ~]# curl alias_root.dookt.com.cn:8822/root</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor="white"&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;openresty/1.13.6.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 访问/root/1.txt</span></span><br><span class="line">[root@openresty01 ~]# curl alias_root.dookt.com.cn:8822/root/1.txt</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor="white"&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;openresty/1.13.6.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">curl alias_root.dookt.com.cn:8822/root/</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor="white"&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;openresty/1.13.6.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 访问/<span class="built_in">alias</span>/</span></span><br><span class="line">[root@openresty01 ~]# curl alias_root.dookt.com.cn:8822/alias/</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to OpenResty!&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to OpenResty!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 访问/<span class="built_in">alias</span>/1.txt</span></span><br><span class="line">[root@openresty01 ~]# curl alias_root.dookt.com.cn:8822/alias/1.txt</span><br><span class="line">test1</span><br></pre></td></tr></table></figure><h3 id="static模块提供的3个变量"><a href="#static模块提供的3个变量" class="headerlink" title="static模块提供的3个变量"></a>static模块提供的3个变量</h3><p>Q：当我们访问 /RealPath/1.txt时，这三个变量的值各为多少？</p><ul><li>request_filename：待访问文件的完整路径</li><li>document_root：由URI和root/alias规则生成的文件夹的路径</li><li>realpath_root：将document_root中的软连接换成真实路径</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用curl访问RealPath/1.txt，其实是访问html/first/1.txt</span></span><br><span class="line">[root@openresty01 ~]# curl static.dookt.com.cn:8822/RealPath/1.txt</span><br><span class="line">/usr/local/openresty/nginx/html/realpath/1.txt:/usr/local/openresty/nginx/html/realpath/:/usr/local/openresty/nginx/html/first</span><br></pre></td></tr></table></figure><h3 id="静态文件返回的content-type"><a href="#静态文件返回的content-type" class="headerlink" title="静态文件返回的content-type"></a>静态文件返回的content-type</h3><table><thead><tr><th align="left">Syntax:</th><th>types { … }</th></tr></thead><tbody><tr><td align="left">Default:</td><td>types { text/html  html; image/gif  gif; image/jpeg jpg; }</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>default_type mime-type;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>default_type text/plain;`</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>types_hash_bucket_size size;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>types_hash_bucket_size 64;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>types_hash_max_size size;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>types_hash_max_size 1024;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><h3 id="static模块url不以斜杆结尾却访问目录的做法"><a href="#static模块url不以斜杆结尾却访问目录的做法" class="headerlink" title="static模块url不以斜杆结尾却访问目录的做法"></a>static模块url不以斜杆结尾却访问目录的做法</h3><p>Q：访问目录时URL最后没有带 / ? static模块实现了root / alias 功能时，发现访问目标是目录，但是URL末尾加上 / 时，会返回301错误</p><h4 id="重定向跳转的域名"><a href="#重定向跳转的域名" class="headerlink" title="重定向跳转的域名"></a>重定向跳转的域名</h4><table><thead><tr><th align="left">Syntax:</th><th>server_name_in_redirect on | off;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>server_name_in_redirect off;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><p>| Syntax:  | <code>port_in_redirect on | off;</code> |<br>| :——- | —————————- |<br>| Default: | <code>port_in_redirect on;</code>       |<br>| Context: | <code>http</code>, <code>server</code>, <code>location</code> |</p><p>| Syntax:  | <code>absolute_redirect on | off;</code> |<br>| :——- | —————————– |<br>| Default: | <code>absolute_redirect on;</code>       |<br>| Context: | <code>http</code>, <code>server</code>, <code>location</code>  |</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置1，关闭主域名显示</span></span><br><span class="line">server &#123;</span><br><span class="line">    server_name return.dookt.com.cn dir.dookt.com.cn;</span><br><span class="line">    server_name_in_redirect on;     #显示重定向域名中的server_name还是host头部的主机名</span><br><span class="line">    listen 8081;</span><br><span class="line">    port_in_redirect on;       #打开访问时输入的重定向端口</span><br><span class="line">    absolute_redirect on;      #打开访问时输入的重定向域名</span><br><span class="line">    root html/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">配置2，关闭端口显示</span></span><br><span class="line">server &#123;</span><br><span class="line">        server_name return.dookt.com.cn dir.dookt.com.cn;</span><br><span class="line">        server_name_in_redirect off;</span><br><span class="line">        listen 8081;</span><br><span class="line">        port_in_redirect off;      #关闭访问时输入的重定向端口</span><br><span class="line">        absolute_redirect on;      #打开访问时输入的重定向域名</span><br><span class="line">        root html/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">配置3,开启显示重定向域名中的server_name为配置文件中的server_name</span></span><br><span class="line">server &#123;</span><br><span class="line">        server_name return.dookt.com.cn dir.dookt.com.cn;</span><br><span class="line">        server_name_in_redirect on;</span><br><span class="line">        listen 8081;</span><br><span class="line">        port_in_redirect off;</span><br><span class="line">        absolute_redirect on;</span><br><span class="line">        root html/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">配置4，关闭所有显示（域名+端口）</span></span><br><span class="line">server &#123;</span><br><span class="line">        server_name return.dookt.com.cn dir.dookt.com.cn;</span><br><span class="line">        server_name_in_redirect on;</span><br><span class="line">        listen 8081;</span><br><span class="line">        port_in_redirect on;</span><br><span class="line">        absolute_redirect off;        #关闭绝对重定向</span><br><span class="line">        root html/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置1，运行结果</span></span><br><span class="line">[root@openresty01 ~]# curl static.dookt.com.cn:8081/first -I</span><br><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">Server: openresty/1.13.6.2</span><br><span class="line">Date: Fri, 12 Jul 2019 09:48:25 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 191</span><br><span class="line">Location: http://static.dookt.com.cn:8081/first/        #此时访问header头部有域名和端口号</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置2,运行结果</span></span><br><span class="line">[root@openresty01 ~]# curl static.dookt.com.cn:8081/first -I</span><br><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">Server: openresty/1.13.6.2</span><br><span class="line">Date: Fri, 12 Jul 2019 09:51:33 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 191</span><br><span class="line">Location: http://static.dookt.com.cn/first/        #此时访问header头部只有域名，没有端口信息</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置3，运行结果</span></span><br><span class="line">[root@openresty01 ~]# curl static.dookt.com.cn:8081/first -I</span><br><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">Server: openresty/1.13.6.2</span><br><span class="line">Date: Fri, 12 Jul 2019 09:55:02 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 191</span><br><span class="line">Location: http://return.dookt.com.cn/first/     #此时访问header头部修改为配置文件中定义的server_name</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置4，运行结果</span></span><br><span class="line">[root@openresty01 ~]# curl static.dookt.com.cn:8081/first -I</span><br><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">Server: openresty/1.13.6.2</span><br><span class="line">Date: Fri, 12 Jul 2019 09:57:43 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 191</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Location: /first/                     #此时访问header头部只有/first/，没有域名模和端口</span><br></pre></td></tr></table></figure><h3 id="content阶段的：index和autoindex模块"><a href="#content阶段的：index和autoindex模块" class="headerlink" title="content阶段的：index和autoindex模块"></a>content阶段的：index和autoindex模块</h3><ul><li>index模块<ul><li>功能：指定 / 访问时返回index文件的内容</li><li>模块：ngx_http_index_module</li></ul></li></ul><table><thead><tr><th align="left">Syntax:</th><th>index file …;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>index index.html;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><ul><li>autoindex模块<ul><li>功能：当URL以 / 结尾时，尝试以html/xml/json/jsonp等格式返回root/alias中指定目录的目录结构</li><li>模块：ngx_http_autoindex_module，默认编译进nginx，使用–without-ngx_http_autoindex_module禁用该模块</li><li>autoindex指令</li></ul></li></ul><table><thead><tr><th align="left">Syntax:</th><th>autoindex on | off;</th></tr></thead><tbody><tr><td align="left">Default:</td><td><code>autoindex off;</code></td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>autoindex_exact_size on | off;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>autoindex_exact_size on;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>autoindex_format html | xml | json | jsonp;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>autoindex_format html;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>autoindex_localtime on | off;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>autoindex_localtime off;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置autoindex</span></span><br><span class="line">server &#123;</span><br><span class="line">        server_name  autoindex.dookt.com.cn;</span><br><span class="line">        listen 8999;</span><br><span class="line">        location / &#123;</span><br><span class="line">                alias html/;</span><br><span class="line">                autoindex on;</span><br><span class="line">                index a.html;</span><br><span class="line">                autoindex_exact_size off;</span><br><span class="line">                autoindex_format json;</span><br><span class="line">                autoindex_localtime on;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]# curl autoindex.dookt.com.cn:8999</span><br><span class="line">[</span><br><span class="line">&#123; "name":"first", "type":"directory", "mtime":"Thu, 11 Jul 2019 22:29:53 GMT" &#125;,</span><br><span class="line">&#123; "name":"realpath", "type":"directory", "mtime":"Thu, 11 Jul 2019 22:29:53 GMT" &#125;,</span><br><span class="line">&#123; "name":"second", "type":"directory", "mtime":"Thu, 11 Jul 2019 22:30:02 GMT" &#125;,</span><br><span class="line">&#123; "name":"third", "type":"directory", "mtime":"Thu, 11 Jul 2019 22:30:11 GMT" &#125;,</span><br><span class="line">&#123; "name":"403.html", "type":"file", "mtime":"Thu, 11 Jul 2019 21:58:47 GMT", "size":245 &#125;,</span><br><span class="line">&#123; "name":"50x.html", "type":"file", "mtime":"Thu, 04 Jul 2019 07:43:58 GMT", "size":541 &#125;,</span><br><span class="line">&#123; "name":"index.html", "type":"file", "mtime":"Thu, 04 Jul 2019 07:43:58 GMT", "size":649 &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="content阶段：concat模块"><a href="#content阶段：concat模块" class="headerlink" title="content阶段：concat模块"></a>content阶段：concat模块</h3><ul><li><p>功能：当需要访问多个小文件时，把他们的内容合并到一次http请求中返回，提升性能</p></li><li><p>模块：ngx_http_concat_module</p><ul><li>模块地址（<a href="https://github.com/alibaba/nginx-http-concat）" target="_blank" rel="noopener">https://github.com/alibaba/nginx-http-concat）</a>: –add-moudle=../nginx-http-concat/</li></ul></li><li><p>使用：在URI后加上 ?? ，后通过多个 , 号分隔文件。如果还有参数，则在最后通过 ? 添加参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://github.com/alibaba/nginx-http-concat/archive/master.zip</span><br><span class="line">tar -xvf master.zip</span><br><span class="line">mv nginx-http-concat-master/ nginx-http-concat</span><br><span class="line">./configure --add-module=../nginx-http-concat/ </span><br><span class="line">gmake &amp;&amp; gmake install</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th align="left">concat:</th><th><code>on</code>| off</th></tr></thead><tbody><tr><td align="left">Default:</td><td><code>concat off</code></td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">concat_type:</th><th>`MIME types</th></tr></thead><tbody><tr><td align="left">Default:</td><td><code>concat_types:text/css application/x-javascript</code></td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">concat_unique:</th><th><code>on</code>| off</th></tr></thead><tbody><tr><td align="left">Default:</td><td><code>conca_unique on</code></td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">concat_max_files:</th><th>`numberp</th></tr></thead><tbody><tr><td align="left">Default:</td><td><code>conca_max_files 10</code></td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">concat_delimiter:</th><th><code>string</code></th></tr></thead><tbody><tr><td align="left">Default:</td><td><code>NONE</code></td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">concat_ignore_file_error:</th><th><code>on</code>| off</th></tr></thead><tbody><tr><td align="left">Default:</td><td><code>off</code></td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8998;</span><br><span class="line">    server_name concat.dookt.com.cn;</span><br><span class="line">    error_log logs/concat_error.log debug;</span><br><span class="line">    concat on;# 开启concat</span><br><span class="line">    root html;        </span><br><span class="line"></span><br><span class="line">    location /concat &#123;</span><br><span class="line">        concat_max_files 20;    #对多合并多少个文件</span><br><span class="line">        concat_types text/plain;    #对文本文件进行合并</span><br><span class="line">        concat_unique on;     #对一种还是多种文件进行分隔</span><br><span class="line">        concat_delimiter ':::';    #设置文件内容分隔符</span><br><span class="line">        concat_ignore_file_error on;    #若文件不存在则返回其他文件的内容</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用curl命令访问，结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">结果输出1.txt和2.txt的内容，并以:::分隔文件内容</span></span><br><span class="line">[root@openresty01 ~]# curl concat.dookt.com.cn:8998/concat/??1.txt,2.txt</span><br><span class="line">This is 1.txt content</span><br><span class="line">:::This is 2.txt content</span><br></pre></td></tr></table></figure><h3 id="log阶段：access日志的用法"><a href="#log阶段：access日志的用法" class="headerlink" title="log阶段：access日志的用法"></a>log阶段：access日志的用法</h3><ul><li>功能：将HTTP请求信息记录到日志中</li><li>模块：nginx_http_log_module，不能禁用该模块</li></ul><h4 id="log-format指令"><a href="#log-format指令" class="headerlink" title="log_format指令"></a>log_format指令</h4><table><thead><tr><th align="left">Syntax:</th><th>log_format name [escape=default|json|none] string …;</th></tr></thead><tbody><tr><td align="left">Default:</td><td><code>log_format combined &quot;...&quot;;</code></td></tr><tr><td align="left">Context:</td><td><code>http</code></td></tr></tbody></table><h4 id="默认的日志格式"><a href="#默认的日志格式" class="headerlink" title="默认的日志格式"></a>默认的日志格式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log_format combined '$remote_addr - $remote_user [$time_local] '</span><br><span class="line">                    '"$request" $status $body_bytes_sent '</span><br><span class="line">                    '"$http_referer" "$http_user_agent"';</span><br></pre></td></tr></table></figure><h4 id="日志文件格式"><a href="#日志文件格式" class="headerlink" title="日志文件格式"></a>日志文件格式</h4><table><thead><tr><th align="left">Syntax:</th><th>access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];<code></code>access_log off;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>access_log logs/access.log combined;</td></tr><tr><td align="left">Context:</td><td>http, server, location, if in location, limit_except</td></tr></tbody></table><ul><li>path 路径可以包含变量：不打开cache是每记录一条日志都需要打开、关闭日志文件</li><li>if 通过变量值控制请求日志是否记录</li><li>日志缓存<ul><li>功能：批量将内存中的日志写入磁盘</li><li>写入磁盘的条件<ul><li>所有待写入磁盘的日志大小超出缓存大小</li><li>达到flush指定的过期时间</li><li>worker进程执行reopen命令，或者正在关闭</li></ul></li></ul></li><li>日志压缩<ul><li>功能：批量压缩内存中的日志，在写入磁盘</li><li>buffer大小默认为64KB</li><li>压缩级别默认为1（1最快压缩率最低，9压缩最慢压缩率最高）</li></ul></li></ul><h4 id="日志文件名包含变量的优化"><a href="#日志文件名包含变量的优化" class="headerlink" title="日志文件名包含变量的优化"></a>日志文件名包含变量的优化</h4><table><thead><tr><th align="left">Syntax:</th><th>open_log_file_cache max=N [inactive=time] [min_uses=N] [valid=time];<code></code>open_log_file_cache off;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>open_log_file_cache off;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><ul><li>max：缓存内的最大文件句柄数，超出后用LRU算法淘汰</li><li>inactive：文件访问完后这段时间内不会关闭。默认10秒</li><li>min_uses：在inactive时间内使用次数超过min_uses才会继续存在内存中，默认为1</li><li>valid：超出valid时间后，将对缓存的日志文件检查是否存在。默认60秒</li><li>off：关闭缓存功能</li></ul><h2 id="HTTP过滤模块的调用流程"><a href="#HTTP过滤模块的调用流程" class="headerlink" title="HTTP过滤模块的调用流程"></a>HTTP过滤模块的调用流程</h2><h3 id="HTTP过滤模块介绍"><a href="#HTTP过滤模块介绍" class="headerlink" title="HTTP过滤模块介绍"></a>HTTP过滤模块介绍</h3><p>log阶段之前，content阶段之后处理的</p><ul><li>copy_filter：复制包体的内容</li><li>postpone_filter：处理子请求</li><li>header_filter：构造响应头部</li><li>write_filter：发送响应</li></ul><h3 id="HTTP过滤模块：替换修改响应内容的sub模块"><a href="#HTTP过滤模块：替换修改响应内容的sub模块" class="headerlink" title="HTTP过滤模块：替换修改响应内容的sub模块"></a>HTTP过滤模块：替换修改响应内容的sub模块</h3><ul><li><p>功能：将响应中指定的字符串替换成新的字符串</p></li><li><p>模块：ngx_http_sub_module模块。默认为编译进nginx，使用 –with-http_sub_module启用该模块</p></li><li><p>指令：</p><p>需要把返回给用户中响应中的匹配上的字符串替换成新的字符串</p></li></ul><table><thead><tr><th align="left">Syntax:</th><th>sub_filter <em>string</em> replacement;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><p>​    是否需要把上次修改字符串的时间显示出来</p><table><thead><tr><th align="left">Syntax:</th><th>sub_filter_last_modified on | off;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>sub_filter_last_modified off;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><p>​    是否只修改一次（on），或者全部修改(off)</p><table><thead><tr><th align="left">Syntax:</th><th>sub_filter_once on | off;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>sub_filter_once on;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><p>​    只是针对什么样的响应才修改，可以设置为*，但是效率太低</p><table><thead><tr><th align="left">Syntax:</th><th>sub_filter_types mime-type …;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>sub_filter_types text/html;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">若不使用sub模块显示的是openresty的默认欢迎主页，此时修改若匹配到openresty.com、openresty.org就替换为主机域名（配置文件中定义的）/nginx，</span></span><br><span class="line">server &#123;</span><br><span class="line">    server_name sub.dookt.com.cn;</span><br><span class="line">    error_log logs/sub-error.log info;</span><br><span class="line">    location / &#123;</span><br><span class="line">        sub_filter 'openresty.org' '$host/openresty';</span><br><span class="line">        sub_filter 'openresty.com' '$host/openresty';</span><br><span class="line">        sub_filter_once off;</span><br><span class="line">        sub_filter_last_modified on;      #开启在header头部添加上Last-Modified的时间</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">未添加sub配置的效果</span></span><br><span class="line">[root@openresty01 ~]# curl sub.dookt.com.cn </span><br><span class="line">&lt;h1&gt;Welcome to OpenResty!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href="https://openresty.org/"&gt;openresty.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href="https://openresty.com/"&gt;openresty.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加sub配置的效果</span></span><br><span class="line">[root@openresty01 ~]# curl sub.dookt.com.cn </span><br><span class="line">&lt;h1&gt;Welcome to OpenResty!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href="https://sub.dookt.com.cn/openresty/"&gt;openresty.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href="https://sub.dookt.com.cn/openresty/"&gt;openresty.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##可以发现添加sub配置后openresty.org、openresty.com都替换为了sub.dookt.com.cn/openresty</span></span></span><br><span class="line"></span><br><span class="line">[root@openresty01 ~]# curl sub.dookt.com.cn -I</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: openresty/1.13.6.2</span><br><span class="line">Date: Fri, 12 Jul 2019 13:23:15 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Last-Modified: Thu, 04 Jul 2019 07:43:58 GMT         #添加上替换的时间</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: W/"5d1dae3e-289"</span><br></pre></td></tr></table></figure><h3 id="HTTP过滤模块：在响应前后添加内容的addition模块"><a href="#HTTP过滤模块：在响应前后添加内容的addition模块" class="headerlink" title="HTTP过滤模块：在响应前后添加内容的addition模块"></a>HTTP过滤模块：在响应前后添加内容的addition模块</h3><ul><li><p>功能：在响应前或后正价内容，而增加内容的方式是通过新增子请求的响应完成</p></li><li><p>模块：ngx_http_addition_module，默认为编译进nginx，使用–with-http_addtion_module启用该模块</p></li><li><p>指令：</p><p>在响应前添加内容，根据uri响应的内容，返回在子请求之前</p></li></ul><table><thead><tr><th align="left">Syntax:</th><th>add_before_body uri;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><p>​    在响应后添加内容，根据uri响应的内容，返回在子请求之后</p><table><thead><tr><th align="left">Syntax:</th><th>add_after_body uri;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><p>​    允许添加的响应类型，可以使用*，但是效率太低</p><table><thead><tr><th align="left">Syntax:</th><th>addition_types mime-type …;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>addition_types text/html;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name addition.dookt.com.cn;</span><br><span class="line">    error_log logs/addition-error.log info;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        add_before_body /before_action;        #配置add_before_body</span><br><span class="line">        add_after_body /after_action;          #配置add_after_body</span><br><span class="line">        addition_types *;</span><br><span class="line">    &#125;</span><br><span class="line">    location /before_action &#123;               </span><br><span class="line">        return 200 'new content before!\n';      #访问/before_action，则返回"new content before!\n"</span><br><span class="line">    &#125;</span><br><span class="line">    location /after_action &#123;</span><br><span class="line">        return 200 'new content after!\n';       #访问/after_action，则返回"new content after!\n"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用curl测试结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">若没有配置addition（即注释add_before_body、add_after_body两个配置），结果如下：</span></span><br><span class="line">[root@openresty01 ~]# curl addition.dookt.com.cn/a.txt</span><br><span class="line">This is a.txt content!            #内容为html/a.txt文件的内容</span><br><span class="line"><span class="meta">#</span><span class="bash">添加addition配置后结果如下</span></span><br><span class="line">[root@openresty01 ~]# curl addition.dookt.com.cn/a.txt</span><br><span class="line">new content before!</span><br><span class="line">This is a.txt content!</span><br><span class="line">new content after!</span><br></pre></td></tr></table></figure><h2 id="Nginx变量"><a href="#Nginx变量" class="headerlink" title="Nginx变量"></a>Nginx变量</h2><h3 id="Nginx变量的运行原理"><a href="#Nginx变量的运行原理" class="headerlink" title="Nginx变量的运行原理"></a>Nginx变量的运行原理</h3><ul><li><p>变量</p><ul><li>提供变量的模块（preconfiguration中定义新变量）—定义规则<ul><li>变量名</li><li>解析出变量的方法</li></ul></li><li>使用变量的模块<ul><li>解析nginx.conf是定义的变量使用方式</li><li>处理请求</li></ul></li></ul><p>性求值：变量值可以时刻变化，其值为使用的那一刻的值</p></li></ul><h3 id="存放变量的哈希表"><a href="#存放变量的哈希表" class="headerlink" title="存放变量的哈希表"></a>存放变量的哈希表</h3><table><thead><tr><th align="left">Syntax:</th><th>variables_hash_bucket_size <em>size</em>;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>variables_hash_bucket_size 64;</td></tr><tr><td align="left">Context:</td><td><code>http</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>variables_hash_max_size <em>size</em>;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>variables_hash_max_size 1024;</td></tr><tr><td align="left">Context:</td><td><code>http</code></td></tr></tbody></table><h3 id="HTTP框架提供的变量"><a href="#HTTP框架提供的变量" class="headerlink" title="HTTP框架提供的变量"></a>HTTP框架提供的变量</h3><ul><li>HTTP请求相关的变量<ul><li>arg_参数名：URL中某个具体参数的值</li><li>query_string：与args变量完全相同</li><li>args：全部URL参数</li><li>is_args：如果请求URL中有参数则返回？否则返回空</li><li>content_length：HTTP请求标识包体长度的centent-length头部的值</li><li>content_type：表示请求包体的content_type头部的值</li><li>uri：请求的URI（不同于URL，不包括后面的参数）</li><li>document_uri：与 uri 完全相同</li><li>request_uri：请求的URL（包括URI以及完整的参数）</li><li>scheme：协议名，例如HTTP或者HTTPS</li><li>request_mothod：请求方法，例如GET或者POST</li><li>request_length：请求内容的大小，包括请求行、头部、包体等</li><li>remote_user：由HTTP Basic Authentication协议传入的用户名</li><li>remote_body_file：临时存放请求包体的文件<ul><li>如果包体非常小则不会存文件</li><li>client_body_in_file_only强制所有包体存入文件，且可决定是否删除</li></ul></li><li>request_body：请求的包体，这个变量当且仅当使用反向代理，且设定用内存暂存包体时才有效</li><li>request：用户原始的url请求，含有方法与协议版本，例如GET/?a=1&amp;b=22 HTTP/1.1</li><li>host：先从请求行中获取，若含有Host头部，则用其值替换掉请求行中的主机名，若前二者都没有，则使用匹配上的server_name</li><li>http_头部名字：<ul><li>通用：返回一个具体请求的头部的值（从用户请求的header中取）：</li><li>特殊（特殊处理）：<ul><li>http_host</li><li>http_user_agent</li><li>http_referer</li><li>http_via</li><li>http_x_forwarded_for</li><li>http_cookie</li></ul></li></ul></li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">变量值</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8098;</span><br><span class="line">    server_name var.dookt.com.cn;</span><br><span class="line">    error_log logs/var-error.log info;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        set $limit 10k;</span><br><span class="line">        return 200 '</span><br><span class="line">arg_a: $arg_a, arg_b: $arg_b, args: $args</span><br><span class="line">connection: $connection, connection_requests: $connection_requests</span><br><span class="line">cookie_a: $cookie_a</span><br><span class="line">uri: $uri, document_uri: $document_uri, request_uri: $request_uri</span><br><span class="line">request: $request</span><br><span class="line">request_id: $request_id</span><br><span class="line">server: $server_addr, $server_name, $server_port, $server_protocol</span><br><span class="line">tcpinfo:$tcpinfo_rtt, $tcpinfo_rttvar, $tcpinfo_snd_cwnd, $tcpinfo_rcv_space</span><br><span class="line">limit_rate: $limit_rate</span><br><span class="line">hostname: $hostname</span><br><span class="line">content_length: $content_length</span><br><span class="line">status: $status</span><br><span class="line">body_bytes_sent: $body_bytes_sent, bytes_sent: $bytes_sent</span><br><span class="line">time: $request_time. $msec, $time_iso8601, $time_local</span><br><span class="line">';</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]# curl -H 'Content-Length: 0' -H 'Cookie: a=c1' 'var.dookt.com.cn:8098?a=1&amp;b=23'</span><br><span class="line"></span><br><span class="line">arg_a: 1, arg_b: 23, args: a=1&amp;b=23</span><br><span class="line">connection: 27, connection_requests: 1</span><br><span class="line">cookie_a: c1</span><br><span class="line">uri: /, document_uri: /, request_uri: /?a=1&amp;b=23</span><br><span class="line">request: GET /?a=1&amp;b=23 HTTP/1.1</span><br><span class="line">request_id: a3e628a8f23f54c90c1a1481e1814600</span><br><span class="line">server: 172.16.100.11, var.dookt.com.cn, 8098, HTTP/1.1</span><br><span class="line">tcpinfo:0, 0, 10, 43690</span><br><span class="line">limit_rate: 0</span><br><span class="line">hostname: openresty01</span><br><span class="line">content_length: 0</span><br><span class="line">status: 200</span><br><span class="line">body_bytes_sent: 0, bytes_sent: 0</span><br><span class="line">time: 0.000. 1562944594.627, 2019-07-12T23:16:34+08:00, 12/Jul/2019:23:16:34 +0800</span><br></pre></td></tr></table></figure><ul><li>TCP连接相关的变量<ul><li>binary_remote_addr：客户端地址的整形格式，对于IPV4是4字节，IPv6是16字节</li><li>connection：递增的连接序号</li><li>connection_reqeuests：当前连接上执行过的请求数，对keepalived连接有意义</li><li>remote_addr：客户端地址</li><li>remote_port：客户端端口</li><li>proxy_protocol_addr：若使用了proxy_protocol协议则返回协议中的地址，否则返回为空</li><li>proxy_protocol_port：若使用了proxy_protocol协议则返回协议中的端口，否则返回为空</li><li>server_addr：服务器的地址</li><li>server_port：服务器的端口</li><li>TCP_INFO：tcp内核蹭参数，包括$tcpinfo_rtt, $tcpinfo_rttvar, $tcpinfo_snd_cend, $tcpinfo_rcv_space</li><li>server_protocol：服务器协议，例如HTTP/1.1</li></ul></li><li>Nginx处理请求过程中产生的变量<ul><li>request_time：请求处理到现在的耗时，单位是s，精确到ms</li><li>server_name：匹配请求上的server_name值</li><li>https：如果开启了TLS/SSL，则返回no，否则返回空</li><li>request_completion：若请求处理完则返回OK，否则返回空</li><li>request_id：以16进制输出的请求标识id，该id共含有16个字节，是随机的</li><li>request_filename：待访问文件的完整路径</li><li>document_root：由URI和root/alias规则生成的文件夹路径</li><li>realpath_root：将document_root中的软连接换成真实的路径</li><li>limit_rate：返回客户端响应时的速度上限，单位为每秒字节数。可以通过set指令修改</li></ul></li><li>发送HTTP响应时相关的变量<ul><li>body_bytes_sent：响应中body包体的长度</li><li>byte_sent：全部http响应的长度</li><li>status：http响应中的返回码</li><li>sent_trailer_名字：把响应结尾内容里的值返回</li><li>sent_http_头部名字：响应中某个具体头部的值<ul><li>通用：返回什么头部就取什么头部的值</li><li>特殊：需要特殊处理<ul><li>sent_http_content_type</li><li>sent_http_content_length</li><li>sent_http_loction</li><li>sent_http_last_modified</li><li>sent_http_connection</li><li>sent_http_keep_alive</li><li>sent_http_transfer_encoding</li><li>sent_http_cache-control</li><li>sent_http_link</li></ul></li></ul></li></ul></li><li>Nginx系统变量<ul><li>time_local：以本地标准输出的当前时间， 例如：12/Jul/2019:23:44:50 +0800</li><li>time_iso8601：使用ISO8601标准输出的时间 ，例如：2019-07-12T23:44:50+08:00</li><li>nginx_version：Nginx版本号</li><li>pid：所属的worker进程id</li><li>pipe：使用了管道则返回p，否则返回 .</li><li>hostname：所在服务器的主机名，与hostname命令输出一致</li><li>msec：1760年1月1日到现在的时间，单位为秒，小数点后精确到毫秒， 例如：1562946290.424s</li></ul></li></ul><h3 id="referer模块"><a href="#referer模块" class="headerlink" title="referer模块"></a>referer模块</h3><ul><li>场景：当某个网站通过url引用你的页面，当用户在浏览器上点击url时，http请求的头部会通过referer头部。将该网站当前页面的url带上，告诉服务器本次请求是由这个页面发起的</li><li>目的：拒绝非正常的网站访问我们的站点资源</li><li>思路：通过referer模块，用invaild_referer变量根据判断referer头部是否合法</li><li>refer模块：默认编译进nginx，使用–without-http_referer_module禁用该模块</li><li>指令：</li></ul><table><thead><tr><th align="left">Syntax:</th><th>valid_referers none | blocked | server_names | string …;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>referer_hash_bucket_size <em>size</em>;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>referer_hash_bucket_size 64;</td></tr><tr><td align="left">Context:</td><td><code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>referer_hash_max_size <em>size</em>;</th></tr></thead><tbody><tr><td align="left">Default:</td><td><code>referer_hash_max_size 2048;</code></td></tr><tr><td align="left">Context:</td><td><code>server</code>, <code>location</code></td></tr></tbody></table><h4 id="valid-referers指令"><a href="#valid-referers指令" class="headerlink" title="valid_referers指令"></a>valid_referers指令</h4><ul><li>参数值：<ul><li>none：允许缺失referer头部的请求访问</li><li>block：允许referer头部没有对应的值的请求访问</li><li>server_names：若referer中站点域名与server_name中本机域名某个匹配，则允许该请求访问</li></ul></li><li>表示域名及URL的字符串，对应域名可在前缀或者后缀中含有*通配符<ul><li>若referer头部的值匹配字符串后，则允许访问</li></ul></li><li>正则表达式<ul><li>若referer头部的值匹配正则表达式后，则允许访问</li></ul></li><li>invalid_referers变量<ul><li>允许访问时变量值为空</li><li>不允许访问时的变量值为1</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name referer.dookt.com.cn;</span><br><span class="line">    error_log logs/referer-error.log debug;</span><br><span class="line">    root html;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        valid_referers none blocked server_names</span><br><span class="line">            *.dookt.com.cn www.dookt.org/nginx/</span><br><span class="line">            ~\.google\.;</span><br><span class="line"></span><br><span class="line">        if ($invalid_referer) &#123;</span><br><span class="line">            return 403;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return 200 'valid!\n';</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]# curl -H 'referer: http://www.dookt.org/' referer.dookt.com.cn/</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor="white"&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;openresty/1.13.6.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@openresty01 ~]# curl -H 'referer: http://www.dookt.org/nginx' referer.dookt.com.cn/</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor="white"&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;openresty/1.13.6.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@openresty01 ~]# curl -H 'referer: http://www.dookt.org/nginx/' referer.dookt.com.cn/</span><br><span class="line">valid!</span><br><span class="line">[root@openresty01 ~]# curl -H 'referer: ' referer.dookt.com.cn/ </span><br><span class="line">valid!</span><br><span class="line">[root@openresty01 ~]# curl referer.dookt.com.cn/</span><br><span class="line">valid!</span><br><span class="line">[root@openresty01 ~]# curl -H 'referer: http://referer.dookt.com.cn' referer.dookt.com.cn/</span><br><span class="line">valid!</span><br><span class="line">[root@openresty01 ~]# curl -H 'referer: http://images.baidu.com/search/detail' referer.dookt.com.cn/</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor="white"&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;openresty/1.13.6.2&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">[root@openresty01 ~]# curl -H 'referer: http://images.google.com/search/detail' referer.dookt.com.cn/</span><br><span class="line">valid!</span><br></pre></td></tr></table></figure><h3 id="防盗链secure-link模块"><a href="#防盗链secure-link模块" class="headerlink" title="防盗链secure_link模块"></a>防盗链secure_link模块</h3><ul><li>功能：通过验证URL中的哈希值的方式防盗链</li><li>过程：<ul><li>由某服务器（可以是nginx）生成加密后的安全链接url，返回给客户端</li><li>客户端使用安全url访问nginx，由nginx的secure_link变量判断是否验证通过</li></ul></li><li>变量：<ul><li>sercure_link</li><li>secure_link_expires</li></ul></li><li>模块：默认没有编译进nginx，需要通过–with-http_secure_link_module添加该模块</li><li>原理：<ul><li>哈希算法是不可逆的</li><li>客户端只能拿到执行过哈希算法的URL</li><li>仅生成URL的服务器和验证URL是否安全的nginx，才保存执行哈希前的原始字符串</li><li>原始字符串通常由以下部分有序组成：<ul><li>资源位置：例如HTTP中指定资源的URI，防止拿到一个安全的URL后可以访问任意资源</li><li>用户信息：例如用户的IP地址，限制其他用户盗用URL</li><li>时间戳：使安全URL及时过期</li><li>密钥：仅服务器端拥有，增加攻击者猜测出原始字符串的难度</li></ul></li></ul></li></ul><table><thead><tr><th align="left">Syntax:</th><th>secure_link expression;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>secure_link_md5 <em>expression</em>;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>secure_link_secret <em>word</em>;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>location</code></td></tr></tbody></table><ul><li>变量<ul><li>secure_link<ul><li>值为空：验证不通过</li><li>值为0：URL过期</li><li>值为1：验证通过</li></ul></li><li>secure_link_rxpires<ul><li>时间戳的值</li></ul></li></ul></li></ul><h4 id="变量值带过期时间的配置实例"><a href="#变量值带过期时间的配置实例" class="headerlink" title="变量值带过期时间的配置实例"></a>变量值带过期时间的配置实例</h4><h5 id="命令行生成安全链接"><a href="#命令行生成安全链接" class="headerlink" title="命令行生成安全链接"></a>命令行生成安全链接</h5><ul><li>原请求：<ul><li>/test1.txt?md6=md5生成值&amp;expires=时间戳（如2147483647）</li></ul></li><li>生成md5<ul><li>echo -n ‘时间戳URL客户端IP密钥’|openssl md5 -binary | openssl base64 | tr +/ - |tr -d = </li></ul></li></ul><h5 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">secure_link $arg_md5,arg_expires;</span><br><span class="line">secure_link_mk5 "$secure_link_expires$uri$remote_addr secret";</span><br></pre></td></tr></table></figure> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置文件</span></span><br><span class="line">server &#123;</span><br><span class="line">    server_name securelink.dookt.com.cn;</span><br><span class="line">    error_log logs/secure-error.log info;</span><br><span class="line">    default_type text/plain;</span><br><span class="line">    location / &#123;</span><br><span class="line">        secure_link $arg_md5,$arg_expires;</span><br><span class="line">        secure_link_md5 "$secure_link_expires$uri$remote_addr secret";</span><br><span class="line">        if ($secure_link = "") &#123;</span><br><span class="line">            return 403;</span><br><span class="line">        &#125;</span><br><span class="line">        if ($secure_link = "0" ) &#123;</span><br><span class="line">            return 410;</span><br><span class="line">        &#125;</span><br><span class="line">        return 200 '$secure_link:$secure_link_expires\n';</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">测试，结果如下 </span></span><br><span class="line">[root@openresty01 ~]# echo -n '2147483647/test1.txt172.16.100.11 secret'|openssl md5 -binary | openssl base64 | tr +/ - |tr -d =                #生成md5</span><br><span class="line">OpVufjJNnc5LIAT-jJZH7A</span><br><span class="line">[root@openresty01 ~]# curl 'securelink.dookt.com.cn/test1.txt?md5=OpVufjJNnc5LIAT-jJZH7A&amp;expires=2147483647' </span><br><span class="line">1:2147483647</span><br></pre></td></tr></table></figure><h4 id="仅对URI进行哈希的简单办法"><a href="#仅对URI进行哈希的简单办法" class="headerlink" title="仅对URI进行哈希的简单办法"></a>仅对URI进行哈希的简单办法</h4><ul><li>原理：<ul><li>将请求的URI分为三个部分：/prefix/hash/link</li><li>hash生成方式<ul><li>对”link密钥”做md5哈希求值</li></ul></li><li>用secure_link_secret secret; 配置密钥</li></ul></li></ul><h5 id="命令行生成安全链接-1"><a href="#命令行生成安全链接-1" class="headerlink" title="命令行生成安全链接"></a>命令行生成安全链接</h5><ul><li>原请求：<ul><li>link</li></ul></li><li>生成的安全请求<ul><li>/prefix/md5/link</li></ul></li><li>生成md5<ul><li>echo -n ‘linksecret’ | openssl md5 -hex</li></ul></li></ul><h5 id="Nginx配置-1"><a href="#Nginx配置-1" class="headerlink" title="Nginx配置"></a>Nginx配置</h5><ul><li>secure_link_secret secret;</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]#  echo -n 'test1.txtmysecret2' | openssl md5 -hex          </span><br><span class="line">(stdin)= c3f9b32bf901b04c052ea9511e29a918</span><br><span class="line">[root@openresty01 extra]# curl 'securelink.dookt.com.cn/p/c3f9b32bf901b04c052ea9511e29a918/test1.txt'</span><br><span class="line">This is test1.txt content!</span><br></pre></td></tr></table></figure><h3 id="为复杂业务生成新的变量：map模块"><a href="#为复杂业务生成新的变量：map模块" class="headerlink" title="为复杂业务生成新的变量：map模块"></a>为复杂业务生成新的变量：map模块</h3><ul><li>功能：基于已有变量，使用类似switch {case:… default: …}的语法创建新变量，为其他基于变量值实功能的模块提供更能多可能性</li><li>模块：默认编译进nginx，通过–without-http_map_module禁用该模块</li></ul><h4 id="map模块的指令"><a href="#map模块的指令" class="headerlink" title="map模块的指令"></a>map模块的指令</h4><table><thead><tr><th align="left">Syntax:</th><th>map string $variable { … }</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>map_hash_bucket_size <em>size</em>;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>map_hash_bucket_size 32|64|128;</td></tr><tr><td align="left">Context:</td><td><code>http</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>map_hash_max_size size;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>map_hash_max_size 2048;</td></tr><tr><td align="left">Context:</td><td><code>http</code></td></tr></tbody></table><h4 id="map模块：通过映射新变量提供更多可能性"><a href="#map模块：通过映射新变量提供更多可能性" class="headerlink" title="map模块：通过映射新变量提供更多可能性"></a>map模块：通过映射新变量提供更多可能性</h4><ul><li><p>已有变量</p><ul><li>字符串</li><li>一个或者多个变量</li><li>字符与字符串的组合已有变量：</li></ul></li><li><p>case规则</p><ul><li>字符串严格匹配</li><li>使用hostname指令，可以对域名使用前缀 * 泛域名匹配</li><li>使用hostname指令，可以对域名使用后缀 * 泛域名匹配</li><li>~ 和 ~* 正则表达式匹配，后者忽略大小写</li></ul></li><li><p>default规则</p><ul><li>没有匹配到任何规则时，使用default</li><li>缺失default时，返回空字符串给新变量</li></ul></li><li><p>其他</p><ul><li>使用include语法提升可读性</li><li>使用volatile禁止变量值缓存</li></ul></li></ul><h4 id="Q-amp-A-环节演示实例"><a href="#Q-amp-A-环节演示实例" class="headerlink" title="Q &amp; A 环节演示实例"></a>Q &amp; A 环节演示实例</h4><p>Q：对以下配置，当以下请求发生时，name变量值是？</p><ul><li>‘Host: map.dookt.com.cn’</li><li>‘Host: map.dook123.com.cn’</li><li>‘Host: map.dookt.com.cn’</li><li>‘Host: map.dookt.org’</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">注意ma指令生效范围http</span></span><br><span class="line">map $http_host $name &#123;</span><br><span class="line">        hostnames;</span><br><span class="line"></span><br><span class="line">        default 0;</span><br><span class="line">        ~map\.doo\w+\.com.cn 1;</span><br><span class="line">        *.dookt.com.cn 2;</span><br><span class="line">        map.dookt.com.cn 3;</span><br><span class="line">        map.dookt.* 4;</span><br><span class="line">    &#125;</span><br><span class="line">    map $http_user_agent $mobile &#123;</span><br><span class="line">        default 0;</span><br><span class="line">        "Opera Mini" 1;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 10001;</span><br><span class="line">        default_type text/plain;</span><br><span class="line">        location / &#123;</span><br><span class="line">            return 200 '$name:$mobile\n';</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]# curl -H 'Host: www.dookt.com.com' 127.0.0.1:10001</span><br><span class="line">0:0</span><br><span class="line">[root@openresty01 ~]# curl -H 'Host: www.dookt.com.cn' 127.0.0.1:10001   </span><br><span class="line">2:0</span><br><span class="line">[root@openresty01 ~]# curl -H 'Host: map.dookt.com.cn' 127.0.0.1:10001    </span><br><span class="line">3:0</span><br><span class="line">[root@openresty01 ~]# curl -H 'Host: map.dook123.com.cn' 127.0.0.1:10001 </span><br><span class="line">1:0</span><br><span class="line">[root@openresty01 ~]# curl -H 'Host: map.dookt.com' 127.0.0.1:10001     </span><br><span class="line">4:0</span><br></pre></td></tr></table></figure><h3 id="通过变量指定少量用户实现AB测试：split-client"><a href="#通过变量指定少量用户实现AB测试：split-client" class="headerlink" title="通过变量指定少量用户实现AB测试：split_client"></a>通过变量指定少量用户实现AB测试：split_client</h3><ul><li><p>功能：主要用于实现AB测试，产品不太确定的推出的功能用户是否接受，所以推出多个版本的功能，某个百分比的的用户去尝试某版本的功能，来看反馈，决定使用哪个版本</p></li><li><p>模块：ngx_http_split_clients_module，默认编译进nginx，通过–without-http_split_clients_module禁用该模块</p></li><li><p>规则：</p><ul><li>已有变量<ul><li>字符串</li><li>一个或多个变量</li><li>变量与字符串组合</li></ul></li><li>case规则<ul><li>xx.xx%，支持小数点后2位，所有项的百分比相加不超过100%</li><li>*，由它匹配剩余的百分比（100%减去以上项相加的百分比）</li></ul></li></ul></li><li><p>基于已有变量创建新变量，为其他AB变量测试提供更能多可能性</p><ul><li>对已有变量的值执行MurmurHash2算法得到32位整形哈希数字，记为hash</li><li>32位无符号整形的最大数字2^32 -1，记为max</li><li>哈希数字与最大数字相除hash/max，可以得到百分比percent</li><li>配指令中指示了各项百分比构成的范围，如0-1%，1-5%等，及范围对应的值就当percent落在那个范围里，新变量的值就对应其后的参数</li></ul></li></ul><h4 id="split-client模块的指令"><a href="#split-client模块的指令" class="headerlink" title="split_client模块的指令"></a>split_client模块的指令</h4><table><thead><tr><th align="left">Syntax:</th><th>split_clients <em>string</em> $variable { … }</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code></td></tr></tbody></table><p>Q：以下配置是否有问题？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">split_clients "$&#123;http_testcli&#125;AAA" $variant &#123;</span><br><span class="line">               0.51%               .one;</span><br><span class="line">               20.0%               .two;</span><br><span class="line">               50.5%               .three;</span><br><span class="line">               40.0%               .four;</span><br><span class="line">               *                  "";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A：该配置是有问题的，百分比总和超过100%</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">split_clients "$&#123;http_testcli&#125;" $variant &#123;  #从头部取值，如果用户头部传了testcli，就取http_testcli的值</span><br><span class="line">        0.51%   .one;</span><br><span class="line">        20.0%   .two;</span><br><span class="line">        50.5%   .three;</span><br><span class="line">        #40%        .four;</span><br><span class="line">        *       "";</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        server_name split_client.dookt.com.cn;</span><br><span class="line">        error_log log/split_client-error.log debug;</span><br><span class="line">        default_type text/plain;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            return 200 'ABtestfile$variant\n';</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">此处使用curl -H传入testcli到header中，通过修改不同的哈希值，来实现测试</span></span><br><span class="line">[root@openresty01 ~]# curl -H 'testcli:4895768sdfasdgaga907567*&amp;*&amp;*&amp;48546456734579' split_clients.dookt.com.cn:10002/</span><br><span class="line">ABtestfile.three</span><br><span class="line">[root@openresty01 ~]# curl -H 'testcli:4895768sdfasdgagasdf9sdfsdsf' split_clients.dookt.com.cn:10002/               </span><br><span class="line">ABtestfile.two</span><br></pre></td></tr></table></figure><h3 id="根据IP地址范围的匹配生成新的变量：geo模块"><a href="#根据IP地址范围的匹配生成新的变量：geo模块" class="headerlink" title="根据IP地址范围的匹配生成新的变量：geo模块"></a>根据IP地址范围的匹配生成新的变量：geo模块</h3><table><thead><tr><th align="left">Syntax:</th><th>geo [<em>$address</em>] $variable { … }</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code></td></tr></tbody></table><ul><li><p>功能：根据IP地址创建新的变量</p></li><li><p>模块：ngx_http_geo_module，默认编译进nginx，使用–without-http_geo_module禁用该模块</p></li><li><p>规则：</p><ul><li>如果geo指令后不输入$address，那么默认使用$remote_addr变量地址作为IP地址</li><li>{} 内指令匹配：优先最长匹配<ul><li>通过IP地址及子网掩码的方式，定义IP范围，当IP地址在范围内时新变量使用其后的参数值</li><li>default指定了当以上范围都未匹配上时。新变量的默认值。</li><li>通过proxy指令指定可信地址（realip模块），此时remote_addr为X-Forwarded-For头部值中最后一个IP地址</li><li>proxy_recursive允许循环地址搜索</li><li>include，优化可读性</li><li>delete删除指定网络</li></ul></li></ul></li></ul><h4 id="Q-amp-A-环节及实例"><a href="#Q-amp-A-环节及实例" class="headerlink" title="Q &amp; A 环节及实例"></a>Q &amp; A 环节及实例</h4><p>Q：以下命令执行时，变量country的值各为多少（proxy为客户端地址）？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -H 'X-Forwarded-For: 10.1.0.0, 127.0.0.2' geo.dookt.com.cn</span><br><span class="line">curl -H 'X-Forwarded-For: 10.1.0.0, 127.0.0.1' geo.dookt.com.cn</span><br><span class="line">curl -H 'X-Forwarded-For: 10.1.0.0, 127.0.0.2,,1.2.3.4' geo.dookt.com.cn</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置文件</span></span><br><span class="line">geo $country &#123;</span><br><span class="line">        default ZZ;</span><br><span class="line">        proxy 172.16.100.11;          #定义了$address,不使用$remote_addr变量地址作为IP地址</span><br><span class="line">        127.0.0.0/24 US;</span><br><span class="line">        127.0.0.1/32 RU;</span><br><span class="line">        10.1.0.0/16 RU;</span><br><span class="line">        172.16.1.0/24 UK;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 10003;</span><br><span class="line">        server_name geo.dookt.com.cn;</span><br><span class="line">        location / &#123;</span><br><span class="line">                return 200 '$country\n';</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]# curl -H 'X-Forwarded-For: 10.1.0.0,127.0.0.1,172.16.1.123' geo.dookt.com.cn:10003</span><br><span class="line">UK</span><br><span class="line">[root@openresty01 ~]# curl -H 'X-Forwarded-For: 10.1.0.0' geo.dookt.com.cn:10003       </span><br><span class="line">RU</span><br><span class="line">[root@openresty01 ~]# curl -H 'X-Forwarded-For: 10.1.0.0,127.0.0.1' geo.dookt.com.cn:10003</span><br><span class="line">RU</span><br><span class="line">[root@openresty01 ~]# curl -H 'X-Forwarded-For: 10.1.0.0,127.0.0.1,1.2.3.4' geo.dookt.com.cn:10003</span><br><span class="line">ZZ</span><br></pre></td></tr></table></figure><h3 id="使用变量获取用户的地理位置：geoip模块"><a href="#使用变量获取用户的地理位置：geoip模块" class="headerlink" title="使用变量获取用户的地理位置：geoip模块"></a>使用变量获取用户的地理位置：geoip模块</h3><p>基于MaxMind数据库从客户端地址获取变量</p><ul><li>功能：根据IP地址创建新变量</li><li>模块：ngx_http_geoip_module，默认未编译进nginx，通过–with-http_geoip_module禁用该模块</li><li>流程：<ul><li>安装Maxmind里的geoip的C开发库（<a href="https://dev.maxmind.com/geoip/legacy/downloadable/）" target="_blank" rel="noopener">https://dev.maxmind.com/geoip/legacy/downloadable/）</a></li><li>编译时nginx要带上–with-http_geoip_module参数</li><li>下载geoip_country或者geoip_city指令配置好nginx.conf</li><li>运行（升级Nginx）</li></ul></li></ul><h4 id="geoip-country指令提供的变量"><a href="#geoip-country指令提供的变量" class="headerlink" title="geoip_country指令提供的变量"></a>geoip_country指令提供的变量</h4><ul><li>变量<ul><li>$geoip_country_code：两个字母的国家代码，如CN或US</li><li>$geoip_country_code3：三个字母的国家代码。如CHN或USA</li><li>$geoip_country_name：国家名称，如’China’，’United Stated’</li></ul></li></ul><table><thead><tr><th align="left">Syntax:</th><th>geoip_country file;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>geoip_proxy address | <em>CIDR</em>;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code></td></tr></tbody></table><h4 id="geoip-city指令提供的变量"><a href="#geoip-city指令提供的变量" class="headerlink" title="geoip_city指令提供的变量"></a>geoip_city指令提供的变量</h4><ul><li>变量<ul><li>$geoip_latitude：纬度</li><li>$geoip_longitide：经度</li><li>$geoip_city_continent_code：属于全球哪个州，如EU或AS</li><li>与geoip_country指令生成的变量重叠<ul><li>$geoip_city_country_code：两个字的国家代码，如CN或US</li><li>$geoip_city_country_code2：三个字的国家代码，如CHN或USA</li><li>$geoip_city_country_name：两个字的国家代码，如 China或 United States</li></ul></li><li>$geoip_region：洲或省的编码。如02</li><li>$geoip_region_name：洲或省名称，如Zhejiang或Saint Pertersburg</li><li>$geoip_city：城市名</li><li>$geoip_postal_code：邮编号</li></ul></li></ul><table><thead><tr><th align="left">Syntax:</th><th>geoip_city file;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code></td></tr></tbody></table><h3 id="Nginx对客户端使用keepalived特性提升连接效率"><a href="#Nginx对客户端使用keepalived特性提升连接效率" class="headerlink" title="Nginx对客户端使用keepalived特性提升连接效率"></a>Nginx对客户端使用keepalived特性提升连接效率</h3><ul><li>功能：多个HTTP请求通过复用TPC连接实现一下功能：<ul><li>减少握手次数</li><li>减少通过并发连接数减少了服务器资源的消耗</li><li>降低TCP拥塞控制的影响</li></ul></li><li>协议：<ul><li>connection头部：取值为close或者keepalive，前者表示请求处理完即关闭连接，后者表示复用连接处理的下一条请求</li><li>Keep-Alive头部：其值为timeout=n，后面的数字n单位是秒，告诉客户端连接至少保留n秒</li></ul></li></ul><h4 id="keepalive行为控制的指令"><a href="#keepalive行为控制的指令" class="headerlink" title="keepalive行为控制的指令"></a>keepalive行为控制的指令</h4><table><thead><tr><th align="left">Syntax:</th><th>keepalive_disable none | browser …;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>keepalive_disable msie6;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>keepalive_requests number;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>keepalive_requests 100;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>keepalive_timeout <em>timeout</em> [header_timeout];</th></tr></thead><tbody><tr><td align="left">Default:</td><td>keepalive_timeout 75s;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx-架构基础</title>
      <link href="/post/47516.html"/>
      <url>/post/47516.html</url>
      
        <content type="html"><![CDATA[<p>为什么Nginx会那么流行?</p><a id="more"></a><h2 id="Nginx进程结构"><a href="#Nginx进程结构" class="headerlink" title="Nginx进程结构"></a>Nginx进程结构</h2><p>为什么使用多进程而不是多线程？实现高可用（master），使用线程的话，其中一个崩溃会导致全部崩溃</p><ul><li>单进程 , 不适用于生产环境，用于调试，开发</li><li>多进程<ul><li>master进程，用于管理worker进程，监控以及配置文件重载</li><li>子进程<ul><li>worker进程</li><li>cache进程 ，缓存会在多个worker进程之间使用</li></ul></li></ul></li></ul><h2 id="使用信号管理Nginx的父子进程"><a href="#使用信号管理Nginx的父子进程" class="headerlink" title="使用信号管理Nginx的父子进程"></a>使用信号管理Nginx的父子进程</h2><ul><li>master进程<ul><li>CHILD信号：监控、管理worker进程</li><li>TERM，INT信号：立刻停止nginx进程</li><li>QUIT信号：优雅停止nginx进程，对用户不要立刻发送tcp的reset复位请求的报文</li><li>HUP信号：重载配置文件</li><li>USR1信号：重新打开日志文件，做日志文件切割</li><li>USR2信号、WINCH信号：只能通过kill命令操作，用作热升级</li></ul></li><li>worker进程<ul><li>TERM，INT信号：</li><li>QUIT信号：</li><li>USR1信号：</li><li>WINCH信号：</li></ul></li><li>nginx命令行（通过nginx.pid文件记录PID）<ul><li>reload：HUP</li><li>reopen：USR1</li><li>stop：TERM</li><li>quit：QUIT</li></ul></li></ul><h2 id="Nginx重载配置文件的真相"><a href="#Nginx重载配置文件的真相" class="headerlink" title="Nginx重载配置文件的真相"></a>Nginx重载配置文件的真相</h2><h3 id="reload流程"><a href="#reload流程" class="headerlink" title="reload流程"></a>reload流程</h3><ol><li>向master进程发送HUP信号（reload命令）</li><li>master进程校验配置语法是否正确</li><li>master进程打开新的监听端口</li><li>master进程使用新的配置启动新的worker子进程</li><li>master进程向老worker子进程发送QUIT信号</li><li>老master进程关闭监听句柄，处理完当前连接后结束进程</li></ol><h3 id="热升级的流程"><a href="#热升级的流程" class="headerlink" title="热升级的流程"></a>热升级的流程</h3><ol><li>将旧的nginx文件换成新的nginx文件（注意备份）</li><li>向master进程发送USR2信号</li><li>master进程修改pid文件名，加上后缀.oldbin</li><li>master进程用新的nginx文件启动新master进程</li><li>向老master进程发送QUIT信号，关闭老master进程</li><li>回滚：向老master发送HUP，向新master发送QUIT信号</li></ol><h3 id="优雅的关闭worker进程（针对http请求）"><a href="#优雅的关闭worker进程（针对http请求）" class="headerlink" title="优雅的关闭worker进程（针对http请求）"></a>优雅的关闭worker进程（针对http请求）</h3><ol><li>设置定时器worker_shutdown_timeout</li><li>关闭监听句柄</li><li>关闭空闲连接</li><li>在循环中等待全部连接关闭</li><li>退出进程</li></ol><h2 id="Nginx连接池"><a href="#Nginx连接池" class="headerlink" title="Nginx连接池"></a>Nginx连接池</h2><h3 id="worker-connections（高并发配置项）"><a href="#worker-connections（高并发配置项）" class="headerlink" title="worker_connections（高并发配置项）"></a>worker_connections（高并发配置项）</h3><table><thead><tr><th align="left">Syntax:</th><th>worker_connections number;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>worker_connections 512;</td></tr><tr><td align="left">Context:</td><td><code>events</code></td></tr></tbody></table><h3 id="client-header-timeout"><a href="#client-header-timeout" class="headerlink" title="client_header_timeout"></a>client_header_timeout</h3><table><thead><tr><th align="left">Syntax:</th><th>client_header_timeout time;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>client_header_timeout 60s;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code></td></tr></tbody></table><h3 id="byte-sent（发送的字节数）"><a href="#byte-sent（发送的字节数）" class="headerlink" title="$byte_sent（发送的字节数）"></a>$byte_sent（发送的字节数）</h3><p>number of bytes sent to a client (1.3.8, 1.2.5)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                  '$status [$request_length:$bytes_sent] "$http_referer" '</span><br><span class="line">                  '"$http_user_agent" "$http_x_forwarded_for" "$upstream_cache_status"';</span><br></pre></td></tr></table></figure><h3 id="connection-pool-size（连接内存池大小）"><a href="#connection-pool-size（连接内存池大小）" class="headerlink" title="connection_pool_size（连接内存池大小）"></a>connection_pool_size（连接内存池大小）</h3><table><thead><tr><th align="left">Syntax:</th><th>connection_pool_size size;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>connection_pool_size 256|512;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code></td></tr></tbody></table><h3 id="request-pool-size（请求内存池大小）"><a href="#request-pool-size（请求内存池大小）" class="headerlink" title="request_pool_size（请求内存池大小）"></a>request_pool_size（请求内存池大小）</h3><table><thead><tr><th align="left">Syntax:</th><th>request_pool_size size;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>request_pool_size 4k;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code></td></tr></tbody></table><h2 id="共享内存—-Nginx跨worker进程通信的有效手段"><a href="#共享内存—-Nginx跨worker进程通信的有效手段" class="headerlink" title="共享内存—-Nginx跨worker进程通信的有效手段"></a>共享内存—-Nginx跨worker进程通信的有效手段</h2><h3 id="使用共享内存的官方模块"><a href="#使用共享内存的官方模块" class="headerlink" title="使用共享内存的官方模块"></a>使用共享内存的官方模块</h3><ul><li>Ngx_http_lua_api</li><li>rbtree<ul><li>Ngx_stream_limit_conn_module</li><li>Ngx_http_limit_conn_module</li><li>Ngx_stream_limit_req_module：流量控制</li><li>http cache<ul><li>Ngx_http_file_cache</li><li>Ngx_http_proxy_module</li><li>Ngx_http_scgi_module</li><li>Ngx_http_uwsgi_module</li><li>Ngx_http_fastcgi_module</li></ul></li></ul></li><li>ssl<ul><li>Ngx_http_ssl_module</li><li>Ngx_mail_ssl_module</li><li>Ngx_stream_ssl_module</li></ul></li><li>单链表<ul><li>Ngx_http_upstream_zone_module</li><li>Ngx_stream_upstream_zone_module</li></ul></li></ul><h3 id="slab内存分配管理器"><a href="#slab内存分配管理器" class="headerlink" title="slab内存分配管理器"></a>slab内存分配管理器</h3><ul><li>下载Tengine中的slab_stat模块编译进openresty中</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget -c http://tengine.taobao.org/download/tengine-2.2.2.tar.gz</span><br><span class="line">tar -xvf tengine-2.2.2.tar.gz</span><br><span class="line">cd ~/openresty-1.13.6.2</span><br><span class="line">./configure --add-module=../tengine-2.2.2/modules/ngx_slab_stat/</span><br><span class="line">gmake &amp;&amp; gmake install</span><br></pre></td></tr></table></figure><h3 id="共享内存示例"><a href="#共享内存示例" class="headerlink" title="共享内存示例"></a>共享内存示例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> http &#123;</span><br><span class="line"> lua_shared_dict dogs 10m;</span><br><span class="line"> server &#123;</span><br><span class="line"> location = /slab_stat &#123;</span><br><span class="line">            slab_stat;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location /set &#123;</span><br><span class="line">            content_by_lua_block &#123;</span><br><span class="line">                local dogs = ngx.shared.dogs</span><br><span class="line">                dogs:set("Jim", 8)</span><br><span class="line">                ngx.say("STORED")</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /get &#123;</span><br><span class="line">            content_by_lua_block &#123;</span><br><span class="line">                local dogs = ngx.shared.dogs</span><br><span class="line">                ngx.say(dogs:get("Jim"))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用共享内存及slab_stat</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]# curl 172.16.100.11/set</span><br><span class="line">STORED</span><br><span class="line">[root@openresty01 ~]# curl 172.16.100.11/get</span><br><span class="line">8</span><br><span class="line">[root@openresty01 ~]# curl 172.16.100.11/slab_stat</span><br><span class="line">* shared memory: dogs</span><br><span class="line">total:       10240(KB) free:       10168(KB) size:           4(KB)</span><br><span class="line">pages:       10168(KB) start:00007F1C8B47F000 end:00007F1C8BE6F000</span><br><span class="line">slot:           8(Bytes) total:           0 used:           0 reqs:           0 fails:           0</span><br><span class="line">slot:          16(Bytes) total:           0 used:           0 reqs:           0 fails:           0</span><br><span class="line">slot:          32(Bytes) total:         127 used:           1 reqs:           1 fails:           0</span><br><span class="line">slot:          64(Bytes) total:           0 used:           0 reqs:           0 fails:           0</span><br><span class="line">slot:         128(Bytes) total:          32 used:           2 reqs:           2 fails:           0</span><br><span class="line">slot:         256(Bytes) total:           0 used:           0 reqs:           0 fails:           0</span><br><span class="line">slot:         512(Bytes) total:           0 used:           0 reqs:           0 fails:           0</span><br><span class="line">slot:        1024(Bytes) total:           0 used:           0 reqs:           0 fails:           0</span><br><span class="line">slot:        2048(Bytes) total:           0 used:           0 reqs:           0 fails:           0</span><br></pre></td></tr></table></figure><h2 id="Nginx的容器"><a href="#Nginx的容器" class="headerlink" title="Nginx的容器"></a>Nginx的容器</h2><ul><li>数组</li><li>链表</li><li>队列</li><li>哈希表</li><li>红黑树：自平衡查找二叉树，高度差不大<ul><li>高度不会超过2倍log(n)</li><li>增删改查算法复杂度O(log(n))</li><li>遍历复杂度O(n)</li></ul></li><li>基数树</li></ul><h3 id="Nginx最常用的容器—–红黑树"><a href="#Nginx最常用的容器—–红黑树" class="headerlink" title="Nginx最常用的容器—–红黑树"></a>Nginx最常用的容器—–红黑树</h3><h3 id="使用红黑树的常见模块"><a href="#使用红黑树的常见模块" class="headerlink" title="使用红黑树的常见模块"></a>使用红黑树的常见模块</h3><ul><li>ngx_conf_module              #config_dump_rbtree</li><li>ngx_event_timer_rbtree      #管理计时器的红黑树</li><li>Ngx_http_file_cache</li><li>Ngx_http_geo_module</li><li>Ngx_http_limit_conn_module</li><li>Ngx_http_limit_req_module</li><li>Ngx_http_lua_shdict:ngx.shared.DICT          #LRU链表性质</li><li>resolver      #ngx_resolver_t</li><li>Ngx_stream_geo_module</li><li>Ngx_stream_limit_conn_module</li></ul><h2 id="Nginx动态模块"><a href="#Nginx动态模块" class="headerlink" title="Nginx动态模块"></a>Nginx动态模块</h2><h3 id="动态模块编译步骤"><a href="#动态模块编译步骤" class="headerlink" title="动态模块编译步骤"></a>动态模块编译步骤</h3><ol><li>Configure加入动态模块</li><li>编译进binary</li><li>启动初始化模块数组</li><li>读取load_module配置</li><li>打开动态库加入模块数组</li><li>基于模块数组开始初始化</li></ol><h3 id="查看哪些模块可以作为动态模块"><a href="#查看哪些模块可以作为动态模块" class="headerlink" title="查看哪些模块可以作为动态模块"></a>查看哪些模块可以作为动态模块</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]# ./configure --help | grep =dynamic</span><br><span class="line">  --with-http_xslt_module=dynamic    enable dynamic ngx_http_xslt_module</span><br><span class="line">  --with-http_image_filter_module=dynamic</span><br><span class="line">  --with-http_geoip_module=dynamic   enable dynamic ngx_http_geoip_module</span><br><span class="line">  --with-http_perl_module=dynamic    enable dynamic ngx_http_perl_module</span><br><span class="line">  --with-mail=dynamic                enable dynamic POP3/IMAP4/SMTP proxy module</span><br><span class="line">  --with-stream=dynamic              enable dynamic TCP/UDP proxy module</span><br><span class="line">  --with-stream_geoip_module=dynamic enable dynamic ngx_stream_geoip_module</span><br></pre></td></tr></table></figure><h3 id="http-image-filter-module模块"><a href="#http-image-filter-module模块" class="headerlink" title="http_image_filter_module模块"></a>http_image_filter_module模块</h3><h4 id="使用http-image-filter-module"><a href="#使用http-image-filter-module" class="headerlink" title="使用http_image_filter_module"></a>使用http_image_filter_module</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@openresty01 ~]# yum -y install gd gd-devel</span><br><span class="line">[root@openresty01 ~]# ./configure --prefix=/tmp/nginx122 --with-http_image_filter_module=dynamic</span><br><span class="line">[root@openresty01 ~]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 未使用模块配置文件</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   test;        #该目录下有一个ubunt.jgp的图片</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用模块配置文件</span></span><br><span class="line">load_module modules/ngx_http_image_filter_module.so;           #引入动态库文件</span><br><span class="line">server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   test;        #该目录下有一个ubunt.jgp的图片</span><br><span class="line">            image_filter resize 15 10;          #设置图片为15x10大小</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h4><ul><li>使用浏览器访问两次即可发现图片发生改变</li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx-反向代理与负载均衡</title>
      <link href="/post/6325.html"/>
      <url>/post/6325.html</url>
      
        <content type="html"><![CDATA[<p>多台服务器绑定一个域名，当A用户访问WEB服务器的时候，可能访问的是A服务器，当B用户访问WEB服务器的时候可能是A服务器也可能是B服务器，但是一旦A服务器挂掉后，Nginx负载均衡会自动的把所有的访问者全部指向另外一个可以正常工作的WEB server.</p><a id="more"></a><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ul><li>客户端<ul><li>Nginx<ul><li>应用服务器1（正常）</li><li>应用服务器2（宕机）</li><li>应用服务器3（正常）</li><li>应用服务器4（扩容）</li></ul></li></ul></li></ul><h3 id="Nginx在AKF扩展立方体的应用"><a href="#Nginx在AKF扩展立方体的应用" class="headerlink" title="Nginx在AKF扩展立方体的应用"></a>Nginx在AKF扩展立方体的应用</h3><ul><li>水平扩展（X轴扩展）：基于Round-Robin或者least-connected算法分发请求，不能解决单台数据量大的问题</li><li>纵向扩展（Y轴扩展）：基于URL对功能进行分发，需要一台处理的功能，用两台来处理。需要做重构。能够解决数据量上升的问题</li><li>竖向扩展（Z轴扩展）：将用户的IP地址或其他信息映射到某个特定的服务或者集群，如CDN</li></ul><h3 id="负载均衡策略：round-robin"><a href="#负载均衡策略：round-robin" class="headerlink" title="负载均衡策略：round-robin"></a>负载均衡策略：round-robin</h3><table><thead><tr><th align="left">Syntax:</th><th>upstream name { … }</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>server <em>address</em> [parameters];</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>upstream</code></td></tr></tbody></table><h3 id="指定上游服务地址的upstream与server指令"><a href="#指定上游服务地址的upstream与server指令" class="headerlink" title="指定上游服务地址的upstream与server指令"></a>指定上游服务地址的upstream与server指令</h3><ul><li>功能：指定一组上游服务地址，其中，地址可以是域名、IP地址或者unix socket地址。可以在域名或者IP地址后添加端口，如不添加则默认80端口</li><li>通用参数：<ul><li>backup：指定当前server为备份服务，仅当非备份服务不可用时，请求才会到该server</li><li>down：标识此台服务已下线，不再提供服务</li></ul></li></ul><h3 id="加权Round-Robin负载均衡算法"><a href="#加权Round-Robin负载均衡算法" class="headerlink" title="加权Round-Robin负载均衡算法"></a>加权Round-Robin负载均衡算法</h3><ul><li>功能：<ul><li>使用加权轮训的方式访问server指令指定的上游服务</li><li>集成在Nginx的upstream框架中</li></ul></li><li>指令：<ul><li>weight：服务的权重，默认为1</li><li>max_conns：server的最大并发连接数，仅作用于单worker进程。默认是0，表示没有限制</li><li>max_fails：在fail_timeout时间段内，最大的失败次数。当达到最大失败数时，会在fail_timeout秒内这台server不允许再次被选择</li><li>fail_timeout：<ul><li>单位为秒，默认10s，具有两个功能：</li><li>指定一段时间后，最大的失败次数为max_fails</li><li>到达max_fails后，该server不能访问的时间</li></ul></li></ul></li></ul><h3 id="对上游服务使用keepalived长连接"><a href="#对上游服务使用keepalived长连接" class="headerlink" title="对上游服务使用keepalived长连接"></a>对上游服务使用keepalived长连接</h3><ul><li>功能：通过复用连接，降低nginx与上游服务器简历、关闭连接的消耗，提升吞吐量的同时降低时延</li><li>模块：ngx_http_upstream_keepalive_module，默认编译进nginx，使用–without-http_upstream_keepalive_moduel移除该模块</li><li>配置：<ul><li>对上游连接的http头部设定</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy_http_version 1.1;</span><br><span class="line">proxy_set_header Connection "";</span><br></pre></td></tr></table></figure><h4 id="upstream-keepalive的指令"><a href="#upstream-keepalive的指令" class="headerlink" title="upstream_keepalive的指令"></a>upstream_keepalive的指令</h4><table><thead><tr><th align="left">Syntax:</th><th>keepalive connections;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>upstream</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>keepalive_requests number;</th></tr></thead><tbody><tr><td align="left">Default:</td><td><code>keepalive_requests 100;</code></td></tr><tr><td align="left">Context:</td><td><code>upstream</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>keepalive_timeout timeout;</th></tr></thead><tbody><tr><td align="left">Default:</td><td><code>keepalive_timeout 60s;</code></td></tr><tr><td align="left">Context:</td><td><code>upstream</code></td></tr></tbody></table><h3 id="指定上游服务域名解析的resolver指令"><a href="#指定上游服务域名解析的resolver指令" class="headerlink" title="指定上游服务域名解析的resolver指令"></a>指定上游服务域名解析的resolver指令</h3><table><thead><tr><th align="left">Syntax:</th><th>resolver <em>address</em> … [valid=<em>time</em>] [ipv6=on|off];</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>resolver_timeout time;</th></tr></thead><tbody><tr><td align="left">Default:</td><td><code>resolver_timeout 30s;</code></td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">roundrobin.conf。配置上游服务9011和9012</span></span><br><span class="line">upstream rrups &#123;</span><br><span class="line">    server 127.0.0.1:9011 weight=2 max_conns=2 max_fails=2 fail_timeout=5;</span><br><span class="line">    server 127.0.0.1:9012;</span><br><span class="line">    keepalive 32;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 10005;</span><br><span class="line">    server_name rrup.dookt.com.cn;</span><br><span class="line">    error_log logs/rrups-error.log info;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://rrups;</span><br><span class="line">        proxy_http_version 1.1;         #上游连接的http头部设定http协议办版本http/1.1</span><br><span class="line">        proxy_set_header Connention "";  #上游连接的http头部设定</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">upserver.conf。9011和9012</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 9011;</span><br><span class="line">    default_type text/plain;</span><br><span class="line">    return 200 '9011 server respomse.\n';</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 9012;</span><br><span class="line">    default_type text/plain;</span><br><span class="line">    return 200 '9012 server respomse.\n';</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用curl验证，可以发现和预期一致，（访问两次9011才访问一次9012）</span></span><br><span class="line">[root@openresty01 ~]# curl rrups.dookt.com.cn:10005</span><br><span class="line">9011 server respomse.</span><br><span class="line">[root@openresty01 ~]# curl rrups.dookt.com.cn:10005</span><br><span class="line">9011 server respomse.</span><br><span class="line">[root@openresty01 ~]# curl rrups.dookt.com.cn:10005</span><br><span class="line">9012 server respomse.</span><br><span class="line">[root@openresty01 ~]# curl rrups.dookt.com.cn:10005</span><br><span class="line">9011 server respomse.</span><br><span class="line">[root@openresty01 ~]# curl rrups.dookt.com.cn:10005</span><br><span class="line">9011 server respomse.</span><br><span class="line">[root@openresty01 ~]# curl rrups.dookt.com.cn:10005</span><br><span class="line">9012 server respomse.</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">通过tcpdump抓包分析，</span></span><br><span class="line">[root@openresty01 ~]# curl rrups.dookt.com.cn:10005       #向9011发送报文</span><br><span class="line">9011 server respomse.</span><br><span class="line">[root@openresty01 ~]# curl rrups.dookt.com.cn:10005</span><br><span class="line">9012 server respomse.</span><br><span class="line">[root@openresty01 ~]# curl rrups.dookt.com.cn:10005       #向9011发送报文</span><br><span class="line">9011 server respomse.</span><br><span class="line">[root@openresty01 ~]# tcpdump -i lo port 9011     #这几次访问都没有关闭连接</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on lo, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">16:10:00.679067 IP localhost.33782 &gt; localhost.9011: Flags [S], seq 1377635386, win 43690, options [mss 65495,sackOK,TS val 25658580 ecr 0,nop,wscale 7], length 0</span><br><span class="line">19:52:42.147817 IP localhost.9011 &gt; localhost.33782: Flags [S.], seq 1262964724, ack 1377635387, win 43690, options [mss 65495,sackOK,TS val 25658580 ecr 25658580,nop,wscale 7], length 0</span><br><span class="line">16:10:00.679119 IP localhost.33782 &gt; localhost.9011: Flags [.], ack 1, win 342, options [nop,nop,TS val 25658580 ecr 25658580], length 0</span><br><span class="line">16:10:00.679164 IP localhost.33782 &gt; localhost.9011: Flags [P.], seq 1:89, ack 1, win 342, options [nop,nop,TS val 25658580 ecr 25658580], length 88</span><br><span class="line">16:10:00.679169 IP localhost.9011 &gt; localhost.33782: Flags [.], ack 89, win 342, options [nop,nop,TS val 25658580 ecr 25658580], length 0</span><br><span class="line">16:10:00.679253 IP localhost.9011 &gt; localhost.33782: Flags [P.], seq 1:172, ack 89, win 342, options [nop,nop,TS val 25658580 ecr 25658580], length 171</span><br><span class="line">16:10:00.679256 IP localhost.33782 &gt; localhost.9011: Flags [.], ack 172, win 350, options [nop,nop,TS val 25658580 ecr 25658580], length 0</span><br><span class="line">16:10:00.680745 IP localhost.9011 &gt; localhost.33782: Flags [F.], seq 172, ack 89, win 342, options [nop,nop,TS val 25658582 ecr 25658580], length 0</span><br><span class="line">16:10:00.681005 IP localhost.33782 &gt; localhost.9011: Flags [F.], seq 89, ack 173, win 350, options [nop,nop,TS val 25658582 ecr 25658582], length 0</span><br><span class="line">16:10:00.681019 IP localhost.9011 &gt; localhost.33782: Flags [.], ack 90, win 342, options [nop,nop,TS val 25658582 ecr 25658582], length 0</span><br><span class="line">16:10:19.678451 IP localhost.33786 &gt; localhost.9011: Flags [S], seq 1105788511, win 43690, options [mss 65495,sackOK,TS val 25677579 ecr 0,nop,wscale 7], length 0</span><br><span class="line">18:32:42.250471 IP localhost.9011 &gt; localhost.33786: Flags [S.], seq 1019653247, ack 1105788512, win 43690, options [mss 65495,sackOK,TS val 25677579 ecr 25677579,nop,wscale 7], length 0</span><br><span class="line">16:10:19.678458 IP localhost.33786 &gt; localhost.9011: Flags [.], ack 1, win 342, options [nop,nop,TS val 25677579 ecr 25677579], length 0</span><br><span class="line">16:10:19.678468 IP localhost.33786 &gt; localhost.9011: Flags [P.], seq 1:89, ack 1, win 342, options [nop,nop,TS val 25677579 ecr 25677579], length 88</span><br><span class="line">16:10:19.678470 IP localhost.9011 &gt; localhost.33786: Flags [.], ack 89, win 342, options [nop,nop,TS val 25677579 ecr 25677579], length 0</span><br><span class="line">16:10:19.678488 IP localhost.9011 &gt; localhost.33786: Flags [P.], seq 1:172, ack 89, win 342, options [nop,nop,TS val 25677579 ecr 25677579], length 171</span><br><span class="line">16:10:19.678489 IP localhost.33786 &gt; localhost.9011: Flags [.], ack 172, win 350, options [nop,nop,TS val 25677579 ecr 25677579], length 0</span><br><span class="line">16:10:19.678512 IP localhost.9011 &gt; localhost.33786: Flags [F.], seq 172, ack 89, win 342, options [nop,nop,TS val 25677579 ecr 25677579], length 0</span><br><span class="line">16:10:19.678530 IP localhost.33786 &gt; localhost.9011: Flags [F.], seq 89, ack 173, win 350, options [nop,nop,TS val 25677579 ecr 25677579], length 0</span><br><span class="line">16:10:19.678532 IP localhost.9011 &gt; localhost.33786: Flags [.], ack 90, win 342, options [nop,nop,TS val 25677579 ecr 25677579], length 0</span><br></pre></td></tr></table></figure><h3 id="负载均衡算法：ip-hash与hash模块"><a href="#负载均衡算法：ip-hash与hash模块" class="headerlink" title="负载均衡算法：ip_hash与hash模块"></a>负载均衡算法：ip_hash与hash模块</h3><h4 id="基于客户端IP地址的hash算法实现负载均衡：upstream-ip-hash模块"><a href="#基于客户端IP地址的hash算法实现负载均衡：upstream-ip-hash模块" class="headerlink" title="基于客户端IP地址的hash算法实现负载均衡：upstream_ip_hash模块"></a>基于客户端IP地址的hash算法实现负载均衡：upstream_ip_hash模块</h4><ul><li>功能：以客户端IP地址作为hash算法的关键字，映射到特定的上游服务器中<ul><li>对IPv4地址使用前3个字节作为关键字，对于IPv6则使用完整地址</li><li>可以使用realip模块修改用于执行算法的IP地址</li></ul></li><li>模块：ngx_http_upstream_ip_hash_module，默认编译，通过–without-http_upstream_ip_hash_module禁用模块</li><li>语法</li></ul><table><thead><tr><th align="left">Syntax:</th><th>ip_hash;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>upstream</code></td></tr></tbody></table><h4 id="基于关键字查找实现hash算法的负载均衡：upstream-hash模块"><a href="#基于关键字查找实现hash算法的负载均衡：upstream-hash模块" class="headerlink" title="基于关键字查找实现hash算法的负载均衡：upstream_hash模块"></a>基于关键字查找实现hash算法的负载均衡：upstream_hash模块</h4><ul><li>功能：通过指定关键字作为hash key，基于hash算法映射特定的上游服务器中<ul><li>关键字可以含有变量字符串</li></ul></li><li>模块：ngx_http_upstream_hash_module，默认编译，通过–without-http_upstream_hash_module禁用模块</li><li>语法：</li></ul><table><thead><tr><th align="left">Syntax:</th><th>hash <em>key</em> [consistent];</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>upstream</code></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">upstream iphashups &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 127.0.0.1:9011 weight=2 max_conns=2 max_fails=2 fail_timeout=5;    </span><br><span class="line">    server 127.0.0.1:9012;   #此时weight不生效,因为使用了ip_hash，必须根据用户IP地址来确定</span><br><span class="line">    #keepalive 32;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    set_real_ip_from 172.16.100.11;      #为了方便测试，使用了realip模块。设置可信地址是本机地址</span><br><span class="line">    real_ip_recursive on;</span><br><span class="line">    real_ip_header X-Forwarded-For;  #从X-Forwarded-For的最后一个地址中拿出来作为IP地址即$remote_addr</span><br><span class="line">    listen 10005;</span><br><span class="line">    server_name iphash.dookt.com.cn;</span><br><span class="line">    error_log logs/rrups-error.log info;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://iphashups;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connention "";</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用curl -H 在header头部添加上X-Forwarded-For的值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">测试结果如下：通过不同IP地址访问到的后端服务不一样，但是同一个IP访问到的肯定是同一个后端服务</span></span><br><span class="line">[root@openresty01 ~]# curl -H 'X-Forwarded-For: 100.200.20.200' iphash.dookt.com.cn:10005</span><br><span class="line">9012 server respomse.</span><br><span class="line">[root@openresty01 ~]# curl -H 'X-Forwarded-For: 172.15.54.1' iphash.dookt.com.cn:10005 </span><br><span class="line">9011 server respomse.</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">upstream iphashups &#123;</span><br><span class="line">    hash user_$arg_username;</span><br><span class="line">    server 127.0.0.1:9011 weight=2 max_conns=2 max_fails=2 fail_timeout=5;</span><br><span class="line">    server 127.0.0.1:9012;</span><br><span class="line">    keepalive 32;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    set_real_ip_from 172.16.100.11;</span><br><span class="line">    real_ip_recursive on;</span><br><span class="line">    real_ip_header X-Forwarded-For;</span><br><span class="line">    listen 10005;</span><br><span class="line">    server_name iphash.dookt.com.cn;</span><br><span class="line">    error_log logs/rrups-error.log info;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://iphashups;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connention "";</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">以下结果发现，通过访问不同的username到的后端服务不一样，但是同一个username访问过去的肯定是同一个后端服务</span></span><br><span class="line">[root@openresty01 ~]# curl -H 'X-Forwarded-For: 100.200.20.200' iphash.dookt.com.cn:10005?username=389446587asdf</span><br><span class="line">9011 server respomse.</span><br><span class="line">[root@openresty01 ~]# curl -H 'X-Forwarded-For: 100.200.20.200' iphash.dookt.com.cn:10005?username=2346sfs57asdfgag   </span><br><span class="line">9012 server respomse.</span><br></pre></td></tr></table></figure><h3 id="一致性hash算法"><a href="#一致性hash算法" class="headerlink" title="一致性hash算法"></a>一致性hash算法</h3><h4 id="hash算法的问题"><a href="#hash算法的问题" class="headerlink" title="hash算法的问题"></a>hash算法的问题</h4><p>举例，设置选中上游server的算法为：key % 5</p><ul><li><p>key5 &lt;—&gt;  server0</p></li><li><p>key6 &lt;—&gt;  server1</p></li><li><p>key7 &lt;—&gt;  server2</p></li><li><p>key8 &lt;—&gt;  server3</p></li><li><p>key9 &lt;—&gt;  server4</p></li></ul><p>此时如果一台server4宕机。则所有策略都会改变</p><ul><li>key5 &lt;—&gt;  server1</li><li>key6 &lt;—&gt;  server2</li><li>key7 &lt;—&gt;  server3</li><li>key8 &lt;—&gt;  server0</li><li>key9 &lt;—&gt;  server1</li></ul><p>所以，宕机或者扩容时，hash算法会引发大量的路由变更，可能导致缓存大范围失效</p><p>一致性hash算法，缓解hash算法的的扩容或宕机引发的路由变更，导致缓存大范围失效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">upstream ipchashups &#123;</span><br><span class="line">    ip_hash consistent;        #一致性hash配置只需要在ip_hash上添加consistent即可</span><br><span class="line">    server 127.0.0.1:9011 weight=2 max_conns=2 max_fails=2 fail_timeout=5;    </span><br><span class="line">    server 127.0.0.1:9012;   #此时weight不生效,因为使用了ip_hash，必须根据用户IP地址来确定</span><br><span class="line">    #keepalive 32;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    set_real_ip_from 172.16.100.11;      #为了方便测试，使用了realip模块。设置可信地址是本机地址</span><br><span class="line">    real_ip_recursive on;</span><br><span class="line">    real_ip_header X-Forwarded-For;  #从X-Forwarded-For的最后一个地址中拿出来作为IP地址即$remote_addr</span><br><span class="line">    listen 10005;</span><br><span class="line">    server_name ipchash.dookt.com.cn;</span><br><span class="line">    error_log logs/rrups-error.log info;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://ipchashups;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connention "";</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最少连接算法以及如何跨worker进程生效"><a href="#最少连接算法以及如何跨worker进程生效" class="headerlink" title="最少连接算法以及如何跨worker进程生效"></a>最少连接算法以及如何跨worker进程生效</h3><h4 id="优先选择连接最少的上游服务：upstream-least-conn模块"><a href="#优先选择连接最少的上游服务：upstream-least-conn模块" class="headerlink" title="优先选择连接最少的上游服务：upstream_least_conn模块"></a>优先选择连接最少的上游服务：upstream_least_conn模块</h4><ul><li>功能：从所有服务器中，找出当前并发连接数最少的一个，将请求转发到它。<ul><li>如果出现多个最小连接数一样的，使用round-robin算法</li></ul></li><li>模块：ngx_http_upstream_least_conn_module，通过–without-http_upstream_ip_hash_module禁用模块</li><li>语法：</li></ul><table><thead><tr><th align="left">Syntax:</th><th>least_conn;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>upstream</code></td></tr></tbody></table><h4 id="使用共享内存使负载均衡策略对所有worker进程生效：upstream-zone模块"><a href="#使用共享内存使负载均衡策略对所有worker进程生效：upstream-zone模块" class="headerlink" title="使用共享内存使负载均衡策略对所有worker进程生效：upstream_zone模块"></a>使用共享内存使负载均衡策略对所有worker进程生效：upstream_zone模块</h4><ul><li>功能：分配出共享内存，将其他upstream模块定义的负载均衡数据、运行是每个上上游服务的状态数据存放到共享内存上，以对所有nginx的worker进程都生效</li><li>模块：ngx_http_upstream_zone_module，默认编译。通过–without-http_upstream_zone_module禁用该模块</li><li>语法：</li></ul><table><thead><tr><th align="left">Syntax:</th><th>zone <em>name</em> [size];</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>upstream</code></td></tr></tbody></table><h3 id="upstream模块提供的变量"><a href="#upstream模块提供的变量" class="headerlink" title="upstream模块提供的变量"></a>upstream模块提供的变量</h3><h4 id="不含cache的upstream提供的变量"><a href="#不含cache的upstream提供的变量" class="headerlink" title="不含cache的upstream提供的变量"></a>不含cache的upstream提供的变量</h4><ul><li>upstream_addr：上游服务的IP地址，格式为可读字符串，例如：127.0.0.1:9011</li><li>upstream_connect_time：与上游服务连接消耗的时间，单位为秒，精确到毫秒</li><li>upstream_header_time：接收上游服务发回响应中http头部所消耗的时间，单位为秒，精确到毫秒</li><li>upstream_response_time：接收完整上游服务响应所消耗的时间，单位为秒吗，精确到毫秒</li><li>upstream_http_名称：从上游服务返回的响应头部的值</li><li>upstream_bytes_received：从上游服务接收到的响应长度，单位为字节</li><li>upstream_response_length：从上游服务返回响应包体的长度，单位为字节</li><li>upstream_status：上游服务返回的HTTP响应中的状态码。如果未连接上，该变量值为502</li><li>upstream_cookies_名称：从上游服务发回响应头Set-Cookies中取出的cookie的值</li><li>upstream_trailer_名称：从上游服务尾部取到的值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">upstream varups &#123;</span><br><span class="line">    server 127.0.0.1:9011 weight=2 max_conns=2 max_fails=2 fail_timeout=5;</span><br><span class="line">    server 127.0.0.1:9012;</span><br><span class="line">    keepalive 32;</span><br><span class="line">&#125;</span><br><span class="line">log_format varups '$upstream_addr $upstream_connect_time $upstream_header_time $upstream_response_time '</span><br><span class="line">                    '$upstream_response_length $upstream_bytes_received '</span><br><span class="line">                    '$upstream_status $upstream_http_server $upstream_cache_status';</span><br><span class="line">server &#123;</span><br><span class="line">    set_real_ip_from 172.16.100.11;</span><br><span class="line">    real_ip_recursive on;</span><br><span class="line">    real_ip_header X-Forwarded-For;</span><br><span class="line">    listen 10005;</span><br><span class="line">    server_name varups.dookt.com.cn;</span><br><span class="line">    error_log logs/upstream-error.log info;</span><br><span class="line">    access_log logs/upstream-access.log varups;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://varups;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connention "";</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="proxy模块处理请求的流程"><a href="#proxy模块处理请求的流程" class="headerlink" title="proxy模块处理请求的流程"></a>proxy模块处理请求的流程</h3><h4 id="对HTTP协议的反向代理：proxy模块"><a href="#对HTTP协议的反向代理：proxy模块" class="headerlink" title="对HTTP协议的反向代理：proxy模块"></a>对HTTP协议的反向代理：proxy模块</h4><ul><li>功能：对上游服务使用http/https协议进行反向代理</li><li>模块：ngx_http_proxy_module，默认编译，使用–without-http_proxy_module禁用模块</li><li>语法：</li></ul><table><thead><tr><th align="left">Syntax:</th><th>proxy_pass URL;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>location</code>, <code>if in location</code>, <code>limit_except</code></td></tr></tbody></table><ul><li>URL参数规则：<ul><li>URL必须以 http:// 或 https:// 开头，接下来是域名、IP、unix socket地址或者upstream的名字。前两者可以在域名或者IP后加端口。域名和IP后面的URI是可选的。</li><li>URL参数中是否携带了URI，会导致发向上游请求的URL不同：<ul><li>不携带URI，客户端请求中的URL直接转发给上游<ul><li>location 后使用正则表达式、@名字时，应采用这种方式</li></ul></li><li>携带URI，则对用户请求中的URL做如下操作：<ul><li>将location参数中匹配上的一段替换为该URL</li></ul></li></ul></li><li>该URL参数可以携带变量</li><li>更复杂的URL替换，可以在location内的配置添加rewrite break语句</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> upserver.conf配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 9012;</span><br><span class="line">    default_type text/plain;</span><br><span class="line">    return 200 '9012 server respomse.</span><br><span class="line">uri: $uri\n';</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置1，proxy_pass指令没有携带URI</span></span><br><span class="line">upstream proxyups &#123;</span><br><span class="line">    server 127.0.0.1:9012 weight=1;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 10006;</span><br><span class="line">    server_name  proxy.dookt.com.cn;</span><br><span class="line">    error_log logs/proxy-error.log info;</span><br><span class="line">    access_log logs/proxy-access.log;</span><br><span class="line"></span><br><span class="line">    location /a &#123;</span><br><span class="line">        proxy_pass http://proxyups;        #没有携带URI</span><br><span class="line">        #proxy_mothod POST;</span><br><span class="line">        proxy_pass_request_headers off;</span><br><span class="line">        #proxy_pass_request_body off;</span><br><span class="line">        proxy_set_body 'hello world!';</span><br><span class="line">        proxy_set_header name '';</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connection "";</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置2，proxy_pass指令携带URI</span></span><br><span class="line">upstream proxyups &#123;</span><br><span class="line">    server 127.0.0.1:9012 weight=1;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 10006;</span><br><span class="line">    server_name  proxy.dookt.com.cn;</span><br><span class="line">    error_log logs/proxy-error.log info;</span><br><span class="line">    access_log logs/proxy-access.log;</span><br><span class="line"></span><br><span class="line">    location /a &#123;</span><br><span class="line">        proxy_pass http://proxyups/www;        #携带URI /www</span><br><span class="line">        #proxy_mothod POST;</span><br><span class="line">        proxy_pass_request_headers off;</span><br><span class="line">        #proxy_pass_request_body off;</span><br><span class="line">        proxy_set_body 'hello world!';</span><br><span class="line">        proxy_set_header name '';</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connection "";</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">分别访问配置1 和 2，结果如下：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">未携带uri</span></span><br><span class="line">[root@openresty01 ~]# curl proxy.dookt.com.cn:10006/a/b/c</span><br><span class="line">9012 server respomse.</span><br><span class="line">uri: /a/b/c                  #proxy_pass未携带URI,客户端请求中的URL（/a/b/c）直接转发给上游</span><br><span class="line"><span class="meta">#</span><span class="bash">携带uri</span></span><br><span class="line">[root@openresty01 ~]# curl proxy.dookt.com.cn:10006/a/b/c</span><br><span class="line">9012 server respomse.</span><br><span class="line">uri: /www/b/c                #proxy_pass携带URI,将location参数中匹配上的一段替换为该URL</span><br></pre></td></tr></table></figure><h3 id="根据指令修改发往上游的请求"><a href="#根据指令修改发往上游的请求" class="headerlink" title="根据指令修改发往上游的请求"></a>根据指令修改发往上游的请求</h3><h4 id="生成发往上游的请求行"><a href="#生成发往上游的请求行" class="headerlink" title="生成发往上游的请求行"></a>生成发往上游的请求行</h4><table><thead><tr><th align="left">Syntax:</th><th>proxy_method method;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>proxy_http_version 1.0 | 1.1;</th></tr></thead><tbody><tr><td align="left">Default:</td><td><code>proxy_http_version 1.0;</code></td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><h4 id="生成发往上游的请求头"><a href="#生成发往上游的请求头" class="headerlink" title="生成发往上游的请求头"></a>生成发往上游的请求头</h4><p>若value的值为空字符串，这整个header都不会向上游发送</p><table><thead><tr><th align="left">Syntax:</th><th>proxy_set_header field value;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>proxy_set_header Host $proxy_host;``proxy_set_header Connection close;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>proxy_pass_request_headers on | off;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>proxy_pass_request_headers on;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>proxy_pass_request_body on | off;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>proxy_pass_request_body on;</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><table><thead><tr><th align="left">Syntax:</th><th>proxy_set_body value;</th></tr></thead><tbody><tr><td align="left">Default:</td><td>—</td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置1，默认配置，传递header,没有设置header和body</span></span><br><span class="line">upstream proxyups &#123;</span><br><span class="line">    server 127.0.0.1:9012 weight=1;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 10006;</span><br><span class="line">    server_name  proxy.dookt.com.cn;</span><br><span class="line">    error_log logs/proxy-error.log info;</span><br><span class="line">    access_log logs/proxy-access.log;</span><br><span class="line">    location /a &#123;</span><br><span class="line">        proxy_pass http://proxyups/www;</span><br><span class="line">        #proxy_mothod POST;</span><br><span class="line">        #proxy_pass_request_headers off;</span><br><span class="line">        #proxy_pass_request_body off;</span><br><span class="line">        #proxy_set_body 'hello world!';</span><br><span class="line">        #proxy_set_header name '';</span><br><span class="line">        #proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connection "";</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置2，不传递header,修改方法为POST</span></span><br><span class="line">    location /a &#123;</span><br><span class="line">        proxy_pass http://proxyups/www;</span><br><span class="line">        proxy_method POST;</span><br><span class="line">        proxy_pass_request_headers off;</span><br><span class="line">        #proxy_pass_request_body off;</span><br><span class="line">        #proxy_set_body 'hello world!';</span><br><span class="line">        #proxy_set_header name '';</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connection "";</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置3，设置body</span></span><br><span class="line">    location /a &#123;</span><br><span class="line">        proxy_pass http://proxyups/www;</span><br><span class="line">        proxy_method POST;</span><br><span class="line">        proxy_pass_request_headers off;</span><br><span class="line">        #proxy_pass_request_body off;</span><br><span class="line">        proxy_set_body 'hello world!';</span><br><span class="line">        proxy_set_header name '';</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connection "";</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置1，默认开启传递header，所以httpname为myname, 方法为get,协议为1.0</span></span><br><span class="line">[root@openresty01 ~]# curl -H "name: myname" proxy.dookt.com.cn:10006/a</span><br><span class="line">9012 server respomse.</span><br><span class="line">uri: /www</span><br><span class="line">method: GET</span><br><span class="line">request: GET /www HTTP/1.0</span><br><span class="line">httpname: myname</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置2，不传递header，httpname为空，方法为post，协议为1.1</span></span><br><span class="line">[root@openresty01 ~]# curl -H "name: myname" proxy.dookt.com.cn:10006/a</span><br><span class="line">9012 server respomse.</span><br><span class="line">uri: /www</span><br><span class="line">method: POST</span><br><span class="line">request: POST /www HTTP/1.1</span><br><span class="line">httpname: </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置3，header设置为空，传递过去取到的还是空（httpname: ）</span></span><br><span class="line">[root@openresty01 ~]# tcpdump -i lo port 9012 -A -s 0     #通过抓包查看body已经传入了hello world!</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on lo, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">04:51:58.894007 IP localhost.44716 &gt; localhost.9012: Flags [S], seq 2280917651, win 43690, options [mss 65495,sackOK,TS val 71376795 ecr 0,nop,wscale 7], length 0</span><br><span class="line">E..&lt;..@.@.'...........#4..</span><br><span class="line">..........0.........</span><br><span class="line">.A..........</span><br><span class="line">11:50:03.167884 IP localhost.9012 &gt; localhost.44716: Flags [S.], seq 1393064595, ack 2280917652, win 43690, options [mss 65495,sackOK,TS val 71376795 ecr 71376795,nop,wscale 7], length 0</span><br><span class="line">E..&lt;..@.@.&lt;.........#4..S.z...</span><br><span class="line">......0.........</span><br><span class="line">.A...A......</span><br><span class="line">04:51:58.894015 IP localhost.44716 &gt; localhost.9012: Flags [.], ack 1, win 342, options [nop,nop,TS val 71376795 ecr 71376795], length 0</span><br><span class="line">E..4.   @.@.'...........#4..</span><br><span class="line">.S.z....V.(.....</span><br><span class="line">.A...A..</span><br><span class="line">04:51:58.894024 IP localhost.44716 &gt; localhost.9012: Flags [P.], seq 1:71, ack 1, win 342, options [nop,nop,TS val 71376795 ecr 71376795], length 70</span><br><span class="line">E..z.</span><br><span class="line">@.@.'r..........#4..</span><br><span class="line">.S.z....V.n.....</span><br><span class="line">.A...A..POST /www HTTP/1.1</span><br><span class="line">Host: proxyups</span><br><span class="line">Content-Length: 12</span><br><span class="line"></span><br><span class="line">hello world!</span><br><span class="line">04:51:58.894026 IP localhost.9012 &gt; localhost.44716: Flags [.], ack 71, win 342, options [nop,nop,TS val 71376795 ecr 71376795], length 0</span><br><span class="line">E..4e.@.@...........#4..S.z...</span><br><span class="line">....V.(.....</span><br><span class="line">.A...A..</span><br><span class="line">04:51:58.894045 IP localhost.9012 &gt; localhost.44716: Flags [P.], seq 1:240, ack 71, win 342, options [nop,nop,TS val 71376795 ecr 71376795], length 239</span><br><span class="line">E..#e.@.@...........#4..S.z...</span><br><span class="line">....V.......</span><br><span class="line">.A...A..HTTP/1.1 200 OK</span><br><span class="line">Server: openresty/1.13.6.2</span><br><span class="line">Date: Sun, 14 Jul 2019 20:51:58 GMT</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Content-Length: 85</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">9012 server respomse.</span><br><span class="line">uri: /www</span><br><span class="line">method: POST</span><br><span class="line">request: POST /www HTTP/1.1</span><br><span class="line">httpname: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">04:51:58.894047 IP localhost.44716 &gt; localhost.9012: Flags [.], ack 240, win 350, options [nop,nop,TS val 71376795 ecr 71376795], length 0</span><br><span class="line">E..4..@.@.'...........#4..</span><br><span class="line">.S.&#123;....^.(.....</span><br><span class="line">.A...A..</span><br><span class="line">04:51:58.894082 IP localhost.44716 &gt; localhost.9012: Flags [F.], seq 71, ack 240, win 350, options [nop,nop,TS val 71376795 ecr 71376795], length 0</span><br><span class="line">E..4..@.@.'...........#4..</span><br><span class="line">.S.&#123;....^.(.....</span><br><span class="line">.A...A..</span><br><span class="line">04:51:58.894101 IP localhost.9012 &gt; localhost.44716: Flags [F.], seq 240, ack 72, win 342, options [nop,nop,TS val 71376795 ecr 71376795], length 0</span><br><span class="line">E..4e.@.@...........#4..S.&#123;...</span><br><span class="line">....V.(.....</span><br><span class="line">.A...A..</span><br><span class="line">04:51:58.894103 IP localhost.44716 &gt; localhost.9012: Flags [.], ack 241, win 350, options [nop,nop,TS val 71376795 ecr 71376795], length 0</span><br><span class="line">E..4..@.@.'...........#4..</span><br><span class="line">.S.&#123;....^.(.....</span><br><span class="line">.A...A..</span><br></pre></td></tr></table></figure><h3 id="接收用户请求的包体"><a href="#接收用户请求的包体" class="headerlink" title="接收用户请求的包体"></a>接收用户请求的包体</h3>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础</title>
      <link href="/post/73feb5a.html"/>
      <url>/post/73feb5a.html</url>
      
        <content type="html"><![CDATA[<p>Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。Python由Guido van Rossum于1989年底发明，第一个公开发行版发行于1991年。像Perl语言一样, Python 源代码同样遵循 GPL(GNU General Public License)协议。</p><a id="more"></a><h3 id="Python变量"><a href="#Python变量" class="headerlink" title="Python变量"></a>Python变量</h3><ul><li>变量就是可以重复使用的一个量，或者一个代号</li><li>变量命名规则<ul><li>变量命名可以包含数字、大小写字母、下划线（不推荐以上三种之外的字符）</li><li>数字不能打头<ul><li>4man，5for 是不合法的变量名</li><li>man4，for5 是合法的变量名</li></ul></li><li>一般在python中，以下划线开头的内容有特殊含义，不建议使用<ul><li>比如_age，_name，理论上是可以的，强烈不推荐，包括但不限于一个下划线和两个下划线开头<ul><li>大小写不一样，大小写敏感</li><li>ForMat跟forMat不是一个变量名称</li><li>推荐：</li><li>使用具有固定含义的英文单词或缩写，srv=server skt=socket，一般以posix命名规则为主</li><li>驼峰命名法：<ul><li>大驼峰，每个单词首字母大写<ul><li>在Python中给类命名使用此法</li><li>MyFirstLove，IntOne</li></ul></li><li>小驼峰，类似大驼峰，但第一个小写<ul><li>在Python中一般给普通变量或函数命名</li><li>myFirstLove.IntOne</li></ul></li><li>posix写法<ul><li>多个单词用下划线</li><li>单词全部小写</li><li>my_first_love,int_one</li></ul></li></ul></li></ul></li></ul></li><li>保留字和关键字<ul><li>变量命名必须避开，不能跟关键字和保留字重复</li><li>class，def，break，for</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看关键字的方法</span></span><br><span class="line"><span class="keyword">import</span> keyword     <span class="comment">#引入关键字模块</span></span><br><span class="line"><span class="comment">#打印系统全部关键字</span></span><br><span class="line">print(keyword.kwlist)</span><br></pre></td></tr></table></figure><pre><code>[&apos;False&apos;, &apos;None&apos;, &apos;True&apos;, &apos;and&apos;, &apos;as&apos;, &apos;assert&apos;, &apos;async&apos;, &apos;await&apos;, &apos;break&apos;, &apos;class&apos;, &apos;continue&apos;, &apos;def&apos;, &apos;del&apos;, &apos;elif&apos;, &apos;else&apos;, &apos;except&apos;, &apos;finally&apos;, &apos;for&apos;, &apos;from&apos;, &apos;global&apos;, &apos;if&apos;, &apos;import&apos;, &apos;in&apos;, &apos;is&apos;, &apos;lambda&apos;, &apos;nonlocal&apos;, &apos;not&apos;, &apos;or&apos;, &apos;pass&apos;, &apos;raise&apos;, &apos;return&apos;, &apos;try&apos;, &apos;while&apos;, &apos;with&apos;, &apos;yield&apos;]</code></pre><h2 id="变量申明"><a href="#变量申明" class="headerlink" title="变量申明"></a>变量申明</h2><ul><li>var_name = var_value</li><li>var1 = var2 = var3 = var_value</li><li>var1,var2,var3 = v1,v2,v3</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义变量age。把18放入变量age中</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">print(age)</span><br><span class="line">print(<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给age1，age2，age3放入同样的一个内容或值</span></span><br><span class="line">age1 = age2 = age3 = <span class="number">18</span></span><br><span class="line">print(age1)</span><br><span class="line">print(age2)</span><br><span class="line">print(age3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行内给多个变量赋值</span></span><br><span class="line">age4, age5, age6 = <span class="number">12</span>, <span class="number">21</span>, <span class="number">45</span></span><br><span class="line">print(age4)</span><br><span class="line">print(age5)</span><br><span class="line">print(age6)</span><br></pre></td></tr></table></figure><pre><code>1818181818122145</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#申明的三种格式</span></span><br><span class="line"><span class="comment">#格式1</span></span><br><span class="line">s1 = <span class="string">"我爱王晓静"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#格式2</span></span><br><span class="line">s2 = s1 = <span class="string">"I love wangxiaojing"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#格式3</span></span><br><span class="line">s1, s2, s3 = <span class="string">"I love wangxiaojing"</span>, <span class="string">"爱生活爱图灵"</span>, <span class="number">123</span></span><br></pre></td></tr></table></figure><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><ul><li>严格来讲，python只有一个数据类型</li><li>标准数据类型一共六种<ul><li>数字类型 Number</li><li>字符串类型 str</li><li>列表 list</li><li>元组 tuple</li><li>字典 dict</li><li>集合 set</li></ul></li></ul><h2 id="数据类型-Number"><a href="#数据类型-Number" class="headerlink" title="数据类型 Number"></a>数据类型 Number</h2><ul><li>python中的数字没有大小限制<h2 id="常见数字分类"><a href="#常见数字分类" class="headerlink" title="常见数字分类"></a>常见数字分类</h2><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><ul><li>没有小数部分</li><li>表示正数，负数，0</li><li>二进制<ul><li>只有0，1</li><li>以0b开头的01串</li><li>例如：<ul><li>0b110</li><li>0b11110</li></ul></li></ul></li><li>八进制<ul><li>以0o开的0到7之间的数字串</li><li>例如：<ul><li>0o71</li></ul></li></ul></li><li>十六进制<ul><li>以0x组成的由0-9，a-f构成的串</li></ul></li></ul></li><li>浮点数</li><li>科学计数法</li><li>复数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  二进制案例</span></span><br><span class="line">a1 = <span class="number">0b110</span></span><br><span class="line">print(a1)</span><br><span class="line">a2 = <span class="number">0b11110</span></span><br><span class="line">print(a2)</span><br></pre></td></tr></table></figure><pre><code>630</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 八进制案例</span></span><br><span class="line">a3 = <span class="number">0o71</span></span><br><span class="line">print(a3)</span><br></pre></td></tr></table></figure><pre><code>57</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#十六进制案例</span></span><br><span class="line">a4 = <span class="number">0xffff</span></span><br><span class="line">print(a4)</span><br><span class="line"></span><br><span class="line">a5 = <span class="number">0x53f2</span></span><br><span class="line">print(a5)</span><br></pre></td></tr></table></figure><pre><code>6553521490</code></pre><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><ul><li>就是通俗意义上的小数</li><li>常见的案例格式<ul><li>3.14.59</li><li>3.</li><li>0.4</li><li>.4</li></ul></li><li>科学计数法<ul><li>定义与数学定义一致</li><li>写法就是e后面跟整数用来表示10的指数</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 科学计数法</span></span><br><span class="line">height = <span class="number">184</span></span><br><span class="line">print(<span class="number">184</span>)</span><br><span class="line"></span><br><span class="line">height = <span class="number">1.84e2</span></span><br><span class="line">print(height)</span><br><span class="line"></span><br><span class="line">a = <span class="number">.2</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><pre><code>184184.00.2</code></pre><h3 id="复数-complex"><a href="#复数-complex" class="headerlink" title="复数 complex"></a>复数 complex</h3><ul><li>与数学定义一致</li><li>复数的虚部用就j/J表示</li><li>例如：<ul><li>5+4j</li><li>4j</li><li>(4j)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">4j</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><pre><code>4j</code></pre><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><ul><li>布尔值就是用来表示真假的值</li><li>只有两个值：True/False</li><li>在Python中，布尔值可以当数字使用<ul><li>布尔值如果当数字使用，True=1,False=0</li><li>如果数字用来当做布尔值使用，0=False，其余的当做True</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 布尔值当做数字使用</span></span><br><span class="line">age = <span class="number">18</span> + <span class="literal">True</span></span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line">age = <span class="number">18</span> + <span class="literal">False</span></span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断语句</span></span><br><span class="line">a = <span class="number">-1</span></span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line">    print(<span class="string">"负数是True"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"负数是False"</span>)</span><br></pre></td></tr></table></figure><pre><code>1918负数是True</code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>表达文字信息的内容，比如”我爱王晓静”</li><li>形式上是引号引起来的一段内容</li><li>引号包括<ul><li>单引号</li><li>双引号</li><li>三引号，用来表示多行信息</li></ul></li><li>单双引号含义一致，只能引用一行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串案例</span></span><br><span class="line">love = <span class="string">"Ich liebe Wang Xiaojing"</span></span><br><span class="line">print(love)</span><br><span class="line"></span><br><span class="line">love2 = <span class="string">"I love wangxiaojing"</span></span><br><span class="line">print(love2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三引号可以表示多行</span></span><br><span class="line">love3 = <span class="string">'''</span></span><br><span class="line"><span class="string">我</span></span><br><span class="line"><span class="string">爱你呀</span></span><br><span class="line"><span class="string">哈哈哈哈</span></span><br><span class="line"><span class="string">北国风光</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(love3)</span><br></pre></td></tr></table></figure><pre><code>Ich liebe Wang XiaojingI love wangxiaojing我爱你呀哈哈哈哈北国风光</code></pre><h3 id="None类型"><a href="#None类型" class="headerlink" title="None类型"></a>None类型</h3><ul><li>表示什么都没有。通常用来站位</li><li>比如返回，用来表示返回一个空</li></ul><h2 id="Python列表"><a href="#Python列表" class="headerlink" title="Python列表"></a>Python列表</h2><p>序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。Python有6个序列的内置类型，但最常见的是列表和元组。序列都可以进行的操作包括索引，切片，加，乘，检查成员.此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。</p><!--more--><ul><li>一组有序数据做成的序列<ul><li>数据有先后顺序</li><li>数据可以不是一类数据</li></ul></li><li>list的创建<ul><li>直接创建。用中括号创建，内容直接用英文逗号隔开</li><li>使用list创建</li><li>列表包含单个字符串的时候是个特例</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接赋值创建列表</span></span><br><span class="line">L1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># list内的数据可以不是一个类型</span></span><br><span class="line">L2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"Xiaojing"</span>, <span class="string">"大拿"</span>]</span><br><span class="line"></span><br><span class="line">print(L1)</span><br><span class="line">print(L2)</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3, 4, 5][1, 2, 3, &apos;Xiaojing&apos;, &apos;大拿&apos;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建列表的第二种方式</span></span><br><span class="line">L3 = list()</span><br><span class="line">print(L3)</span><br><span class="line">print(type(L3))</span><br></pre></td></tr></table></figure><pre><code>[]&lt;class &apos;list&apos;&gt;</code></pre><h1 id="内置函数的概念"><a href="#内置函数的概念" class="headerlink" title="内置函数的概念"></a>内置函数的概念</h1><ul><li>help：帮助函数</li><li>type：显示变量的类型</li><li>id：显示变量的id</li><li>print：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list创建的特例演示</span></span><br><span class="line">s = <span class="string">"Liu Dana"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 想创建一个只包含s一个字符串的列表</span></span><br><span class="line">L1 = list(s)</span><br><span class="line"><span class="comment"># 此种情况用 L1 = [s]</span></span><br><span class="line">L2 = [s]</span><br><span class="line">print(type(L1))</span><br><span class="line">print(L1)</span><br><span class="line">print(type(L2))</span><br><span class="line">print(L2)</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;list&apos;&gt;[&apos;L&apos;, &apos;i&apos;, &apos;u&apos;, &apos; &apos;, &apos;D&apos;, &apos;a&apos;, &apos;n&apos;, &apos;a&apos;]&lt;class &apos;list&apos;&gt;[&apos;Liu Dana&apos;]</code></pre><h1 id="列表的常见操作"><a href="#列表的常见操作" class="headerlink" title="列表的常见操作"></a>列表的常见操作</h1><ul><li>访问<ul><li>使用下标操作，也叫索引</li><li>列表的元素索引是从0开始的</li></ul></li><li>切片操作<ul><li>对列表进行任意一段的截取</li><li>截取之后创建新的列表</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L1 = [<span class="number">32</span>,<span class="number">43</span>,<span class="number">22</span>,<span class="number">254</span>,<span class="number">323</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment">#使用下标访问</span></span><br><span class="line">print(L1[<span class="number">0</span>])</span><br><span class="line">print(L1[<span class="number">5</span>])</span><br><span class="line"><span class="comment"># 记住IndexError引发的原因</span></span><br><span class="line">print(L1[<span class="number">15</span>])</span><br></pre></td></tr></table></figure><pre><code>324---------------------------------------------------------------------------IndexError                                Traceback (most recent call last)&lt;ipython-input-4-ade9bd6fe872&gt; in &lt;module&gt;      4 print(L1[5])      5 # 记住IndexError引发的原因----&gt; 6 print(L1[15])IndexError: list index out of range</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切片操作需要注意取值范围，左包括右边不包括</span></span><br><span class="line">L1 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>,<span class="number">100</span>]</span><br><span class="line"><span class="comment"># 对比打印结果跟下表的值</span></span><br><span class="line">print(L1[<span class="number">1</span>:<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面结果说明切片生成的是一个全新的列表</span></span><br><span class="line"><span class="comment"># 通过内置函数id可以判断出切片是后生成了全新的列表</span></span><br><span class="line"><span class="comment"># id用来判断两个变量是否是一个变量</span></span><br><span class="line">L2 = L1[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">print(id(L1))</span><br><span class="line">print(id(L2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片下边可以为空</span></span><br><span class="line">print(L1[:<span class="number">4</span>])</span><br><span class="line">print(L1[<span class="number">2</span>:])</span><br><span class="line">print(L1[:])</span><br></pre></td></tr></table></figure><pre><code>[20, 30, 40, 50, 60]140401879572168140401879570504[10, 20, 30, 40][30, 40, 50, 60, 70, 80, 90, 100][10, 20, 30, 40, 50, 60, 70, 80, 90, 100]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分片可以控制增长幅度，默认为1</span></span><br><span class="line">print(L1[::<span class="number">1</span>])</span><br><span class="line">print(L1[::<span class="number">2</span>])</span><br></pre></td></tr></table></figure><pre><code>[10, 20, 30, 40, 50, 60, 70, 80, 90, 100][10, 30, 50, 70, 90]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下标可以超出范围，超出后不再考虑多余下标内容</span></span><br><span class="line">print(L1[:<span class="number">100</span>])</span><br></pre></td></tr></table></figure><pre><code>[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下标值，增长幅度可以为负数</span></span><br><span class="line"><span class="comment"># 下标为负数，表明顺序是从右往左</span></span><br><span class="line"><span class="comment"># 规定：数组最后一个数字的下标为-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面例子为空，因为默认是从左向右移动</span></span><br><span class="line">print(L1[<span class="number">-2</span>:<span class="number">-5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想利用负数下标打印90.80.70，则</span></span><br><span class="line">print(L1[<span class="number">-2</span>:<span class="number">-5</span>:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想利用负数下标打印70.80.90，则</span></span><br><span class="line">print(L1[<span class="number">-4</span>:<span class="number">-1</span>:<span class="number">1</span>])</span><br></pre></td></tr></table></figure><pre><code>[][90, 80, 70][70, 80, 90]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Python元组"><a href="#Python元组" class="headerlink" title="Python元组"></a>Python元组</h2><p>Python的元组与列表类似，不同之处在于元组的元素不能修改。元组使用小括号，列表使用方括号。元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</p><p>tuple（元组）:可以理解成一个不允许更改的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tuple的创建</span></span><br><span class="line"><span class="comment"># 1. 直接用小括号</span></span><br><span class="line">ta = ()</span><br><span class="line">print(type(ta))</span><br><span class="line"><span class="comment"># 当用小括号创建一个元素的tuple的时候</span></span><br><span class="line">tb = (<span class="number">100</span>)</span><br><span class="line">print(type(tb))</span><br><span class="line">tc = (<span class="number">100</span>, )</span><br><span class="line">print(type(tc))</span><br><span class="line">td = (<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>)</span><br><span class="line">print(type(td))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;tuple&apos;&gt;&lt;class &apos;int&apos;&gt;&lt;class &apos;tuple&apos;&gt;&lt;class &apos;tuple&apos;&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.直接使用逗号</span></span><br><span class="line">ta = <span class="number">100</span>,</span><br><span class="line">print(type(ta))</span><br><span class="line">tb = <span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>,     <span class="comment">#后便可以跟一个逗号</span></span><br><span class="line">print(type(tb))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;tuple&apos;&gt;&lt;class &apos;tuple&apos;&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 使用tuple定义</span></span><br><span class="line">ta = tuple()</span><br><span class="line">print(ta)</span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'Ruigege'</span>]</span><br><span class="line">tb = tuple(li)    <span class="comment">#可迭代</span></span><br><span class="line">print(tb)</span><br><span class="line">print(li)</span><br></pre></td></tr></table></figure><pre><code>()(1, 2, 3, &apos;Ruigege&apos;)[1, 2, 3, &apos;Ruigege&apos;]</code></pre><h3 id="tuple其余特征和list基本一致"><a href="#tuple其余特征和list基本一致" class="headerlink" title="tuple其余特征和list基本一致"></a>tuple其余特征和list基本一致</h3><ul><li>有序</li><li>可以访问不可以修改</li><li>元素可以是任意类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tuple索引操作</span></span><br><span class="line">la = [<span class="string">'I'</span>, <span class="string">'love'</span>,<span class="string">'Yanggougou'</span>]</span><br><span class="line">print(la)</span><br><span class="line">ta = tuple(la)</span><br><span class="line">print(ta[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><pre><code>[&apos;I&apos;, &apos;love&apos;, &apos;Yanggougou&apos;]Yanggougou</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tuple分片操作</span></span><br><span class="line">print(ta[:])</span><br><span class="line">print(ta[:<span class="number">2</span>])</span><br><span class="line">print(ta[<span class="number">-1</span>::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><pre><code>(&apos;I&apos;, &apos;love&apos;, &apos;Yanggougou&apos;)(&apos;I&apos;, &apos;love&apos;)(&apos;Yanggougou&apos;, &apos;love&apos;, &apos;I&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元组相加</span></span><br><span class="line">ta = <span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span></span><br><span class="line">tb = (<span class="string">'I'</span>, <span class="string">'Love'</span>, <span class="string">'Yanggougou'</span>)</span><br><span class="line">tc = ta + tb</span><br><span class="line">print(tc)</span><br></pre></td></tr></table></figure><pre><code>(100, 200, 300, &apos;I&apos;, &apos;Love&apos;, &apos;Yanggougou&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tuple乘法</span></span><br><span class="line">tc = tb * <span class="number">2</span></span><br><span class="line">print(tc)</span><br></pre></td></tr></table></figure><pre><code>(&apos;I&apos;, &apos;Love&apos;, &apos;Yanggougou&apos;, &apos;I&apos;, &apos;Love&apos;, &apos;Yanggougou&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tuple成员检测</span></span><br><span class="line">print(tb)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'Yanggougou'</span> <span class="keyword">in</span> tb:</span><br><span class="line">    print(<span class="string">"YES"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'love'</span> <span class="keyword">not</span> <span class="keyword">in</span> tb: </span><br><span class="line">    print(<span class="string">"NO"</span>)</span><br></pre></td></tr></table></figure><pre><code>(&apos;I&apos;, &apos;Love&apos;, &apos;Yanggougou&apos;)YESNO</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tuple遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tb:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>ILoveYanggougou</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ta = ((<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>),(<span class="string">'I'</span>,<span class="string">'Love'</span>,<span class="string">'Ynaggougou'</span>),(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>))</span><br><span class="line"><span class="comment"># 嵌套元组的访问</span></span><br><span class="line"><span class="comment"># 1.双层循环访问</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ta:</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        print(j)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 2.使用单层循环访问</span></span><br><span class="line"><span class="keyword">for</span> i,j,k <span class="keyword">in</span> ta:</span><br><span class="line">    print(i,j,k)</span><br><span class="line"><span class="comment">#上面访问有一个规定，几i,j,k要和元组元素个数对应</span></span><br><span class="line"><span class="keyword">for</span> i,j,k,q <span class="keyword">in</span> ta:</span><br><span class="line">    print(i,j,k,q)</span><br></pre></td></tr></table></figure><pre><code>(10, 20, 30)102030(&apos;I&apos;, &apos;Love&apos;, &apos;Ynaggougou&apos;)ILoveYnaggougou(100, 200, 300)10020030010 20 30I Love Ynaggougou100 200 300---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)&lt;ipython-input-43-d64a99607a4b&gt; in &lt;module&gt;     11     print(i,j,k)     12 #上面访问有一个规定，几i,j,k要和元组元素个数对应---&gt; 13 for i,j,k,q in ta:     14     print(i,j,k,q)ValueError: not enough values to unpack (expected 4, got 3)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用的元组函数</span></span><br><span class="line">ta = (<span class="number">1</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line"><span class="comment"># len：取长度</span></span><br><span class="line">print(len(ta))</span><br><span class="line"><span class="comment"># max：取最大值</span></span><br><span class="line">print(max(ta))</span><br><span class="line"></span><br><span class="line">tb = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"love"</span>)</span><br><span class="line">print(max(tb))</span><br></pre></td></tr></table></figure><pre><code>434---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-50-28c83d67aa92&gt; in &lt;module&gt;      7       8 tb = (1, 2, 3, &quot;love&quot;)----&gt; 9 print(max(tb))TypeError: &apos;&gt;&apos; not supported between instances of &apos;str&apos; and &apos;int&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># count：对某个元素计数</span></span><br><span class="line">ta = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">23</span>,<span class="number">567</span>,<span class="number">9</span>,<span class="number">123</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">1</span>)</span><br><span class="line">print(ta.count(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># index：某一元素的所在位置</span></span><br><span class="line">print(ta.index(<span class="number">6</span>))</span><br></pre></td></tr></table></figure><pre><code>55</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tuple特殊用法</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="string">"Yanggougou"</span></span><br><span class="line">print(a,b)</span><br><span class="line"><span class="comment"># 要求对a,b进行互换</span></span><br><span class="line"><span class="comment"># 此种用法是Python专用</span></span><br><span class="line">a,b = b,a</span><br><span class="line">print(a,b)</span><br></pre></td></tr></table></figure><pre><code>100 YanggougouYanggougou 100</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Python字符串"><a href="#Python字符串" class="headerlink" title="Python字符串"></a>Python字符串</h2><p>定义：它是一个有序的字符的集合，用于存储和表示基本的文本信息，’’或””或””” “””中间包含的内容称之为字符串</p><h3 id="查找类函数"><a href="#查找类函数" class="headerlink" title="查找类函数"></a>查找类函数</h3><ul><li>字符串查找类。find、index、islower</li><li>find：查找字符串中是否包含一个子串</li><li>index: 跟fid的唯一区别是index如果没有找到会引发异常</li><li>rfind、lfind：向右找或者向左找</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Liu Dana kove Wang xiaojing"</span></span><br><span class="line">s1 = <span class="string">"xiaojing"</span></span><br><span class="line"><span class="comment"># 返回第一次发现这个字符串的位置</span></span><br><span class="line">s.find(s1)</span><br></pre></td></tr></table></figure><pre><code>19</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Liu Dana kove Wang xiaojing"</span></span><br><span class="line"><span class="comment"># 返回-1表示没有找到</span></span><br><span class="line">s2 = <span class="string">"WanWan"</span></span><br><span class="line">s.find(s2)</span><br></pre></td></tr></table></figure><pre><code>-1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.index(s1)</span><br></pre></td></tr></table></figure><pre><code>19</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#index回报错或者引发异常</span></span><br><span class="line">s.index(s2)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)&lt;ipython-input-4-e04416278ca6&gt; in &lt;module&gt;      1 #index回报错或者引发异常----&gt; 2 s.index(s2)ValueError: substring not found</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用的时候可以使用区间</span></span><br><span class="line">s = <span class="string">"Liu Dana kove Wang xiaojing and Zhang xiaojing"</span></span><br><span class="line">s1 = <span class="string">"xiaojing"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从下标20开始找，看能否找到</span></span><br><span class="line">s.find(s1, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><pre><code>38</code></pre><h3 id="判断类函数"><a href="#判断类函数" class="headerlink" title="判断类函数"></a>判断类函数</h3><ul><li><p>此函数的特点是一般都以is开头，比如islower</p></li><li><p>isalpha：判断是否是字母，需要注意以下两点：</p><ul><li>此函数默认的前提是字符串至少包含一个字符，如果没有，返回false</li><li>汉字被认为alpha，所以此函数不能你作为判断英文字母和汉字的标识，区分中英文，请使用unicode码</li><li>注意使用区别，防止被坑</li></ul></li><li><p>isdigit,isnumric,isdecimal三个判断数字的函数,该三个函数的总结如下：</p><ul><li><p>此类函数不建议使用，在后期爬虫中，判断是否是数字建议使用正则表达式</p><ul><li><p>isdigit:</p><ul><li>True：Unicode数字，byte数字（单字节），全角数字（双字节），罗马数字</li><li>False：汉字数字</li><li>Error：无</li></ul></li><li><p>isdecimal:</p><ul><li>True：Unicode数字，全角数字（双字节）</li><li>False：罗马数字，汉字数字</li><li>Error：byte（单字节）</li></ul></li><li><p>isnumeric:</p><ul><li>True：Unicode数字， 全角数字（双字节），罗马数字，汉字数字</li><li>False：无</li><li>Error：byte（单字节）</li></ul></li></ul></li></ul></li><li><p>islower：判断是否是大写还是小写</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下三个都不是。因为除了字母还有空格</span></span><br><span class="line">s1 = <span class="string">"我们对着灯发誓，刘大拿同学是爱着王小静的"</span></span><br><span class="line">s2 = <span class="string">"bengberba is friend of baberbeng"</span></span><br><span class="line">s3 = <span class="string">"TuLingXueYuan.com is the 1.st"</span></span><br><span class="line"></span><br><span class="line">print(s1.isalpha())</span><br><span class="line">print(s2.isalpha())</span><br><span class="line">print(s3.isalpha())</span><br></pre></td></tr></table></figure><pre><code>FalseFalseFalse</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要注意的是，因为输入法的问题，输入的罗马数字得不到我们想要的结果</span></span><br><span class="line">chin_num = <span class="string">"一二三四"</span></span><br><span class="line">print(chin_num.isdigit())</span><br><span class="line">print(chin_num.isnumeric())</span><br><span class="line">print(chin_num.isdecimal())</span><br></pre></td></tr></table></figure><pre><code>FalseTrueFalse</code></pre><h1 id="内容判断类"><a href="#内容判断类" class="headerlink" title="内容判断类"></a>内容判断类</h1><ul><li><p>startswith/endswith：是否以什么开头或者结尾</p><ul><li>监测某个字符串是否以某个子串开头，常用三个参数</li><li>suffix：被检测的字符串，必须有</li><li>start：检查范围的开始</li><li>end：检查范围的结束</li></ul></li><li><p>islower/isupper：判断字符串是否是大写还是小写</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dana = <span class="string">"Liu Dana"</span></span><br><span class="line">xiaojing = <span class="string">"Xiao jing"</span></span><br><span class="line">s = <span class="string">"Liu Dana really love Wang Xiao jing"</span></span><br><span class="line"></span><br><span class="line">print(s.startswith(dana))</span><br><span class="line">print(s.endswith(xiaojing))</span><br></pre></td></tr></table></figure><pre><code>TrueTrue</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">"Dana love wang xiaojing"</span></span><br><span class="line">s2 = <span class="string">"Danalovewangxiaojing"</span></span><br><span class="line">s3 = <span class="string">"danalovewangxiaojing"</span></span><br><span class="line"><span class="comment">#s4 包含空格，但空格不影响结果，忽略</span></span><br><span class="line">s4 = <span class="string">"dana love wangxiaojing"</span></span><br><span class="line">s5 = <span class="string">"刘大拿同学是爱过王晓静滴"</span></span><br><span class="line"></span><br><span class="line">print(s1.islower())</span><br><span class="line">print(s2.islower())</span><br><span class="line">print(s3.islower())</span><br><span class="line">print(s4.islower())</span><br><span class="line"><span class="comment"># 汉字字符串无大小写概念</span></span><br><span class="line">print(s5.islower())</span><br><span class="line">print(s5.isupper())</span><br></pre></td></tr></table></figure><pre><code>FalseFalseTrueTrueFalseFalse</code></pre><h3 id="操作类函数"><a href="#操作类函数" class="headerlink" title="操作类函数"></a>操作类函数</h3><ul><li>format：格式化用的</li><li>strip：去除字符串两方的空格，允许定义删除字符串两边的哪个字符，只不过不指定的话默认为空格。同样还有lstrip和rstrip，分别表示删除字符串左边、右边指定的字符串。默认为空格。注意此处的删除不是删除的一个，而是指从头开始缝合条件的连续字符</li><li>strip相似的还有lstrip、rstrip</li><li>join：拼接字符串。需要一个可迭代的内容分作为参数。功能是把可迭代的字符串拼接再一起，中间使用调用字符串作为分隔符。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="string">"DDDDana love xiaojing "</span></span><br><span class="line"><span class="comment"># 是否成功删除两边的空格不能观察出来</span></span><br><span class="line">print(c.strip(<span class="string">''</span>))</span><br><span class="line">print()</span><br><span class="line">print(c.strip(),end=<span class="string">"-----"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"--------"</span>)</span><br><span class="line">print(c.strip(<span class="string">'D'</span>))</span><br><span class="line">print()</span><br><span class="line">print(c.strip(<span class="string">"D"</span>),end=<span class="string">"-----"</span>)</span><br></pre></td></tr></table></figure><pre><code>DDDDana love xiaojing DDDDana love xiaojing-------------ana love xiaojing ana love xiaojing -----</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># join的例子。我们需要使用s1,s2,s3作为分隔符，把ss的内容拼接到一起</span></span><br><span class="line">s1 = <span class="string">"$"</span></span><br><span class="line">s2 = <span class="string">"-"</span></span><br><span class="line">s3 = <span class="string">" "</span></span><br><span class="line">ss = [<span class="string">"Liu Dana"</span>, <span class="string">"love"</span>, <span class="string">"Wang"</span>, <span class="string">"Xiaojing"</span>]</span><br><span class="line"></span><br><span class="line">print(s1.join(ss))</span><br><span class="line">print(s2.join(ss))</span><br><span class="line">print(s3.join(ss))</span><br></pre></td></tr></table></figure><pre><code>Liu Dana$love$Wang$XiaojingLiu Dana-love-Wang-XiaojingLiu Dana love Wang Xiaojing</code></pre><h1 id="tulingxueyuan-coding-net"><a href="#tulingxueyuan-coding-net" class="headerlink" title="tulingxueyuan.coding.net"></a>tulingxueyuan.coding.net</h1><h2 id="Python表达式"><a href="#Python表达式" class="headerlink" title="Python表达式"></a>Python表达式</h2><ul><li>由一个或几个数字或者变量或者运算符合成第一行代码</li><li>通常返回一个结果<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1></li><li>由一个以上的值经过一系列运算得到新值的过程就叫运算</li><li>用来操作运算的符号叫做运算符</li><li>运算符分类<ul><li>算数运算符</li><li>比较或关系运算符</li><li>赋值运算符</li><li>逻辑运算符</li><li>位运算符</li><li>成员运算符</li><li>身份运算符</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表达式案例</span></span><br><span class="line">a = <span class="number">1</span> + <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><ul><li>用来进行算数运算的符号</li><li>通常用来表示加减乘除</li><li>Python没有自增自减运算符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 算数运算符案例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加减乘跟数学基本一致</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">9</span> - <span class="number">2</span> </span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">b= <span class="number">9</span> + <span class="number">2</span></span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">c = <span class="number">8</span> * <span class="number">2</span></span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python除法分为普通除法，地板除，取余</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#正常除法(python2和python3不同)</span></span><br><span class="line">d = <span class="number">9</span> / <span class="number">2</span></span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#地板除，取整</span></span><br><span class="line">e = <span class="number">9</span> // <span class="number">2</span></span><br><span class="line">print(e)</span><br><span class="line"></span><br><span class="line"><span class="comment">#取余</span></span><br><span class="line">f = <span class="number">9</span> % <span class="number">2</span></span><br><span class="line">print(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 负数取余的结果</span></span><br><span class="line">g = <span class="number">9</span> % <span class="number">-4</span></span><br><span class="line">print(g)</span><br><span class="line"></span><br><span class="line"><span class="comment">#两个乘号就是指数</span></span><br><span class="line">a = <span class="number">7</span> ** <span class="number">2</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><pre><code>711164.541-349</code></pre><h1 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h1><ul><li>对两个内容进行比较的运算符</li><li>结果一定是布尔值，即True/False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 等于 ==</span></span><br><span class="line">a = <span class="number">3</span> == <span class="number">4</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不等于 != </span></span><br><span class="line">a = <span class="number">3</span> != <span class="number">4</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他的符号是</span></span><br><span class="line"><span class="comment"># &gt;, &gt;=, &lt;, &lt;=</span></span><br><span class="line">print(<span class="number">3</span> &gt;= <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Wangxiaojing"</span> &gt; <span class="string">"liudana"</span>)</span><br><span class="line">print(<span class="string">"Wangxiaojing"</span> &gt; <span class="string">"Wangx"</span>)</span><br></pre></td></tr></table></figure><pre><code>FalseTrueFalseFalseTrue</code></pre><h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><ul><li>把一个值放到变量里边去</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 赋值符号 = </span></span><br><span class="line">a = <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂赋值</span></span><br><span class="line">a = b = <span class="number">9</span></span><br><span class="line">a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋值的缩写</span></span><br><span class="line">z = <span class="number">100</span></span><br><span class="line">z = z + <span class="number">3</span></span><br><span class="line">print(z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意下面的符号仅仅是一个缩写</span></span><br><span class="line">z = <span class="number">100</span></span><br><span class="line">z += <span class="number">3</span></span><br><span class="line">print(z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有数学运算符都可以缩写</span></span><br><span class="line"><span class="comment"># -=, +=, /=, //=, %=, **=。都是缩写形式</span></span><br><span class="line"><span class="comment"># Python里面没有 ++, --</span></span><br></pre></td></tr></table></figure><pre><code>103103</code></pre><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><ul><li>对布尔类型变量或者值进行运算的符号</li><li>and：逻辑与</li><li>or：逻辑或</li><li>not：逻辑非</li><li>python里面的逻辑运算没有异或</li><li>运算规则：<ul><li>and看做乘法，or看做加法</li><li>True看做1，False看做0</li><li>则逻辑运算就能转换成整数运算</li><li>最后结果如果是0则为False，否则为True</li></ul></li><li>逻辑运算的短路问题<ul><li>逻辑运算时，按照运算顺序计算，一旦能够确定整个式子未来的值，则不再进行计算，直接返回</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逻辑表达式案例</span></span><br><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">True</span></span><br><span class="line">c = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">aa = a <span class="keyword">and</span> b   <span class="comment">#右边表达式可以转换成1*1</span></span><br><span class="line">print(aa)</span><br><span class="line"></span><br><span class="line">bb =a <span class="keyword">and</span> c</span><br><span class="line">print(bb)</span><br><span class="line"></span><br><span class="line">cc = <span class="number">100</span> <span class="keyword">and</span> c</span><br><span class="line">print(cc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔值跟数字的转换</span></span><br><span class="line"><span class="comment"># 数字转换成布尔值的时候， 0 = False，其余的是True</span></span><br><span class="line"><span class="comment"># 布尔值转换成数字的时候，True = 1， False = 0</span></span><br></pre></td></tr></table></figure><pre><code>TrueFalseFalse</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 短路问题案例1</span></span><br><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">True</span></span><br><span class="line">c = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">aa = a <span class="keyword">or</span> b <span class="keyword">and</span> (a <span class="keyword">and</span> b)     <span class="comment">#转化成算数 1 + .........</span></span><br><span class="line">print(aa)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 短路问题案例2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'b'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">aaa = a() <span class="keyword">and</span> b()</span><br><span class="line">print(aaa)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串乘以数字，表示这个字符串重复多少遍</span></span><br><span class="line">print(<span class="string">"*"</span> * <span class="number">20</span>)</span><br><span class="line">bbb = a() <span class="keyword">or</span> b()   <span class="comment">#短路发生</span></span><br><span class="line">print(bbb)</span><br></pre></td></tr></table></figure><pre><code>abTrue********************aTrue</code></pre><h1 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h1><ul><li>用来检测一个值或者变量是否在某个集合里</li><li>in：成员运算符</li><li>not in：不再里面的意思 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in 案例</span></span><br><span class="line">L= [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">a = <span class="number">6</span></span><br><span class="line">aa = a <span class="keyword">in</span> L</span><br><span class="line">print(aa)</span><br><span class="line"><span class="comment"># a没有在L里面</span></span><br><span class="line">aa = a <span class="keyword">not</span> <span class="keyword">in</span> L</span><br><span class="line">print(aa)</span><br></pre></td></tr></table></figure><pre><code>FalseTrue</code></pre><h1 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h1><ul><li><p>用来确定两个变量是否是同一个变量</p></li><li><p>is：变量运算符</p></li><li><p>not is：不是</p></li><li><p>Python中，对整数N \in [-5, 256],解释器对他们做了单独处理，放到了固定的内存中，不因每次运行而变化</p></li></ul><p>这里再次记录一些相关的。</p><ul><li>不仅对小整数有这样的处理，内建的类（int，staticmamethod，object，TypeError…）也是这样处理的</li><li>看一个变量的内存是不是这样处理的，无需运行两次，只需要看id()编号长度就行，他们是10位的，普通变量都是13位。</li><li>其实并不是每次运行结果都是一样的，比如重启之后再试试</li><li>不同的软件打开同一个python解释器结果也是不同的（最先打开的那个会影响其他的）。比如我电脑上先打开pycharm、cmd、jupyter得到的是不同的结果</li><li>电脑不关机的话，软件重复打开关闭的id是一样的</li><li>同一电脑上的不同的python解释器结果也肯定不同的，不同电脑更不用说。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 身份运算符定义</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">10999999</span></span><br><span class="line">aa = a <span class="keyword">is</span> b</span><br><span class="line">print(aa)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a,b仅仅是值一样，并不代表a,b是一个变量 </span></span><br><span class="line">a = <span class="number">10999999</span></span><br><span class="line">b = <span class="number">10999999</span></span><br><span class="line">aa = a <span class="keyword">is</span> b</span><br><span class="line">print(aa)</span><br><span class="line"></span><br><span class="line"><span class="comment">#正确理解下面案例和上面案例的区别</span></span><br><span class="line"><span class="comment"># a,b仅仅是值一样，并不代表a,b是一个变量 </span></span><br><span class="line"><span class="comment"># 小一点的数字不用重新开辟空间，</span></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line">aa = a <span class="keyword">is</span> b</span><br><span class="line">print(aa)</span><br></pre></td></tr></table></figure><pre><code>FalseFalseTrue</code></pre><h1 id="运算符优先级问题"><a href="#运算符优先级问题" class="headerlink" title="运算符优先级问题"></a>运算符优先级问题</h1><ul><li>小括号具有最高优先级</li></ul><pre><code>** 指数（最高优先级）~ + - 按位翻转，一元就加号和减号（最后两个方法名为 +@ 和 -@）* / % // 乘，除，取模和取整除+ - 加减法&gt;&gt; &lt;&lt; 右移左移运算符&amp; 位 &apos;AND&apos;~ | 位运算符&lt;= &lt; &gt; &gt;=  比较运算符&lt; &gt; == !=  等于运算符= %= /= //= -= += *= **= 赋值运算符is  not is 身份运算符in  not in 成员运算符</code></pre><h2 id="Python递归"><a href="#Python递归" class="headerlink" title="Python递归"></a>Python递归</h2><ul><li>递归：函数直接或者间接调用自己</li><li>递归分两个过程：<ul><li>往下回溯。分解的过程</li><li>往上回溯，综合的过程</li></ul></li><li>递归需要注意<ul><li>一定有结束条件</li></ul></li><li>以资源换取编写速度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funca</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">"I am MINT"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcb</span><span class="params">(n)</span>:</span></span><br><span class="line">    funca(<span class="number">100</span>)</span><br><span class="line">    print(<span class="string">"I am Yanggougou"</span>)</span><br><span class="line">funcb(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><pre><code>I am MINTI am Yanggougou</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># func_a表示阶乘</span></span><br><span class="line"><span class="comment"># 利用数学公式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_a</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(n)</span><br><span class="line">    <span class="comment"># 递归必须有结束条件，否则会死掉</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n * func_a(n<span class="number">-1</span>)</span><br><span class="line">rst = func_a(<span class="number">6</span>)</span><br><span class="line">print(<span class="string">"f(6)="</span>, rst)</span><br></pre></td></tr></table></figure><pre><code>654321f(6)= 720</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 斐波那切数列</span></span><br><span class="line"><span class="comment"># 数学定义自行查找</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="comment"># 结束条件</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line">rst = fib(<span class="number">10</span>)</span><br><span class="line">print(<span class="string">"rst = "</span>,rst)</span><br></pre></td></tr></table></figure><pre><code>rst =  55</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 汉诺塔</span></span><br><span class="line"><span class="comment"># 把a上的盘子通过移动到c上，注意盘子必须大的在下面</span></span><br><span class="line">a = <span class="string">'A'</span></span><br><span class="line">b = <span class="string">'B'</span></span><br><span class="line">c = <span class="string">'C'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanot</span><span class="params">(a,b,c,n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n ==<span class="number">1</span>:</span><br><span class="line">        print(<span class="string">"&#123;&#125;--&gt;&#123;&#125;"</span>.format(a,c))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        print(<span class="string">"&#123;&#125;--&gt;&#123;&#125;"</span>.format(a,c))</span><br><span class="line">        print(<span class="string">"&#123;&#125;--&gt;&#123;&#125;"</span>.format(a,b))</span><br><span class="line">        print(<span class="string">"&#123;&#125;--&gt;&#123;&#125;"</span>.format(b,c))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 有n个盘子，把n-1(上面的n-1)个从a借助c，放到b上</span></span><br><span class="line">    hanot(a,c,b,n<span class="number">-1</span>)</span><br><span class="line">    print(<span class="string">"&#123;&#125;--&gt;&#123;&#125;"</span>.format(a,c))</span><br><span class="line">    hanot(b,a,c,n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个盘子</span></span><br><span class="line">hanot(a,b,c,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>A--&gt;C</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两个盘子</span></span><br><span class="line">hanot(a,b,c,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>A--&gt;CA--&gt;BB--&gt;C</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4个盘子</span></span><br><span class="line">hanot(a,b,c,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><pre><code>A--&gt;CA--&gt;BB--&gt;CA--&gt;BC--&gt;BC--&gt;AA--&gt;BA--&gt;CB--&gt;AB--&gt;CC--&gt;AB--&gt;CA--&gt;CA--&gt;BB--&gt;C</code></pre><h2 id="Python集合"><a href="#Python集合" class="headerlink" title="Python集合"></a>Python集合</h2><ul><li>跟数学中的集合概念一致</li><li>内容无序 + 内容不重复</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集合的定义</span></span><br><span class="line"><span class="comment"># 1.通过set关键字</span></span><br><span class="line">sa = set()</span><br><span class="line">print(sa)</span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">345</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">sb = set(li)</span><br><span class="line">print(sb)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用大括号</span></span><br><span class="line">sc = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">44</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">345</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">print(sc)</span><br></pre></td></tr></table></figure><pre><code>set(){1, 2, 3, 4, 5, 6, 12, 345}{1, 2, 3, 4, 5, 6, 44, 12, 345}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in 操作</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">2</span> <span class="keyword">in</span> sc:</span><br><span class="line">    print(<span class="number">2222222222</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">23</span> <span class="keyword">in</span> sc:</span><br><span class="line">    print(NONONONNO)</span><br></pre></td></tr></table></figure><pre><code>2222222222</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集合遍历</span></span><br><span class="line">sa = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">44</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">345</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sc:</span><br><span class="line">    print(i)</span><br><span class="line">sb = &#123;(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>),(<span class="string">'I'</span>,<span class="string">'Love'</span>,<span class="string">'Yanggougou'</span>)&#125;</span><br><span class="line"><span class="keyword">for</span> i,j,k <span class="keyword">in</span> sb:</span><br><span class="line">    print(i,j,k)</span><br></pre></td></tr></table></figure><pre><code>1234564412345I Love Yanggougou4 5 61 2 3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集合的生成式</span></span><br><span class="line">sa = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;</span><br><span class="line">sb = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> sa&#125;</span><br><span class="line">print(sb)</span><br><span class="line">sc = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> sa <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>&#125;</span><br><span class="line">print(sc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 双重for循环</span></span><br><span class="line"><span class="comment"># 把sa中每一个元素的平方生成一个新的集合</span></span><br><span class="line"><span class="comment"># 1.用一个for</span></span><br><span class="line">sd = &#123; i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> sa&#125;</span><br><span class="line">print(sd)</span><br><span class="line"><span class="comment"># 2.使用两个for循环</span></span><br><span class="line"><span class="comment"># 仔细思考，se的长度应该是多少个</span></span><br><span class="line">se = &#123;m*n <span class="keyword">for</span> m <span class="keyword">in</span> sa <span class="keyword">for</span> n <span class="keyword">in</span> sa&#125;</span><br><span class="line">print(se)</span><br></pre></td></tr></table></figure><pre><code>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}{2, 4, 6, 8, 10}{64, 1, 4, 36, 100, 9, 16, 49, 81, 25}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 24, 25, 27, 28, 30, 32, 35, 36, 40, 42, 45, 48, 49, 50, 54, 56, 60, 63, 64, 70, 72, 80, 81, 90, 100}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集合的内置函数</span></span><br><span class="line"><span class="comment"># len：长度</span></span><br><span class="line">print(len(se))</span><br><span class="line"><span class="comment"># max/min：最值</span></span><br><span class="line"><span class="comment"># add：向集合中添加元素</span></span><br><span class="line">sa = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;</span><br><span class="line">print(sa)</span><br><span class="line"><span class="comment"># 打印结果不是sa,</span></span><br><span class="line">print(sa.add(<span class="number">7</span>))</span><br><span class="line">print(sa)</span><br><span class="line"><span class="comment"># clear：清空</span></span><br></pre></td></tr></table></figure><pre><code>42{1, 2, 3, 4, 5, 6}None{1, 2, 3, 4, 5, 6, 7}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除操作</span></span><br><span class="line"><span class="comment"># remove 和 discard的区别</span></span><br><span class="line">sa = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line">print(sa)</span><br><span class="line">sa.remove(<span class="number">5</span>)</span><br><span class="line">print(sa)</span><br><span class="line"><span class="comment"># remove删除的值不存在集合中，报错</span></span><br><span class="line">sa.remove(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>{1, 2, 3, 4, 5, 6, 7}{1, 2, 3, 4, 6, 7}---------------------------------------------------------------------------KeyError                                  Traceback (most recent call last)&lt;ipython-input-43-eebf097aaad5&gt; in &lt;module&gt;      6 print(sa)      7 # remove删除的值不存在集合中，报错----&gt; 8 sa.remove(5)KeyError: 5</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sa = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line">print(sa)</span><br><span class="line">sa.discard(<span class="number">5</span>)</span><br><span class="line">print(sa)</span><br><span class="line">sa.discard(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><pre><code>{1, 2, 3, 4, 5, 6, 7}{1, 2, 3, 4, 6, 7}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pop弹出集合的一个内容</span></span><br><span class="line"><span class="comment"># 删除的内容是随机的</span></span><br><span class="line"><span class="comment"># 删除的内容没有规律，随机</span></span><br><span class="line">sa = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line">print(sa)</span><br><span class="line">sa.pop()</span><br><span class="line">print(sa)</span><br></pre></td></tr></table></figure><pre><code>{1, 2, 3, 4, 5, 6, 7}{2, 3, 4, 5, 6, 7}</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集合的数学操作</span></span><br><span class="line"><span class="comment"># intersection：交集</span></span><br><span class="line">sa = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">sb = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line"><span class="comment"># sa和sb的交集</span></span><br><span class="line">print(sa.intersection(sb))</span><br><span class="line"></span><br><span class="line"><span class="comment"># difference：差集</span></span><br><span class="line">print(sa.difference(sb))</span><br><span class="line"><span class="comment"># 差集另一种表示</span></span><br><span class="line">print(sa - sb)</span><br><span class="line"></span><br><span class="line"><span class="comment"># union：并集</span></span><br><span class="line">print(sa.union(sb))</span><br><span class="line">print(sb.union(sa))</span><br><span class="line"><span class="comment"># + 不表示并集</span></span><br><span class="line">print(sa + sb)</span><br></pre></td></tr></table></figure><pre><code>{4, 5, 6}{1, 2, 3}{1, 2, 3}{1, 2, 3, 4, 5, 6, 7, 8, 9}{1, 2, 3, 4, 5, 6, 7, 8, 9}---------------------------------------------------------------------------TypeError                                 Traceback (most recent call last)&lt;ipython-input-94-f45a7ca65304&gt; in &lt;module&gt;     15 print(sb.union(sa))     16 # + 不表示并集---&gt; 17 print(sa + sb)TypeError: unsupported operand type(s) for +: &apos;set&apos; and &apos;set&apos;</code></pre><h1 id="forzenset-冰冻集合"><a href="#forzenset-冰冻集合" class="headerlink" title="forzenset 冰冻集合"></a>forzenset 冰冻集合</h1><ul><li>不允许修改的集合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例</span></span><br><span class="line">print(sa)</span><br><span class="line">sb = frozenset(sa)</span><br><span class="line">print(sb)</span><br></pre></td></tr></table></figure><pre><code>{1, 2, 3, 4, 5, 6}frozenset({1, 2, 3, 4, 5, 6})</code></pre><h2 id="Python程序结构"><a href="#Python程序结构" class="headerlink" title="Python程序结构"></a>Python程序结构</h2><ul><li>程序三种结构<ul><li>顺序</li><li>循环</li><li>分支</li></ul></li></ul><h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><ul><li><p>分支机构基本语句</p><p>  if 条件表达式:</p><pre><code>语句1语句2语句3......</code></pre></li><li><p>条件表达式就是计算结果必须为布尔值的表达式</p></li><li><p>表达式后面的冒号不能少</p></li><li><p>注意if后面的出现的语句，如果属于if语句块，则必须属于同一个缩进等级</p></li><li><p>条件表达式结果为True执行if后面的缩进的语句块</p></li></ul><h1 id="双向分支"><a href="#双向分支" class="headerlink" title="双向分支"></a>双向分支</h1><ul><li><p>if …else…表达式</p></li><li><p>语法结构：</p><p>  if 条件表达式：</p><pre><code>语句1语句2...</code></pre><p>  else:</p><pre><code>语句1语句2...</code></pre></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if 语句案例</span></span><br><span class="line"><span class="comment"># 如果今天不上班，就不用挤地铁了</span></span><br><span class="line">a = <span class="string">"今天不上班"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串的真假</span></span><br><span class="line"><span class="comment"># 只有空字符串为False，其余全为True</span></span><br><span class="line">b = <span class="string">" "</span></span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line">    print(<span class="string">"今天不用挤地铁啦"</span>)</span><br><span class="line">    print(<span class="string">"真tmd舒服呀"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"苦逼的工作，还得继续哇"</span>)</span><br></pre></td></tr></table></figure><pre><code>今天不用挤地铁啦真tmd舒服呀</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if 练习2</span></span><br><span class="line">age = <span class="number">24</span></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"成年啦，喝酒去"</span>)</span><br><span class="line">print(<span class="string">"下次我请你"</span>)</span><br></pre></td></tr></table></figure><pre><code>成年啦，喝酒去下次我请你</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># input的作用：</span></span><br><span class="line"><span class="comment"># 1.在屏幕上输出括号内的字符串</span></span><br><span class="line"><span class="comment"># 2.接收用户在标准输入上的内容返回到程序</span></span><br><span class="line"><span class="comment"># 3. input返回的内容一定是字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># input负责接收用户输入的内容返回给变量</span></span><br><span class="line">gender = input(<span class="string">"请输入你的性别(man/woman):"</span>)</span><br><span class="line"><span class="comment"># 打印输入的内容</span></span><br><span class="line">print(gender)</span><br><span class="line"><span class="keyword">if</span> gender == <span class="string">"man"</span>:</span><br><span class="line">    print(<span class="string">"走走走,组对LOL"</span>)</span><br><span class="line">    print(<span class="string">"游戏搞起"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"你到底是什么呀"</span>)</span><br><span class="line">    print(<span class="string">"对不起，我是男滴"</span>)</span><br></pre></td></tr></table></figure><h1 id="多路分支"><a href="#多路分支" class="headerlink" title="多路分支"></a>多路分支</h1><ul><li><p>很多分值的情况，叫多路分支</p><p>  if 条件表达式：</p><pre><code>语句1...</code></pre><p>   elif 条件表达式：</p><pre><code>语句1...</code></pre><p>   elif 条件表达式：</p><pre><code>语句1...</code></pre><p>   elif 条件表达式：</p><pre><code>语句1...</code></pre><p>   else:</p><pre><code>语句1...</code></pre></li><li><p>elif可以有很多个，根据实际情况</p></li><li><p>else可选</p></li><li><p>多路分支最多只会执行一种情况</p></li><li><p>if语句可以嵌套，但不推荐</p></li><li><p>python没有switch语句</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 考试成绩判断</span></span><br><span class="line"><span class="comment"># 成绩有用户输入</span></span><br><span class="line"><span class="comment"># 90分以上：优秀</span></span><br><span class="line"><span class="comment"># 80-90分：良</span></span><br><span class="line"><span class="comment"># 70-80分：中</span></span><br><span class="line"><span class="comment"># 60-70分：平</span></span><br><span class="line"><span class="comment"># 60分以下：你又不及格啦</span></span><br><span class="line"><span class="comment"># input返回的内容一定是字符串</span></span><br><span class="line"><span class="comment"># 输入成绩，需要输入input函数</span></span><br><span class="line">score = int(input(<span class="string">"请输入你的成绩："</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">"优"</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span> <span class="keyword">and</span> score &lt; <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">"良"</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span> <span class="keyword">and</span> score &lt; <span class="number">80</span>:</span><br><span class="line">    print(<span class="string">"中"</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span> <span class="keyword">and</span> score &lt; <span class="number">70</span>:</span><br><span class="line">    print(<span class="string">"平"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"差"</span>)</span><br></pre></td></tr></table></figure><pre><code>请输入你的成绩：99优</code></pre><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><ul><li>重复执行某一个固定的动作或者任务</li><li>分类<ul><li>for</li><li>while</li></ul></li></ul><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><ul><li><p>语法</p><p>  for 变量 in 序列：</p><pre><code>语句1语句2...</code></pre></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 循环例子</span></span><br><span class="line"><span class="comment"># 比如 [1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line"></span><br><span class="line">list_one = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> list_one:</span><br><span class="line">    print(num)</span><br><span class="line">    print(num + <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h1 id="for-else语句"><a href="#for-else语句" class="headerlink" title="for-else语句"></a>for-else语句</h1><ul><li>for循环结束的时候，有时候需要执行一些收尾工作，此时需要使用else收尾</li><li>else语句是可选的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印学生列表姓名</span></span><br><span class="line"><span class="comment"># 如果是jingjing，那肯定是我最爱呀</span></span><br><span class="line"><span class="comment"># 如果是别的学生，那我肯定冷酷的拒绝他</span></span><br><span class="line"></span><br><span class="line">stu_list = [<span class="string">'王二牛'</span>,<span class="string">'李美丽'</span>,<span class="string">'张二狗'</span>,<span class="string">'王麻子'</span>]</span><br><span class="line"><span class="keyword">for</span> stu <span class="keyword">in</span> stu_list:</span><br><span class="line">    <span class="keyword">if</span> stu == <span class="string">"张二狗"</span>:</span><br><span class="line">        print(<span class="string">"这位是张二狗"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"对不起同学，认错人了"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"不会再爱了"</span>)</span><br></pre></td></tr></table></figure><h1 id="break-contiune-pass"><a href="#break-contiune-pass" class="headerlink" title="break, contiune, pass"></a>break, contiune, pass</h1><ul><li>break：无条件结束整个循环，简称循环猝死</li><li>continue：继续，记录结束本轮循环，到下一轮</li><li>pass：只是一个占位符,代表这句话啥也不干，没有跳过功能</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确定一个数组队列中，是否包含某个数字，找到即可，不需要再继续找。所以用break</span></span><br><span class="line">dig_list = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">23</span>]</span><br><span class="line"><span class="keyword">for</span> dig <span class="keyword">in</span> dig_list:</span><br><span class="line">    <span class="keyword">if</span> dig == <span class="number">7</span>:</span><br><span class="line">        print(<span class="string">"哈哈哈，终于找到你"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(dig)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># continue语句案例1</span></span><br><span class="line"><span class="comment"># 确定一个数组队列中，是否包含某个数字，找到即可，不需要再继续找。所以用break</span></span><br><span class="line">dig_list = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">23</span>]</span><br><span class="line"><span class="keyword">for</span> dig <span class="keyword">in</span> dig_list:</span><br><span class="line">    <span class="keyword">if</span> dig == <span class="number">7</span>:</span><br><span class="line">        print(<span class="string">"哈哈哈，终于找到你"</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(dig)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># continue语句案例2</span></span><br><span class="line"><span class="comment"># 在数字1-10中，寻找所有偶数，找到偶数后打印偶数</span></span><br><span class="line"></span><br><span class="line">dig_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> dig  <span class="keyword">in</span> dig_list:</span><br><span class="line">    <span class="keyword">if</span> dig % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        print(dig)</span><br><span class="line">        print(<span class="string">"哈哈哈，你是一个双的"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dig_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> dig  <span class="keyword">in</span> dig_list:</span><br><span class="line">    <span class="keyword">if</span> dig % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(dig)</span><br><span class="line">    print(<span class="string">"哈哈哈，你是一个双的"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pass 案例1</span></span><br><span class="line">age = <span class="number">19</span></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">19</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"你还小，啥都干不了"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pass案例2</span></span><br><span class="line">ages = [<span class="number">2</span>,<span class="number">23</span>,<span class="number">43</span>,<span class="number">54</span>,<span class="number">65</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> age <span class="keyword">in</span> ages:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    print(age)</span><br></pre></td></tr></table></figure><h1 id="range函数"><a href="#range函数" class="headerlink" title="range函数"></a>range函数</h1><ul><li>生成有序数列</li><li>生成数字序列可以定制</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># range案例1</span></span><br><span class="line"><span class="comment">#生成一个从1-10的数字序列</span></span><br><span class="line"><span class="comment"># range生成的序列左包括右不包括</span></span><br><span class="line">dig_list = range(<span class="number">1</span>,<span class="number">11</span>)</span><br><span class="line"><span class="keyword">for</span> dig <span class="keyword">in</span> dig_list:</span><br><span class="line">    print(dig)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 一般在python中，连个表示范围的数字都是左包括右不包括，randint是个特例</span></span><br><span class="line"><span class="comment"># range函数再Python2和Python3中有严重区别</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># range案例3</span></span><br><span class="line"><span class="comment"># 打印1到5的数字</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>12345</code></pre><h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><ul><li><p>一个循环语句</p></li><li><p>表示当条件成立时，就循环，适应于不知道具体的循环次数，但能确定某个条件成立的情况下就循环</p></li><li><p>while语法</p><pre><code>while 条件表达式：    语句块 #另外一种表达式方法 while 条件表达式：     语句块1 else:     语句块2</code></pre></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果年利率是6.7%，本利是每年翻滚，这多少年本钱翻倍</span></span><br><span class="line"></span><br><span class="line">benqian = <span class="number">10000</span></span><br><span class="line">year = <span class="number">0</span>   <span class="comment">#存放需要翻本的年数</span></span><br><span class="line"><span class="keyword">while</span> benqian &lt; <span class="number">20000</span>:</span><br><span class="line">    benqian = benqian * (<span class="number">1</span>+ <span class="number">0.067</span>)</span><br><span class="line">    year += <span class="number">1</span>       <span class="comment"># year = year + 1</span></span><br><span class="line">print(year)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 年利率案例2</span></span><br><span class="line"><span class="comment"># 本案例中循环题没有被执行，why? ,如何改正？</span></span><br><span class="line">benqian = <span class="number">10000</span></span><br><span class="line">year =<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> benqian &lt; <span class="number">20000</span>:</span><br><span class="line">    benqian = benqian * (<span class="number">1</span>+ <span class="number">0.067</span>)</span><br><span class="line">    year += <span class="number">1</span>       <span class="comment"># year = year + 1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(year)</span><br></pre></td></tr></table></figure><pre><code>1111</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
